{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MicroPasts\u2019 documentation \u00b6 This documentation site will cover how to create, deploy, maintain and retrieve data for citizen science projects based around Arts and Humanities subjects. Within this mkdocs instance, we have forked the original Pybossa docs and embellished them for use with AWS EC2 and our installation methods and project creation. We stand on the shoulders of giants at SciFabric. The MicroPasts crowdsourcing platform was built as part of the MicroPasts project, funded by the UK Arts and Humanities Research Council and developed as a collaboration between the UCL Institute of Archaeology and the British Museum. The platform is now maintained by the main MicroPasts team (Andy Bevan, Daniel Pett, Chiara Bonacchi, Jennifer Wexler), together with other institutions, researchers and heritage professionals internationally. The MicroPasts crowdsourcing platform runs on the Pybossa framework developed by SciFabric. Templates have been created so far by the project team and by collaborators, by elaborating on and modifying some of the templates already available in Pybossa. The MicroPasts templates are modular, this means that they are adaptable to the needs of different collections and institutions. So far the kinds of tasks that are supported by the MicroPasts templates are: transcription of structured and unstructured text; geo-referencing of find spots; classification of photographic material; and 3D photo-masking. The framework we use (Pybossa), is described as: PYBOSSA is a technology developed by Scifabric. It is used for the development of platforms and data collection within collaborative environments, analysis and data enrichment. PYBOSSA is an extremely flexible and versatile technology with a multitude of applications that adapt to each specific case facilitating many of the daily tasks that take place in research environments such as museums, art galleries, heritage institutions, libraries of any kind, market research companies, hospitals, universities and all those organisations that manage data or require information from their customers/users -such as airports, shopping malls, banks, hotel chains, etc. PYBOSSA\u2019s simplicity consists in its easy adjustment to any areas using any of the available templates, this way every customer can then adapt it to their own needs. PYBOSSA can import data directly from other products such as Amazon S3, Twitter, Youtube, Google Spreadsheets, Flickr, Raspberry Pi, etc. Through all these integrations PYBOSSA allows data capture for further analysis made by users in a transparent and easy way.","title":"Home"},{"location":"#welcome-to-micropasts-documentation","text":"This documentation site will cover how to create, deploy, maintain and retrieve data for citizen science projects based around Arts and Humanities subjects. Within this mkdocs instance, we have forked the original Pybossa docs and embellished them for use with AWS EC2 and our installation methods and project creation. We stand on the shoulders of giants at SciFabric. The MicroPasts crowdsourcing platform was built as part of the MicroPasts project, funded by the UK Arts and Humanities Research Council and developed as a collaboration between the UCL Institute of Archaeology and the British Museum. The platform is now maintained by the main MicroPasts team (Andy Bevan, Daniel Pett, Chiara Bonacchi, Jennifer Wexler), together with other institutions, researchers and heritage professionals internationally. The MicroPasts crowdsourcing platform runs on the Pybossa framework developed by SciFabric. Templates have been created so far by the project team and by collaborators, by elaborating on and modifying some of the templates already available in Pybossa. The MicroPasts templates are modular, this means that they are adaptable to the needs of different collections and institutions. So far the kinds of tasks that are supported by the MicroPasts templates are: transcription of structured and unstructured text; geo-referencing of find spots; classification of photographic material; and 3D photo-masking. The framework we use (Pybossa), is described as: PYBOSSA is a technology developed by Scifabric. It is used for the development of platforms and data collection within collaborative environments, analysis and data enrichment. PYBOSSA is an extremely flexible and versatile technology with a multitude of applications that adapt to each specific case facilitating many of the daily tasks that take place in research environments such as museums, art galleries, heritage institutions, libraries of any kind, market research companies, hospitals, universities and all those organisations that manage data or require information from their customers/users -such as airports, shopping malls, banks, hotel chains, etc. PYBOSSA\u2019s simplicity consists in its easy adjustment to any areas using any of the available templates, this way every customer can then adapt it to their own needs. PYBOSSA can import data directly from other products such as Amazon S3, Twitter, Youtube, Google Spreadsheets, Flickr, Raspberry Pi, etc. Through all these integrations PYBOSSA allows data capture for further analysis made by users in a transparent and easy way.","title":"Welcome to MicroPasts' documentation"},{"location":"gdpr/","text":"GDPR \u00b6 As of the 25 of May 2018, every European project has to be GDPR compliant GDPR law . Below we explain how PYBOSSA meets the requested requirements to be GDPR compliant. Anonymous contributor IPs \u00b6 PYBOSSA has two types of users: Authenticated, and Anonymous For Anonymous Users, PYBOSSA has used always their IP address to identify them, however as they don\u2019t have an account, we can\u00b4t know who is the user behind that IP. In order to improve this security, PYBOSSA (v2.9.5) encodes the IP address using the technique Cryptography-based Prefix-preserving Anonymization to ensure that all IPs are anonymous. Therefore when downloading results or a project task run, you won\u00b4t get the real user IP as all of them have been made anonymous. We use the following Python module to perform this task. Forget me (or delete your account) \u00b6 PYBOSSA now allows any user (without a project) to delete his/her own account. This action cannot be undone. When users deletes their account, PYBOSSA will: Anonymize their task runs. The user_id will be removed, and for each task run PYBOSSA will generates a fake IP address, so that it is not possible to know what users have sent to the server. If the server is using Mailchimp integration, PYBOSSA will delete the user from the Mailchimp list sholuld the user subscribed to it. Delete all personal data from the server (DB). Email to the user and the server administrator so that the user knows everything has been deleted. !!! note: If the server is using DISQUS SSO, PYBOSSA will note in the removal confirmation email that - as of the 10 th of May 2018, DISQUS does not provide an API method to delete the user account. Therefore, PYBOSSA will inform the user that he/she will have to delete their DISQUS account. Export your own data \u00b6 From your personal PYBOSSA account you will be able to export the following data in list of zip files: All your personal data All your projects created by you All your contributions (task runs) PYBOSSA will create a ZIP file and send an email with links to your email. Those links will only be valid for 3 days - default configuration, after that they will be removed. These ZIP files have your data in JSON format, so you can view it with any text editor - standard format. See all my data \u00b6 You can get all your data first, so you can see it with any text editor in any platform. Restrict processing \u00b6 If you don\u2019t want to delete your account, but you want to restrict processing you can do that from your user\u2019s profile page. Just go to your settings, hit the update link and there check the restrict processing checkbox. This will ensure that no one access your data, not even the admins. By checking that box, you will be completely removed from the user API (only you can access your account under your ID), your User is not going to be part of the api USER filtering, you are not included in any leaderboard (including top 5 users for projects, and active users in the last 24 hours). Migrating from a PYBOSSA server version < v2.9.5 \u00b6 If your server is running a version smaller than v2.9.5 you will need to upgrade the server to the latest version in order to be GDPR compliant. You then have to anonymize your stored IPs. PYBOSSA provides a script for doing this task: python cli.py anonymize_ips If you have custom leaderboards, then, you will have to drop those materialized views by hand. Why? Because we\u2019re adding a new column to them. If you only use the default leaderboard, everything should work as expected. To delete your materialized views for your leaderboards, just run this command within the DB: drop materialized view users_rank_ { your_name } ; Replace the {} text with your names, and you will be fine. This will not delete any data, as the materialized views will be recreated by the jobs in the next tick. If you need them recreated now, just open a terminal and run the following command: from run import create_app from pybossa.leadeboard.jobs import leaderboard app = create_app ( False ) with app . app_context (): leaderboard ( info = 'your_name' ) leaderboard ( info = 'your_second' ) ... leaderboard ( info = 'your_n' ) That will recreate the views for you, and you will be ready to use them. Note We strongly recommend you to do a backup before running the upgrade and the migration of the DB. Lastly you will have to unsubscribe all your users from project updates. PYBOSSA has a DB migration for achiving it. Just run the following command: alembic upgrade head This will ensure that all your users are unsubscribed, and they can now subscribe if they want.","title":"GDPR"},{"location":"gdpr/#gdpr","text":"As of the 25 of May 2018, every European project has to be GDPR compliant GDPR law . Below we explain how PYBOSSA meets the requested requirements to be GDPR compliant.","title":"GDPR"},{"location":"gdpr/#anonymous-contributor-ips","text":"PYBOSSA has two types of users: Authenticated, and Anonymous For Anonymous Users, PYBOSSA has used always their IP address to identify them, however as they don\u2019t have an account, we can\u00b4t know who is the user behind that IP. In order to improve this security, PYBOSSA (v2.9.5) encodes the IP address using the technique Cryptography-based Prefix-preserving Anonymization to ensure that all IPs are anonymous. Therefore when downloading results or a project task run, you won\u00b4t get the real user IP as all of them have been made anonymous. We use the following Python module to perform this task.","title":"Anonymous contributor IPs"},{"location":"gdpr/#forget-me-or-delete-your-account","text":"PYBOSSA now allows any user (without a project) to delete his/her own account. This action cannot be undone. When users deletes their account, PYBOSSA will: Anonymize their task runs. The user_id will be removed, and for each task run PYBOSSA will generates a fake IP address, so that it is not possible to know what users have sent to the server. If the server is using Mailchimp integration, PYBOSSA will delete the user from the Mailchimp list sholuld the user subscribed to it. Delete all personal data from the server (DB). Email to the user and the server administrator so that the user knows everything has been deleted. !!! note: If the server is using DISQUS SSO, PYBOSSA will note in the removal confirmation email that - as of the 10 th of May 2018, DISQUS does not provide an API method to delete the user account. Therefore, PYBOSSA will inform the user that he/she will have to delete their DISQUS account.","title":"Forget me (or delete your account)"},{"location":"gdpr/#export-your-own-data","text":"From your personal PYBOSSA account you will be able to export the following data in list of zip files: All your personal data All your projects created by you All your contributions (task runs) PYBOSSA will create a ZIP file and send an email with links to your email. Those links will only be valid for 3 days - default configuration, after that they will be removed. These ZIP files have your data in JSON format, so you can view it with any text editor - standard format.","title":"Export your own data"},{"location":"gdpr/#see-all-my-data","text":"You can get all your data first, so you can see it with any text editor in any platform.","title":"See all my data"},{"location":"gdpr/#restrict-processing","text":"If you don\u2019t want to delete your account, but you want to restrict processing you can do that from your user\u2019s profile page. Just go to your settings, hit the update link and there check the restrict processing checkbox. This will ensure that no one access your data, not even the admins. By checking that box, you will be completely removed from the user API (only you can access your account under your ID), your User is not going to be part of the api USER filtering, you are not included in any leaderboard (including top 5 users for projects, and active users in the last 24 hours).","title":"Restrict processing"},{"location":"gdpr/#migrating-from-a-pybossa-server-version-v295","text":"If your server is running a version smaller than v2.9.5 you will need to upgrade the server to the latest version in order to be GDPR compliant. You then have to anonymize your stored IPs. PYBOSSA provides a script for doing this task: python cli.py anonymize_ips If you have custom leaderboards, then, you will have to drop those materialized views by hand. Why? Because we\u2019re adding a new column to them. If you only use the default leaderboard, everything should work as expected. To delete your materialized views for your leaderboards, just run this command within the DB: drop materialized view users_rank_ { your_name } ; Replace the {} text with your names, and you will be fine. This will not delete any data, as the materialized views will be recreated by the jobs in the next tick. If you need them recreated now, just open a terminal and run the following command: from run import create_app from pybossa.leadeboard.jobs import leaderboard app = create_app ( False ) with app . app_context (): leaderboard ( info = 'your_name' ) leaderboard ( info = 'your_second' ) ... leaderboard ( info = 'your_n' ) That will recreate the views for you, and you will be ready to use them. Note We strongly recommend you to do a backup before running the upgrade and the migration of the DB. Lastly you will have to unsubscribe all your users from project updates. PYBOSSA has a DB migration for achiving it. Just run the following command: alembic upgrade head This will ensure that all your users are unsubscribed, and they can now subscribe if they want.","title":"Migrating from a PYBOSSA server version &lt; v2.9.5"},{"location":"3dmodelling/intro/","text":"","title":"Intro"},{"location":"analysis/intro/","text":"","title":"Intro"},{"location":"api/announcement/","text":"Announcements \u00b6 Endpoint: /announcements/ Allowed methods : GET GET Shows you PYBOSSA wide announcements announcements : Announcements template : the rendered Announcements tamplate (currently empty) Example output { \"announcements\" : [ { \"body\" : \"test123\" , \"created\" : \"2017-05-31T15:23:44.858735\" , \"id\" : 5 , \"media_url\" : null , \"published\" : true , \"title\" : \"title123\" , \"updated\" : \"2017-05-31T15:23:44.858735\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-05-31T15:23:28.477516\" , \"id\" : 4 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-05-31T15:23:28.477516\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-06-01T23:42:45.042010\" , \"id\" : 7 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-06-01T23:42:45.042010\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-06-01T23:45:11.612801\" , \"id\" : 8 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-06-01T23:45:11.612801\" , \"user_id\" : 4953 } ], \"csrf\" : \"1504710446.52##6a7fakjsdhsdflkj\" , \"template\" : \"admin/announcement.html\" , \"title\" : \"Manage global Announcements\" } Admin announcement \u00b6 Endpoint: /admin/announcement GET Shows you PYBOSSA wide announcements announcements : Announcements csrf : csrf token template : the rendered Announcements tamplate (currently empty) title : title of rendered endpoint Example output { \"announcements\" : [ { \"body\" : \"test123\" , \"created\" : \"2017-05-31T15:23:44.858735\" , \"id\" : 5 , \"media_url\" : null , \"published\" : true , \"title\" : \"title123\" , \"updated\" : \"2017-05-31T15:23:44.858735\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-05-31T15:23:28.477516\" , \"id\" : 4 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-05-31T15:23:28.477516\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-06-01T23:42:45.042010\" , \"id\" : 7 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-06-01T23:42:45.042010\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-06-01T23:45:11.612801\" , \"id\" : 8 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-06-01T23:45:11.612801\" , \"user_id\" : 4953 } ], \"csrf\" : \"1504710446.52##6a7fakjsdhsdflkj\" , \"template\" : \"admin/announcement.html\" , \"title\" : \"Manage global Announcements\" } Admin announcement new \u00b6 Endpoint: /admin/announcement/new Allowed methods : GET/POST GET Creates a new PYBOSSA wide announcement form : form input template : the rendered Announcements tamplate (currently empty) title : title of rendered endpoint Example output { \"form\" : { \"body\" : null , \"csrf\" : \"1496394903.81##bb5fb0c527955073ec9ad694ed9097e7c868272a\" , \"errors\" : {}, \"media_url\" : null , \"published\" : true , \"title\" : null }, \"template\" : \"admin/new_announcement.html\" , \"title\" : \"Write a new post\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. On success you will get a 200 http code and following output: Example output { \"flash\" : \"<i class=\\\"icon-ok\\\"></i> Annnouncement created!\" , \"next\" : \"/admin/announcement\" , \"status\" : \"success\" } Admin announcement update \u00b6 Endpoint: /admin/announcement/<id>/update Allowed methods : GET/POST GET Updates a PYBOSSA announcement form : form input template : the rendered Announcements tamplate (currently empty) title : title of rendered endpoint Example output { \"form\" : { \"body\" : \"test6\" , \"csrf\" : \"1496328993.27##aa51e026938129afdfb0e6a5eab8c6b9427f81f6\" , \"errors\" : {}, \"id\" : 4 , \"media_url\" : null , \"published\" : true , \"title\" : \"test6\" }, \"template\" : \"admin/new_announcement.html\" , \"title\" : \"Edit a post\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. On success you will get a 200 http code and following output: Example output { \"flash\" : \"<i class=\\\"icon-ok\\\"></i> Announcement updated!\" , \"next\" : \"/admin/announcement\" , \"status\" : \"success\" } Admin announcement delete \u00b6 Endpoint: /admin/announcement/<id>/delete Allowed methods : POST Deletes a PYBOSSA announcement POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. You can get the token from /admin/announcement On success you will get a 200 http code and following output: Example output { \"flash\" : \"<i class=\\\"icon-ok\\\"></i> Announcement deleted!\" , \"next\" : \"/admin/announcement\" , \"status\" : \"success\" }","title":"Methods"},{"location":"api/announcement/#announcements","text":"Endpoint: /announcements/ Allowed methods : GET GET Shows you PYBOSSA wide announcements announcements : Announcements template : the rendered Announcements tamplate (currently empty) Example output { \"announcements\" : [ { \"body\" : \"test123\" , \"created\" : \"2017-05-31T15:23:44.858735\" , \"id\" : 5 , \"media_url\" : null , \"published\" : true , \"title\" : \"title123\" , \"updated\" : \"2017-05-31T15:23:44.858735\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-05-31T15:23:28.477516\" , \"id\" : 4 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-05-31T15:23:28.477516\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-06-01T23:42:45.042010\" , \"id\" : 7 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-06-01T23:42:45.042010\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-06-01T23:45:11.612801\" , \"id\" : 8 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-06-01T23:45:11.612801\" , \"user_id\" : 4953 } ], \"csrf\" : \"1504710446.52##6a7fakjsdhsdflkj\" , \"template\" : \"admin/announcement.html\" , \"title\" : \"Manage global Announcements\" }","title":"Announcements"},{"location":"api/announcement/#admin-announcement","text":"Endpoint: /admin/announcement GET Shows you PYBOSSA wide announcements announcements : Announcements csrf : csrf token template : the rendered Announcements tamplate (currently empty) title : title of rendered endpoint Example output { \"announcements\" : [ { \"body\" : \"test123\" , \"created\" : \"2017-05-31T15:23:44.858735\" , \"id\" : 5 , \"media_url\" : null , \"published\" : true , \"title\" : \"title123\" , \"updated\" : \"2017-05-31T15:23:44.858735\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-05-31T15:23:28.477516\" , \"id\" : 4 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-05-31T15:23:28.477516\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-06-01T23:42:45.042010\" , \"id\" : 7 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-06-01T23:42:45.042010\" , \"user_id\" : 4953 }, { \"body\" : \"new body\" , \"created\" : \"2017-06-01T23:45:11.612801\" , \"id\" : 8 , \"media_url\" : null , \"published\" : true , \"title\" : \"blogpost title\" , \"updated\" : \"2017-06-01T23:45:11.612801\" , \"user_id\" : 4953 } ], \"csrf\" : \"1504710446.52##6a7fakjsdhsdflkj\" , \"template\" : \"admin/announcement.html\" , \"title\" : \"Manage global Announcements\" }","title":"Admin announcement"},{"location":"api/announcement/#admin-announcement-new","text":"Endpoint: /admin/announcement/new Allowed methods : GET/POST GET Creates a new PYBOSSA wide announcement form : form input template : the rendered Announcements tamplate (currently empty) title : title of rendered endpoint Example output { \"form\" : { \"body\" : null , \"csrf\" : \"1496394903.81##bb5fb0c527955073ec9ad694ed9097e7c868272a\" , \"errors\" : {}, \"media_url\" : null , \"published\" : true , \"title\" : null }, \"template\" : \"admin/new_announcement.html\" , \"title\" : \"Write a new post\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. On success you will get a 200 http code and following output: Example output { \"flash\" : \"<i class=\\\"icon-ok\\\"></i> Annnouncement created!\" , \"next\" : \"/admin/announcement\" , \"status\" : \"success\" }","title":"Admin announcement new"},{"location":"api/announcement/#admin-announcement-update","text":"Endpoint: /admin/announcement/<id>/update Allowed methods : GET/POST GET Updates a PYBOSSA announcement form : form input template : the rendered Announcements tamplate (currently empty) title : title of rendered endpoint Example output { \"form\" : { \"body\" : \"test6\" , \"csrf\" : \"1496328993.27##aa51e026938129afdfb0e6a5eab8c6b9427f81f6\" , \"errors\" : {}, \"id\" : 4 , \"media_url\" : null , \"published\" : true , \"title\" : \"test6\" }, \"template\" : \"admin/new_announcement.html\" , \"title\" : \"Edit a post\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. On success you will get a 200 http code and following output: Example output { \"flash\" : \"<i class=\\\"icon-ok\\\"></i> Announcement updated!\" , \"next\" : \"/admin/announcement\" , \"status\" : \"success\" }","title":"Admin announcement update"},{"location":"api/announcement/#admin-announcement-delete","text":"Endpoint: /admin/announcement/<id>/delete Allowed methods : POST Deletes a PYBOSSA announcement POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. You can get the token from /admin/announcement On success you will get a 200 http code and following output: Example output { \"flash\" : \"<i class=\\\"icon-ok\\\"></i> Announcement deleted!\" , \"next\" : \"/admin/announcement\" , \"status\" : \"success\" }","title":"Admin announcement delete"},{"location":"api/categories/","text":"Admin categories \u00b6 Endpoint: /admin/categories Allowed methods : GET/POST GET It lists all the available categories. It returns a JSON object with the following information: categories : A list of categories. form : A form with the CSRF key to add a new category. n_projects_per_category : A dictionary with the number of projects per category. Example output { \"categories\" : [ { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, ], \"form\" : { \"csrf\" : \"token\" , \"description\" : null , \"errors\" : {}, \"id\" : null , \"name\" : null }, \"n_projects_per_category\" : { \"art\" : 41 , \"social\" : 182 }, \"template\" : \"admin/categories.html\" , \"title\" : \"Categories\" } POST It returns the same output as before, but if the form is valid, it will return the new created Category. Use the CSRFToken for submitting the data. categories : A list of categories. form : A form with the CSRF key to add a new category. n_projects_per_category : A dictionary with the number of projects per category. Example output { \"categories\" : [ { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, { \"created\" : \"now\" , \"description\" : \"new\" , \"id\" : 4 , \"name\" : \"new\" , \"short_name\" : \"new\" }, ], \"form\" : { \"csrf\" : \"token\" , \"description\" : \"new\" , \"errors\" : {}, \"name\" : \"new\" }, \"n_projects_per_category\" : { \"art\" : 41 , \"social\" : 182 , \"new\" : 0 }, \"template\" : \"admin/categories.html\" , \"title\" : \"Categories\" } Admin categories delete \u00b6 Endpoint: /admin/categories/del/<int:id> Allowed methods : GET/POST GET It shows the category that will be deleted. It gives you the CSRF token to do a POST and delete it. category : The category to be deleted. form : A form with the CSRF key to add a new category. Example output { \"category\" : { \"created\" : \"2017-01-24T13:08:09.873071\" , \"description\" : \"new\" , \"id\" : 9 , \"name\" : \"new\" , \"short_name\" : \"new\" }, \"form\" : { \"csrf\" : \"token\" , }, \"template\" : \"admin/del_category.html\" , \"title\" : \"Delete Category\" } POST It shows the category that will be deleted. It gives you the CSRF token to do a POST and delete it. flash : A human readable message about the action. next : The next URL status : The status of the POST. Example output { \"flash\" : \"Category deleted\" , \"next\" : \"/admin/categories\" , \"status\" : \"success\" } Admin categories update \u00b6 Endpoint: /admin/categories/update/<int:id> Allowed methods : GET/POST GET It shows the category that will be updated. It gives you the CSRF token to do a POST and update it. category : The category to be deleted. form : A form with the CSRF key to add a new category. Example output { \"category\" : { \"created\" : \"2017-01-24T13:08:09.873071\" , \"description\" : \"new\" , \"id\" : 9 , \"name\" : \"new\" , \"short_name\" : \"new\" }, \"form\" : { \"csrf\" : \"token\" , 'descrip t io n ' : ' ne w' , 'errors' : {}, 'id' : 9 , ' na me' : ' ne w' }, \"template\" : \"admin/update_category.html\" , \"title\" : \"Update Category\" } POST It updates the category. Use the CSRF token and form fields from the previous action to update it. flash : A human readable message about the action. next : The next URL status : The status of the POST. Example output { \"flash\" : \"Category updated\" , \"next\" : \"/admin/categories\" , \"status\" : \"success\" }","title":"Methods"},{"location":"api/categories/#admin-categories","text":"Endpoint: /admin/categories Allowed methods : GET/POST GET It lists all the available categories. It returns a JSON object with the following information: categories : A list of categories. form : A form with the CSRF key to add a new category. n_projects_per_category : A dictionary with the number of projects per category. Example output { \"categories\" : [ { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, ], \"form\" : { \"csrf\" : \"token\" , \"description\" : null , \"errors\" : {}, \"id\" : null , \"name\" : null }, \"n_projects_per_category\" : { \"art\" : 41 , \"social\" : 182 }, \"template\" : \"admin/categories.html\" , \"title\" : \"Categories\" } POST It returns the same output as before, but if the form is valid, it will return the new created Category. Use the CSRFToken for submitting the data. categories : A list of categories. form : A form with the CSRF key to add a new category. n_projects_per_category : A dictionary with the number of projects per category. Example output { \"categories\" : [ { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, { \"created\" : \"now\" , \"description\" : \"new\" , \"id\" : 4 , \"name\" : \"new\" , \"short_name\" : \"new\" }, ], \"form\" : { \"csrf\" : \"token\" , \"description\" : \"new\" , \"errors\" : {}, \"name\" : \"new\" }, \"n_projects_per_category\" : { \"art\" : 41 , \"social\" : 182 , \"new\" : 0 }, \"template\" : \"admin/categories.html\" , \"title\" : \"Categories\" }","title":"Admin categories"},{"location":"api/categories/#admin-categories-delete","text":"Endpoint: /admin/categories/del/<int:id> Allowed methods : GET/POST GET It shows the category that will be deleted. It gives you the CSRF token to do a POST and delete it. category : The category to be deleted. form : A form with the CSRF key to add a new category. Example output { \"category\" : { \"created\" : \"2017-01-24T13:08:09.873071\" , \"description\" : \"new\" , \"id\" : 9 , \"name\" : \"new\" , \"short_name\" : \"new\" }, \"form\" : { \"csrf\" : \"token\" , }, \"template\" : \"admin/del_category.html\" , \"title\" : \"Delete Category\" } POST It shows the category that will be deleted. It gives you the CSRF token to do a POST and delete it. flash : A human readable message about the action. next : The next URL status : The status of the POST. Example output { \"flash\" : \"Category deleted\" , \"next\" : \"/admin/categories\" , \"status\" : \"success\" }","title":"Admin categories delete"},{"location":"api/categories/#admin-categories-update","text":"Endpoint: /admin/categories/update/<int:id> Allowed methods : GET/POST GET It shows the category that will be updated. It gives you the CSRF token to do a POST and update it. category : The category to be deleted. form : A form with the CSRF key to add a new category. Example output { \"category\" : { \"created\" : \"2017-01-24T13:08:09.873071\" , \"description\" : \"new\" , \"id\" : 9 , \"name\" : \"new\" , \"short_name\" : \"new\" }, \"form\" : { \"csrf\" : \"token\" , 'descrip t io n ' : ' ne w' , 'errors' : {}, 'id' : 9 , ' na me' : ' ne w' }, \"template\" : \"admin/update_category.html\" , \"title\" : \"Update Category\" } POST It updates the category. Use the CSRF token and form fields from the previous action to update it. flash : A human readable message about the action. next : The next URL status : The status of the POST. Example output { \"flash\" : \"Category updated\" , \"next\" : \"/admin/categories\" , \"status\" : \"success\" }","title":"Admin categories update"},{"location":"api/crud/","text":"Introduction \u00b6 This section shows the CRUD methods (Create, Read, Update and Delete) that you can use using the RESTful API. These methods will not work with the rest of the PYBOSSA endpoints, as that only support GET and POST actions. Getting data \u00b6 You can get a specific domain object by its id (by default any GET action will return only 20 objects, you can get more or fewer objects using the limit option): 1 GET https://crowdsourced.micropasts.org/api/{domain-object}/{id}[?api_key=API-KEY] Note Some GET actions may require to authenticate & authorize the request. Use the \u201c?api_key\u201d argument to pass the API-KEY . If the object is not found you will get a JSON object like this: { \"status\" : \"failed\" , \"action\" : \"GET\" , \"target\" : \"project\" , \"exception_msg\" : \"404 Not Found\" , \"status_code\" : 404 , \"exception_cls\" : \"NotFound\" } Any other error will return the same object but with the proper status code and error message. Filtering the data \u00b6 You can get a list of domain objects by its fields. You will use the objects attributes to filter the query, as it will return only objects matching it: 1 GET http://pybossa-site-url/api/{domain-object}[?domain-object-field=value] Multiple fields can be used separated by the & symbol: 1 GET http://pybossa-site-url/api/{domain-object}[?field1=value&field2=value2] It is possible to limit the number of returned objects: 1 GET https://crowdsourced.micropasts.org/api/{domain-object}[?field1=value&limit=20] Filtering info keys for PYBOSSA versions up to v2.8.X \u00b6 It is possible to access first level JSON keys within the info field of Categories, Projects, Tasks, Task Runs and Results: 1 GET https://crowdsourced.micropasts.org/api/{domain-object}[?field1=value&info=foo::bar&limit=20] To search within the first level (nested keys are not supported), you have to use the following format: 1 info=key::value For adding more keys: 1 info=key1::value1|key2::value2|keyN::valueN These parameters will be ANDs, so, it will return objects that have those keys with and and operator. Filtering info keys for PYBOSSA >= 2.9.1 (or master branch) \u00b6 Since version v2.9.0, PYBOSSA stores JSON data as JSONB within the database. This feature allows us to use new queries, like path searching via the API. You can now search like this: 1 2 info={\"key1\": value} info={\"key1\": [{\"key2\": value}]} You specify the JSON path and the values, and the system will return those that meet that criteria. This new feature allows you to filter nested data without any problems. If you are not storing a dictionary, {}, in the info field, you will need to quote your string, so the sytem can handle it properly. If you are storing a number, instead of a string, then you should use \u2018\u201c9\u201d\u2019 double quotes. This applies to integers and floats. Your data first \u00b6 The API understands who is requesting the data. When you are using your API key to authenticate your calls, the system will return only your data. For instance, if you request all the projects, you will only get your projects and the rest (owned by other users will be hidden). You can get access to all the projects, tasks, and task runs (the whole database) using the parameter: all=1 . For example, if an anonymous user accesses the generic API endpoints like: 1 GET https://crowdsourced.micropasts.org/api/project It will return all the projects from the DB, ordering them by ID. If you access it like authenticating yourself: 1 GET https://crowdsourced.micropasts.org/api/project?api_key=YOURKEY Then, you will get your projects. In other words, the projects that you own. If you don\u2019t have a project, but you want to explore the API then you can use the all=1 argument: 1 GET https://crowdsourced.micropasts.org/api/project?api_key=YOURKEY&all=1 This call will return all the projects from the DB ordering by ID. For example, you can get a list of your Projects like this: 1 2 3 GET https://crowdsourced.micropasts.org/api/project GET https://crowdsourced.micropasts.org/api/project?api_key=YOURKEY GET https://crowdsourced.micropasts.org/api/project?api_key=YOURKEY&all=1 Or a list of available Categories: 1 GET https://crowdsourced.micropasts.org/api/category Or a list of Tasks: 1 2 3 GET https://crowdsourced.micropasts.org/api/task GET https://crowdsourced.micropasts.org/api/task?api_key=YOURKEY GET https://crowdsourced.micropasts.org/api/task?api_key=YOURKEY&all=1 For a list of TaskRuns use: 1 2 3 GET https://crowdsourced.micropasts.org/api/taskrun GET https://crowdsourced.micropasts.org/api/taskrun?api_key=YOURKEY GET https://crowdsourced.micropasts.org/api/taskrun?api_key=YOURKEY&all=1 Using date ranges \u00b6 If you want, you can use the domain attribute created to get items from the DB. You can specify a year, year-month, year-month-day to get all the values for those ranges. For example, if you want all the tasks that have been created in 2015, just use: 1 GET https://crowdsourced.micropasts.org/api/task?created=2015&all=1 If you want all the task runs from 2015-05: 1 GET https://crowdsourced.micropasts.org/api/taskrun?created=2015-05&all=1 You can, for example, get all the task runs that a user has submitted on a given day like this: 1 GET https://crowdsourced.micropasts.org/api/taskrun?created=2015-05-03&user_id=3 This filter works for any object that has the created attribute. Order by \u00b6 Any query can be ordered by an attribute of the domain object that you are querying. For example, you can get a list of tasks ordered by ID: 1 GET https://crowdsourced.micropasts.org/api/task?orderby=id If you want, you can order them in descending order: 1 GET https://crowdsourced.micropasts.org/api/task?orderby=id&desc=true Check all the attributes that you can use to order by in the Domain Object section . Note Please, notice that to keep users privacy, only their locale and nickname will be shared by default. Optionally, users can disable privacy mode in their settings. By doing so, also their full name and account creation date will be visible for everyone through the API. Limit \u00b6 By default, PYBOSSA limits the list of items to 20. If you want to get more items, use the keyword limit=N with N being a number to get that amount. There is a maximum of 100 to the limit keyword, so if you try to get more items at once, it won\u2019t work. Pagination \u00b6 You can paginate the results of any GET query using the last ID of the domain object that you have received and the parameter: last_id . For example, to get the next 20 items after the last project ID that you\u2019ve received, you will write the query like this: 1 `GET /api/project?last_id=N. Pagination with offset and limit DEPRECATED (see next Note for a better and faster solution) You can use the keyword offset=N in any GET query to skip that many rows before beginning to get rows. If both offset and limit appear, then offset rows are skipped before starting to count the limit rows that are returned. Related data \u00b6 For Tasks, TaskRuns, and Results you can get the associated data using the argument: related=True . This flag will allow you to get in one call all the TaskRuns and Result for a given task. You can do the same for a TaskRun getting the Task and associated Result, and for a Result getting all the TaskRuns and associated Task. Projects do not have this feature, as it will be too expensive for the API. Project stats \u00b6 For Projects, you can get the associated statistics using the argument: stats=True . This will add the statistics, such as overall progress, number of tasks etc., against the stats key for each project. Create \u00b6 Create a domain object. Returns created domain object.: 1 POST https://crowdsourced.micropasts.org/api/{domain-object}[?api_key=API-KEY] Note Some POST actions may require to authenticate & authorize the request. Use the ?api_key argument to pass the API-KEY . If an error occurs, the action will return a JSON object like this: { \"status\" : \"failed\" , \"action\" : \"POST\" , \"target\" : \"project\" , \"exception_msg\" : \"type object 'Project' has no attribute 'short_ame'\" , \"status_code\" : 415 , \"exception_cls\" : \"AttributeError\" } Where target will refer to a Project, Task or TaskRun object. Update \u00b6 Update a domain object: 1 PUT https://crowdsourced.micropasts.org/api/{domain-object}/{id}[?api_key=API-KEY] Note Some PUT actions may require to authenticate & authorize the request. Use the ?api_key argument to pass the API-KEY . If an error occurs, the action will return a JSON object like this: { \"status\" : \"failed\" , \"action\" : \"PUT\" , \"target\" : \"project\" , \"exception_msg\" : \"type object 'Project' has no attribute 'short_ame'\" , \"status_code\" : 415 , \"exception_cls\" : \"AttributeError\" } Where target will refer to a project, Task or TaskRun object. Delete \u00b6 Delete a domain object: 1 DELETE https://crowdsourced.micropasts.org/api/{domain-object}/{id}[?api_key=API-KEY] Note Some DELETE actions may require to authenticate & authorize the request. Use the ?api_key argument to pass the API-KEY . If an error occurs, the action will return a JSON object like this: { \"status\" : \"failed\" , \"action\" : \"DELETE\" , \"target\" : \"project\" , \"exception_msg\" : \"type object 'Project' has no attribute 'short_ame'\" , \"status_code\" : 415 , \"exception_cls\" : \"AttributeError\" } Where target will refer to a Project, Task or TaskRun object.","title":"CRUD"},{"location":"api/crud/#introduction","text":"This section shows the CRUD methods (Create, Read, Update and Delete) that you can use using the RESTful API. These methods will not work with the rest of the PYBOSSA endpoints, as that only support GET and POST actions.","title":"Introduction"},{"location":"api/crud/#getting-data","text":"You can get a specific domain object by its id (by default any GET action will return only 20 objects, you can get more or fewer objects using the limit option): 1 GET https://crowdsourced.micropasts.org/api/{domain-object}/{id}[?api_key=API-KEY] Note Some GET actions may require to authenticate & authorize the request. Use the \u201c?api_key\u201d argument to pass the API-KEY . If the object is not found you will get a JSON object like this: { \"status\" : \"failed\" , \"action\" : \"GET\" , \"target\" : \"project\" , \"exception_msg\" : \"404 Not Found\" , \"status_code\" : 404 , \"exception_cls\" : \"NotFound\" } Any other error will return the same object but with the proper status code and error message.","title":"Getting data"},{"location":"api/crud/#filtering-the-data","text":"You can get a list of domain objects by its fields. You will use the objects attributes to filter the query, as it will return only objects matching it: 1 GET http://pybossa-site-url/api/{domain-object}[?domain-object-field=value] Multiple fields can be used separated by the & symbol: 1 GET http://pybossa-site-url/api/{domain-object}[?field1=value&field2=value2] It is possible to limit the number of returned objects: 1 GET https://crowdsourced.micropasts.org/api/{domain-object}[?field1=value&limit=20]","title":"Filtering the data"},{"location":"api/crud/#filtering-info-keys-for-pybossa-versions-up-to-v28x","text":"It is possible to access first level JSON keys within the info field of Categories, Projects, Tasks, Task Runs and Results: 1 GET https://crowdsourced.micropasts.org/api/{domain-object}[?field1=value&info=foo::bar&limit=20] To search within the first level (nested keys are not supported), you have to use the following format: 1 info=key::value For adding more keys: 1 info=key1::value1|key2::value2|keyN::valueN These parameters will be ANDs, so, it will return objects that have those keys with and and operator.","title":"Filtering info keys for PYBOSSA versions up to v2.8.X"},{"location":"api/crud/#filtering-info-keys-for-pybossa-291-or-master-branch","text":"Since version v2.9.0, PYBOSSA stores JSON data as JSONB within the database. This feature allows us to use new queries, like path searching via the API. You can now search like this: 1 2 info={\"key1\": value} info={\"key1\": [{\"key2\": value}]} You specify the JSON path and the values, and the system will return those that meet that criteria. This new feature allows you to filter nested data without any problems. If you are not storing a dictionary, {}, in the info field, you will need to quote your string, so the sytem can handle it properly. If you are storing a number, instead of a string, then you should use \u2018\u201c9\u201d\u2019 double quotes. This applies to integers and floats.","title":"Filtering info keys for PYBOSSA &gt;= 2.9.1 (or master branch)"},{"location":"api/crud/#your-data-first","text":"The API understands who is requesting the data. When you are using your API key to authenticate your calls, the system will return only your data. For instance, if you request all the projects, you will only get your projects and the rest (owned by other users will be hidden). You can get access to all the projects, tasks, and task runs (the whole database) using the parameter: all=1 . For example, if an anonymous user accesses the generic API endpoints like: 1 GET https://crowdsourced.micropasts.org/api/project It will return all the projects from the DB, ordering them by ID. If you access it like authenticating yourself: 1 GET https://crowdsourced.micropasts.org/api/project?api_key=YOURKEY Then, you will get your projects. In other words, the projects that you own. If you don\u2019t have a project, but you want to explore the API then you can use the all=1 argument: 1 GET https://crowdsourced.micropasts.org/api/project?api_key=YOURKEY&all=1 This call will return all the projects from the DB ordering by ID. For example, you can get a list of your Projects like this: 1 2 3 GET https://crowdsourced.micropasts.org/api/project GET https://crowdsourced.micropasts.org/api/project?api_key=YOURKEY GET https://crowdsourced.micropasts.org/api/project?api_key=YOURKEY&all=1 Or a list of available Categories: 1 GET https://crowdsourced.micropasts.org/api/category Or a list of Tasks: 1 2 3 GET https://crowdsourced.micropasts.org/api/task GET https://crowdsourced.micropasts.org/api/task?api_key=YOURKEY GET https://crowdsourced.micropasts.org/api/task?api_key=YOURKEY&all=1 For a list of TaskRuns use: 1 2 3 GET https://crowdsourced.micropasts.org/api/taskrun GET https://crowdsourced.micropasts.org/api/taskrun?api_key=YOURKEY GET https://crowdsourced.micropasts.org/api/taskrun?api_key=YOURKEY&all=1","title":"Your data first"},{"location":"api/crud/#using-date-ranges","text":"If you want, you can use the domain attribute created to get items from the DB. You can specify a year, year-month, year-month-day to get all the values for those ranges. For example, if you want all the tasks that have been created in 2015, just use: 1 GET https://crowdsourced.micropasts.org/api/task?created=2015&all=1 If you want all the task runs from 2015-05: 1 GET https://crowdsourced.micropasts.org/api/taskrun?created=2015-05&all=1 You can, for example, get all the task runs that a user has submitted on a given day like this: 1 GET https://crowdsourced.micropasts.org/api/taskrun?created=2015-05-03&user_id=3 This filter works for any object that has the created attribute.","title":"Using date ranges"},{"location":"api/crud/#order-by","text":"Any query can be ordered by an attribute of the domain object that you are querying. For example, you can get a list of tasks ordered by ID: 1 GET https://crowdsourced.micropasts.org/api/task?orderby=id If you want, you can order them in descending order: 1 GET https://crowdsourced.micropasts.org/api/task?orderby=id&desc=true Check all the attributes that you can use to order by in the Domain Object section . Note Please, notice that to keep users privacy, only their locale and nickname will be shared by default. Optionally, users can disable privacy mode in their settings. By doing so, also their full name and account creation date will be visible for everyone through the API.","title":"Order by"},{"location":"api/crud/#limit","text":"By default, PYBOSSA limits the list of items to 20. If you want to get more items, use the keyword limit=N with N being a number to get that amount. There is a maximum of 100 to the limit keyword, so if you try to get more items at once, it won\u2019t work.","title":"Limit"},{"location":"api/crud/#pagination","text":"You can paginate the results of any GET query using the last ID of the domain object that you have received and the parameter: last_id . For example, to get the next 20 items after the last project ID that you\u2019ve received, you will write the query like this: 1 `GET /api/project?last_id=N. Pagination with offset and limit DEPRECATED (see next Note for a better and faster solution) You can use the keyword offset=N in any GET query to skip that many rows before beginning to get rows. If both offset and limit appear, then offset rows are skipped before starting to count the limit rows that are returned.","title":"Pagination"},{"location":"api/crud/#related-data","text":"For Tasks, TaskRuns, and Results you can get the associated data using the argument: related=True . This flag will allow you to get in one call all the TaskRuns and Result for a given task. You can do the same for a TaskRun getting the Task and associated Result, and for a Result getting all the TaskRuns and associated Task. Projects do not have this feature, as it will be too expensive for the API.","title":"Related data"},{"location":"api/crud/#project-stats","text":"For Projects, you can get the associated statistics using the argument: stats=True . This will add the statistics, such as overall progress, number of tasks etc., against the stats key for each project.","title":"Project stats"},{"location":"api/crud/#create","text":"Create a domain object. Returns created domain object.: 1 POST https://crowdsourced.micropasts.org/api/{domain-object}[?api_key=API-KEY] Note Some POST actions may require to authenticate & authorize the request. Use the ?api_key argument to pass the API-KEY . If an error occurs, the action will return a JSON object like this: { \"status\" : \"failed\" , \"action\" : \"POST\" , \"target\" : \"project\" , \"exception_msg\" : \"type object 'Project' has no attribute 'short_ame'\" , \"status_code\" : 415 , \"exception_cls\" : \"AttributeError\" } Where target will refer to a Project, Task or TaskRun object.","title":"Create"},{"location":"api/crud/#update","text":"Update a domain object: 1 PUT https://crowdsourced.micropasts.org/api/{domain-object}/{id}[?api_key=API-KEY] Note Some PUT actions may require to authenticate & authorize the request. Use the ?api_key argument to pass the API-KEY . If an error occurs, the action will return a JSON object like this: { \"status\" : \"failed\" , \"action\" : \"PUT\" , \"target\" : \"project\" , \"exception_msg\" : \"type object 'Project' has no attribute 'short_ame'\" , \"status_code\" : 415 , \"exception_cls\" : \"AttributeError\" } Where target will refer to a project, Task or TaskRun object.","title":"Update"},{"location":"api/crud/#delete","text":"Delete a domain object: 1 DELETE https://crowdsourced.micropasts.org/api/{domain-object}/{id}[?api_key=API-KEY] Note Some DELETE actions may require to authenticate & authorize the request. Use the ?api_key argument to pass the API-KEY . If an error occurs, the action will return a JSON object like this: { \"status\" : \"failed\" , \"action\" : \"DELETE\" , \"target\" : \"project\" , \"exception_msg\" : \"type object 'Project' has no attribute 'short_ame'\" , \"status_code\" : 415 , \"exception_cls\" : \"AttributeError\" } Where target will refer to a Project, Task or TaskRun object.","title":"Delete"},{"location":"api/fulltextsearch/","text":"You can use the full-text search engine of PYBOSSA using the RESTful API. This feature is available for the info fields of the domain objects, as that\u2019s where you will be storing the information. PYBOSSA only searches within the first level keys (as seen before) of the JSON data stored in the info field. Full-text search is amazing because it means that the server will understand verbs, plurals, singulars, etc. By default, PYBOSSA uses English for the searches. You can customize this behavior using any of the supported languages by PostgreSQL changing the settings_local.py config variable: FULLTEXTSEARCH_LANGUAGE = 'spanish' . If you want to search using this method, just add the following argument: 1 info=key1::value1&fulltextsearch=1 That will return every object in the DB that has a key equal to key1 and contains he value the word value1. Another option could be the following: 1 info=key1::value1|key2:word1%26word2&fulltextsearch=1 This second query will return objects that have the words word1 and word2. It\u2019s important to escape the & operator with %26 to use the and operator. When you use the fulltextsearch argument, the API will return the objects enriched with the following two fields: headline : The matched words of the key1::value1 found, with <b></b> items to highlight them. rank : The ranking returned by the database. Ranking attempts to measure how relevant documents are to a particular query, so that when there are many matches the most relevant ones can be shown first. Here you have an example of the expected output for an api call like this: 1 /api/task?project_id=1&info=name::ipsum%26bravo&fulltextsearch=1 [ { \"info\" : { \"url\" : \"https://domain.com/img.png\" , \"name\" : \"Lore ipsum delta bravo\" , }, \"n_answers\" : 1 , \"quorum\" : 0 , \"links\" : [ \"<link rel='parent' title='project' href='http://localhost:5000/api/project/1'/>\" ], \"calibration\" : 0 , \"headline\" : \"Lore <b>ipsum</b> delta <b>bravo</b>\" , \"created\" : \"2016-05-10T11:20:45.005725\" , \"rank\" : 0.05 , \"state\" : \"completed\" , \"link\" : \"<link rel='self' title='task' href='http://localhost:5001/api/task/1'/>\" , \"project_id\" : 1 , \"id\" : 1 , \"priority_0\" : 0 }, ] Note When you use the fulltextsearch API, the results are always sorted by rank, showing first the most relevant ones to your query. Note We use PostgreSQL ts_rank_cd with the following configuration: ts_rank_cd(textsearch, query, 4). For more details check the official documentation of PostgreSQL. If the search does not find anything, the server will return an empty JSON list []","title":"Full text search"},{"location":"api/help/","text":"Help API \u00b6 Endpoint: /help/api Allowed methods : GET GET Gives you the API help for your PYBOSSA project_id : a project id for the help example text. If no project exists it is null. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"project_id\" : 1104 , \"template\" : \"help/privacy.html\" , \"title\" : \"API Help\" } Help privacy \u00b6 Endpoint: /help/privacy Allowed methods : GET GET Gives you the privacy policy for your PYBOSSA content : Simplified HTML of rendered privacy policy. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"content\" : \"<html><body><p>privacy policy here</p></body></html>\" \"template\" : \"help/privacy.html\" , \"title\" : \"Privacy Policy\" } Help cookie policy \u00b6 Endpoint: /help/cookies-policy Allowed methods : GET GET Gives you the cookie policy for your PYBOSSA content : Simplified HTML of rendered cookie policy. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"content\" : \"<html><body><p>cookie policy here</p></body></html>\" \"template\" : \"help/cookies_policy.html\" , \"title\" : \"Help: Cookies Policy\" } Help terms of use \u00b6 Endpoint: /help/terms-of-use Allowed methods : GET GET Gives you the terms of use for your PYBOSSA content : Simplified HTML of rendered terms of use. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"content\" : \"<html><body><p>Terms of use text</p></body></html>\" \"template\" : \"help/tos.html\" , \"title\" : \"Help: Terms of Use\" }","title":"Methods"},{"location":"api/help/#help-api","text":"Endpoint: /help/api Allowed methods : GET GET Gives you the API help for your PYBOSSA project_id : a project id for the help example text. If no project exists it is null. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"project_id\" : 1104 , \"template\" : \"help/privacy.html\" , \"title\" : \"API Help\" }","title":"Help API"},{"location":"api/help/#help-privacy","text":"Endpoint: /help/privacy Allowed methods : GET GET Gives you the privacy policy for your PYBOSSA content : Simplified HTML of rendered privacy policy. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"content\" : \"<html><body><p>privacy policy here</p></body></html>\" \"template\" : \"help/privacy.html\" , \"title\" : \"Privacy Policy\" }","title":"Help privacy"},{"location":"api/help/#help-cookie-policy","text":"Endpoint: /help/cookies-policy Allowed methods : GET GET Gives you the cookie policy for your PYBOSSA content : Simplified HTML of rendered cookie policy. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"content\" : \"<html><body><p>cookie policy here</p></body></html>\" \"template\" : \"help/cookies_policy.html\" , \"title\" : \"Help: Cookies Policy\" }","title":"Help cookie policy"},{"location":"api/help/#help-terms-of-use","text":"Endpoint: /help/terms-of-use Allowed methods : GET GET Gives you the terms of use for your PYBOSSA content : Simplified HTML of rendered terms of use. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"content\" : \"<html><body><p>Terms of use text</p></body></html>\" \"template\" : \"help/tos.html\" , \"title\" : \"Help: Terms of Use\" }","title":"Help terms of use"},{"location":"api/home/","text":"Home \u00b6 Endpoint: / Allowed methods : GET GET It returns a JSON object with the following information: top_projects : A list of the most active projects. categories_projects : A dictionary with all the published categories and its associated projects. categories : All the available categories. template : Jinja2 template. top_users : List of top contributors. Example output { \"categories\" : [ { \"created\" : null , \"description\" : null , \"id\" : null , \"name\" : \"Featured\" , \"short_name\" : \"featured\" }, { \"description\" : \"Economic projects\" , \"id\" : 6 , \"name\" : \"Economics\" , \"short_name\" : \"economics\" }, ], \"categories_projects\" : { \"economics\" : [ { \"description\" : \"Description\" , \"info\" : { \"container\" : \"user\" , \"thumbnail\" : \"415602833.png\" }, \"n_tasks\" : 18 , \"n_volunteers\" : 26 , \"name\" : \"Man made objects identity\" , \"overall_progress\" : 0 , \"short_name\" : \"manmadeobjectsidentity\" }, ], }, \"template\" : \"/home/index.html\" , \"top_projects\" : [ { \"description\" : \"Image pattern recognition\" , \"info\" : { \"container\" : \"user\" , \"thumbnail\" : \"772569.58.png\" }, \"n_tasks\" : null , \"n_volunteers\" : 17499 , \"name\" : \"Name\" , \"overall_progress\" : null , \"short_name\" : \"name\" }, ], \"top_users\" : [ { \"created\" : \"2014-08-17T18:28:56.738119\" , \"fullname\" : \"John Doe\" , \"info\" : { \"avatar\" : \"1410771tar.png\" , \"container\" : \"05\" }, \"n_answers\" : null , \"name\" : \"johndoe\" , \"rank\" : 1 , \"registered_ago\" : null , \"score\" : 54247 }, ] }","title":"Methods"},{"location":"api/home/#home","text":"Endpoint: / Allowed methods : GET GET It returns a JSON object with the following information: top_projects : A list of the most active projects. categories_projects : A dictionary with all the published categories and its associated projects. categories : All the available categories. template : Jinja2 template. top_users : List of top contributors. Example output { \"categories\" : [ { \"created\" : null , \"description\" : null , \"id\" : null , \"name\" : \"Featured\" , \"short_name\" : \"featured\" }, { \"description\" : \"Economic projects\" , \"id\" : 6 , \"name\" : \"Economics\" , \"short_name\" : \"economics\" }, ], \"categories_projects\" : { \"economics\" : [ { \"description\" : \"Description\" , \"info\" : { \"container\" : \"user\" , \"thumbnail\" : \"415602833.png\" }, \"n_tasks\" : 18 , \"n_volunteers\" : 26 , \"name\" : \"Man made objects identity\" , \"overall_progress\" : 0 , \"short_name\" : \"manmadeobjectsidentity\" }, ], }, \"template\" : \"/home/index.html\" , \"top_projects\" : [ { \"description\" : \"Image pattern recognition\" , \"info\" : { \"container\" : \"user\" , \"thumbnail\" : \"772569.58.png\" }, \"n_tasks\" : null , \"n_volunteers\" : 17499 , \"name\" : \"Name\" , \"overall_progress\" : null , \"short_name\" : \"name\" }, ], \"top_users\" : [ { \"created\" : \"2014-08-17T18:28:56.738119\" , \"fullname\" : \"John Doe\" , \"info\" : { \"avatar\" : \"1410771tar.png\" , \"container\" : \"05\" }, \"n_answers\" : null , \"name\" : \"johndoe\" , \"rank\" : 1 , \"registered_ago\" : null , \"score\" : 54247 }, ] }","title":"Home"},{"location":"api/intro/","text":"Our MicroPasts installation of Pybossa provides two API endpoints: the RESTful API located at https://crowdsourced.micropasts.org/api and, the rest of the endpoints of the server In this guide, we only cover the basics of what Pybossa can achieve and the calls that are likely to be needed for analysis work. For fuller documentation refer to the official documentation from Scifabric The RESTful API \u00b6 The JSON based RESTful API is located at: 1 https://crowdsourced.micropasts.org/api These endpoints use PYBOSSA domain objects. It has the following structure: 1 https://crowdsourced.micropasts.org/api/{domainobject}[?arg1=value1&arg2=value2...] A domain object will be one of the following: Project Task TaskRun Result Blog post Announcement Helpingmaterial User Category. You can then access any of those items via the API, using its name in the {domainobject} section and querying its attributes. Some requests will need a API-KEY to authenticate & authorize the operation. You can get your API-KEY in your profile account. The returned objects will have a links and link fields, not included in the model to support Hypermedia as the Engine of Application State (also known as HATEOAS), so you can understand which are the relations between objects. All objects will return a field link which will be the absolute URL for that specific object within the API. If the object has some parents, you will find the relations in the links list. For example, for a Task Run you will get something like this: { \"info\" : 65 , \"user_id\" : null , \"links\" : [ \"<link rel='parent' title='project' href='https://crowdsourced.micropasts.org/api/project/90'/>\" , \"<link rel='parent' title='task' href='https://crowdsourced.micropasts.org/api/task/5894'/>\" ], \"task_id\" : 5894 , \"created\" : \"2012-07-07T17:23:45.714184\" , \"finish_time\" : \"2012-07-07T17:23:45.714210\" , \"calibration\" : null , \"project_id\" : 90 , \"user_ip\" : \"X.X.X.X\" , \"link\" : \"<link rel='self' title='taskrun' href='https://crowdsourced.micropasts.org/api/taskrun/8969'/>\" , \"timeout\" : null , \"id\" : 8969 } The object link will have a tag rel equal to self , while the parent objects will be tagged with parent . The title field is used to specify the type of the object: task, task run or project. Projects will not have a links field because these objects do not have parents. Tasks will have only one parent: the associated project. Task Runs will have only two parents: the associated task and associated project. Results will have two parents: the associated project and task. Helping materials will have only one parent: the project. Blog posts will have only one parent: the project. Announcements will not have any parent. Rate Limit and the API \u00b6 Rate Limiting has been enabled for all the API endpoints (since PYBOSSA v2.0.1). Rate-limiting gives any user, using the IP, a window of 15 minutes to do at most 300 requests per endpoint . This feature adds to the request headers the following values: X-RateLimit-Limit : the rate limit ceiling for that given request X-RateLimit-Remaining : the number of requests left for the 15 minute window X-RateLimit-Reset : the remaining window before the rate limit resets in UTC epoch seconds We recommend using the Python package requests for interacting with PYBOSSA, as it is straightforward to check those values: import requests import time res = requests . get ( 'https://crowdsourced.micropasts.org/api/project' ) if int ( res . headers [ 'X-RateLimit-Remaining' ]) < 10 : time . sleep ( 300 ) # Sleep for 5 minutes else : pass # Do your stuff Command line Example Usage of the API \u00b6 Create a Project object: curl -X POST -H \"Content-Type:application/json\" -s -d '{\"name\":\"myproject\", \"info\":{\"xyz\":1}}' 'https://crowdsourced.micropasts.org/api/project?api_key=API-KEY' PYBOSSA endpoints \u00b6 These are the endpoints that you usually visit using the pybossa-default-theme or in other words, the routes that are defined in PYBOSSA for the user. For example, while you can get information about a project using the RESTful API: 1 https://crowdsourced.micropasts.org/api/project?short_name=foo You can also get information about the project using the following URL: 1 https://crowdsourced.micropasts.org/project/foo/ That URL by default it will return HTML, but you can ask the server to return it in JSON format. While the RESTful API only returns the objects as they are in the database, these other endpoints can return more data, like for example the list of projects a user has participated. Single Page Applications (SPA) If you want to build a SPA, when you create the routes, please, re-use the PYBOSSA ones as it will be easier for you to follow redirects. Also, this is important for other parts, like validation of emails, etc. Otherwise, you will have to handle those redirections in your web server.","title":"Introduction"},{"location":"api/intro/#the-restful-api","text":"The JSON based RESTful API is located at: 1 https://crowdsourced.micropasts.org/api These endpoints use PYBOSSA domain objects. It has the following structure: 1 https://crowdsourced.micropasts.org/api/{domainobject}[?arg1=value1&arg2=value2...] A domain object will be one of the following: Project Task TaskRun Result Blog post Announcement Helpingmaterial User Category. You can then access any of those items via the API, using its name in the {domainobject} section and querying its attributes. Some requests will need a API-KEY to authenticate & authorize the operation. You can get your API-KEY in your profile account. The returned objects will have a links and link fields, not included in the model to support Hypermedia as the Engine of Application State (also known as HATEOAS), so you can understand which are the relations between objects. All objects will return a field link which will be the absolute URL for that specific object within the API. If the object has some parents, you will find the relations in the links list. For example, for a Task Run you will get something like this: { \"info\" : 65 , \"user_id\" : null , \"links\" : [ \"<link rel='parent' title='project' href='https://crowdsourced.micropasts.org/api/project/90'/>\" , \"<link rel='parent' title='task' href='https://crowdsourced.micropasts.org/api/task/5894'/>\" ], \"task_id\" : 5894 , \"created\" : \"2012-07-07T17:23:45.714184\" , \"finish_time\" : \"2012-07-07T17:23:45.714210\" , \"calibration\" : null , \"project_id\" : 90 , \"user_ip\" : \"X.X.X.X\" , \"link\" : \"<link rel='self' title='taskrun' href='https://crowdsourced.micropasts.org/api/taskrun/8969'/>\" , \"timeout\" : null , \"id\" : 8969 } The object link will have a tag rel equal to self , while the parent objects will be tagged with parent . The title field is used to specify the type of the object: task, task run or project. Projects will not have a links field because these objects do not have parents. Tasks will have only one parent: the associated project. Task Runs will have only two parents: the associated task and associated project. Results will have two parents: the associated project and task. Helping materials will have only one parent: the project. Blog posts will have only one parent: the project. Announcements will not have any parent.","title":"The RESTful API"},{"location":"api/intro/#rate-limit-and-the-api","text":"Rate Limiting has been enabled for all the API endpoints (since PYBOSSA v2.0.1). Rate-limiting gives any user, using the IP, a window of 15 minutes to do at most 300 requests per endpoint . This feature adds to the request headers the following values: X-RateLimit-Limit : the rate limit ceiling for that given request X-RateLimit-Remaining : the number of requests left for the 15 minute window X-RateLimit-Reset : the remaining window before the rate limit resets in UTC epoch seconds We recommend using the Python package requests for interacting with PYBOSSA, as it is straightforward to check those values: import requests import time res = requests . get ( 'https://crowdsourced.micropasts.org/api/project' ) if int ( res . headers [ 'X-RateLimit-Remaining' ]) < 10 : time . sleep ( 300 ) # Sleep for 5 minutes else : pass # Do your stuff","title":"Rate Limit and the API"},{"location":"api/intro/#command-line-example-usage-of-the-api","text":"Create a Project object: curl -X POST -H \"Content-Type:application/json\" -s -d '{\"name\":\"myproject\", \"info\":{\"xyz\":1}}' 'https://crowdsourced.micropasts.org/api/project?api_key=API-KEY'","title":"Command line Example Usage of the API"},{"location":"api/intro/#pybossa-endpoints","text":"These are the endpoints that you usually visit using the pybossa-default-theme or in other words, the routes that are defined in PYBOSSA for the user. For example, while you can get information about a project using the RESTful API: 1 https://crowdsourced.micropasts.org/api/project?short_name=foo You can also get information about the project using the following URL: 1 https://crowdsourced.micropasts.org/project/foo/ That URL by default it will return HTML, but you can ask the server to return it in JSON format. While the RESTful API only returns the objects as they are in the database, these other endpoints can return more data, like for example the list of projects a user has participated. Single Page Applications (SPA) If you want to build a SPA, when you create the routes, please, re-use the PYBOSSA ones as it will be easier for you to follow redirects. Also, this is important for other parts, like validation of emails, etc. Otherwise, you will have to handle those redirections in your web server.","title":"PYBOSSA endpoints"},{"location":"api/jamstack/","text":"Jamstack for PYBOSSA \u00b6 If you want to use a frontend server like NuxtJS or Next, you will have to configure PYBOSSA properly to run within your frontend framework. Authentication \u00b6 PYBOSSA uses signed cookies to authenticate the users and keep their sessions. As we use cookies, we will have to tell PYBOSSA how to configure them to work with you. Cookies configuration \u00b6 In your settings_local.py file add the following: REMEMBER_COOKIE_DOMAIN = 'crowdsourced.micropasts.org' SESSION_COOKIE_DOMAIN = 'crowdsourced.micropasts.org' SESSION_COOKIE_SAMESITE = None This will ensure that the cookie will be set for your session from the frontend site, and will be sent back to the backend for authenticating the user. NuxtJS configuration \u00b6 If you are using NuxtJS with Axios, you will have to configure first Axios like this in the nuxt.config.js file: axios : { baseURL : 'h tt ps : //crowdsourced.micropas ts .org/' , crede nt ials : true , proxyHeaders : true , headers : { 'Co ntent - Type' : 'applica t io n /jso n ' , }, }, Then be sure to make a first request from the client side to get the cookie and get it stored on the browser. Then you can authenticate the user: First use axios to get the login page: this. axios. axios. get(\u2018/account/signin?response_format=json\u2019) This request will return the CSRF token that you will need to send as a header (check the API section for more details) Then do a post with the user login credentials: this. axios. axios. post(\u2018/account/siginin?response_format=json\u2019) Thant\u2019s all. Be sure to have the domain set it up properly, as any typo will make things harder to debug. Note If you are not setting the cookie properly you will get a CSRF token error, as it is not validated properly. Note If you want to develop in your own machine, be sure to set up in your /etc/hosts a subdomain from your server so you can run the NuxtJS server from there. This will ensure that you can test the cookis without having to deploy it. Project publication \u00b6 As you will not need a task template, you can disable it in the config of PYBOSSA: DISABLE_TASK_PRESENTER = True","title":"Jamstack"},{"location":"api/jamstack/#jamstack-for-pybossa","text":"If you want to use a frontend server like NuxtJS or Next, you will have to configure PYBOSSA properly to run within your frontend framework.","title":"Jamstack for PYBOSSA"},{"location":"api/jamstack/#authentication","text":"PYBOSSA uses signed cookies to authenticate the users and keep their sessions. As we use cookies, we will have to tell PYBOSSA how to configure them to work with you.","title":"Authentication"},{"location":"api/jamstack/#cookies-configuration","text":"In your settings_local.py file add the following: REMEMBER_COOKIE_DOMAIN = 'crowdsourced.micropasts.org' SESSION_COOKIE_DOMAIN = 'crowdsourced.micropasts.org' SESSION_COOKIE_SAMESITE = None This will ensure that the cookie will be set for your session from the frontend site, and will be sent back to the backend for authenticating the user.","title":"Cookies configuration"},{"location":"api/jamstack/#nuxtjs-configuration","text":"If you are using NuxtJS with Axios, you will have to configure first Axios like this in the nuxt.config.js file: axios : { baseURL : 'h tt ps : //crowdsourced.micropas ts .org/' , crede nt ials : true , proxyHeaders : true , headers : { 'Co ntent - Type' : 'applica t io n /jso n ' , }, }, Then be sure to make a first request from the client side to get the cookie and get it stored on the browser. Then you can authenticate the user: First use axios to get the login page: this. axios. axios. get(\u2018/account/signin?response_format=json\u2019) This request will return the CSRF token that you will need to send as a header (check the API section for more details) Then do a post with the user login credentials: this. axios. axios. post(\u2018/account/siginin?response_format=json\u2019) Thant\u2019s all. Be sure to have the domain set it up properly, as any typo will make things harder to debug. Note If you are not setting the cookie properly you will get a CSRF token error, as it is not validated properly. Note If you want to develop in your own machine, be sure to set up in your /etc/hosts a subdomain from your server so you can run the NuxtJS server from there. This will ensure that you can test the cookis without having to deploy it.","title":"NuxtJS configuration"},{"location":"api/jamstack/#project-publication","text":"As you will not need a task template, you can disable it in the config of PYBOSSA: DISABLE_TASK_PRESENTER = True","title":"Project publication"},{"location":"api/leaderboard/","text":"Leaderboard \u00b6 Endpoint: /leaderboard/ Endpoint: /leaderboard/window/<int:window> Allowed methods : GET GET Shows you the top 20 contributors rank in a sorted leaderboard. If you are logged in you will also get the rank of yourself even when you are not visible on the top public leaderboard. By default the window is zero, adding the authenticated user to the bottom of the top 20, so the user can know the rank. If you want, you can use a window to show the previous and next users taking into account authenticated user rank. For example, you can get the previous 3 and next 3 accessing this URL: /leaderboard/window/3. template : Jinja2 template. title : the title for the endpoint. top_users : Sorted list of leaderboard top users. Example output for logged in user JohnDoe (normally not visible in public leaderboard): { \"template\" : \"/stats/index.html\" , \"title\" : \"Community Leaderboard\" , \"top_users\" : [ { \"created\" : \"2014-08-17T18:28:56.738119\" , \"fullname\" : \"Buzz Bot\" , \"info\" : { \"avatar\" : \"1410771548.09_avatar.png\" , \"container\" : \"user_5305\" }, \"n_answers\" : null , \"name\" : \"buzzbot\" , \"rank\" : 1 , \"registered_ago\" : null , \"score\" : 54259 }, ... , { \"created\" : \"2014-08-11T08:59:32.079599\" , \"fullname\" : \"JohnDoe\" , \"info\" : { \"avatar\" : null , \"container\" : \"user_4953\" }, \"n_answers\" : null , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"registered_ago\" : null , \"score\" : 56 } ] }","title":"Methods"},{"location":"api/leaderboard/#leaderboard","text":"Endpoint: /leaderboard/ Endpoint: /leaderboard/window/<int:window> Allowed methods : GET GET Shows you the top 20 contributors rank in a sorted leaderboard. If you are logged in you will also get the rank of yourself even when you are not visible on the top public leaderboard. By default the window is zero, adding the authenticated user to the bottom of the top 20, so the user can know the rank. If you want, you can use a window to show the previous and next users taking into account authenticated user rank. For example, you can get the previous 3 and next 3 accessing this URL: /leaderboard/window/3. template : Jinja2 template. title : the title for the endpoint. top_users : Sorted list of leaderboard top users. Example output for logged in user JohnDoe (normally not visible in public leaderboard): { \"template\" : \"/stats/index.html\" , \"title\" : \"Community Leaderboard\" , \"top_users\" : [ { \"created\" : \"2014-08-17T18:28:56.738119\" , \"fullname\" : \"Buzz Bot\" , \"info\" : { \"avatar\" : \"1410771548.09_avatar.png\" , \"container\" : \"user_5305\" }, \"n_answers\" : null , \"name\" : \"buzzbot\" , \"rank\" : 1 , \"registered_ago\" : null , \"score\" : 54259 }, ... , { \"created\" : \"2014-08-11T08:59:32.079599\" , \"fullname\" : \"JohnDoe\" , \"info\" : { \"avatar\" : null , \"container\" : \"user_4953\" }, \"n_answers\" : null , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"registered_ago\" : null , \"score\" : 56 } ] }","title":"Leaderboard"},{"location":"api/project_statistics/","text":"You can list project statistics, such as number of tasks, volunteers and overall progress via: 1 GET /api/projectstats To filter this list, for example, by project ID: 1 GET /api/projectstats?project_id=[1,2,3] To include additional hour stats, day stats and user stats for the past 2 weeks, append full=1 to the query, for example: 1 GET /api/projectstats?full=1 These additional statistics will be included in the info field of each object returned.","title":"Project statistics"},{"location":"api/sso/","text":"Disqus Single Sign-On (SSO) \u00b6 If the PYBOSSA server is configured with Disqus SSO keys (see documentation ), then you can get the authentication parameters in this endpoint: api/disqus/sso . The endpoint will return a JSON object with two keys: api_key and remote_auth_s3 . Use those values to authenticate the user in Disqus. Check their official documentation .","title":"Disqus Single Sign On"},{"location":"api/sso/#disqus-single-sign-on-sso","text":"If the PYBOSSA server is configured with Disqus SSO keys (see documentation ), then you can get the authentication parameters in this endpoint: api/disqus/sso . The endpoint will return a JSON object with two keys: api_key and remote_auth_s3 . Use those values to authenticate the user in Disqus. Check their official documentation .","title":"Disqus Single Sign-On (SSO)"},{"location":"api/stats/","text":"PYBOSSA server stats \u00b6 Endpoint: /stats/ Allowed methods : GET GET Gives you the global stats of the PYBOSSA server. title : the title for the endpoint. locs : localizations for anonymous users that have contributed. projects : statistics about total published and draft projects. show_locs : if GEOIP is enabled to show that data. stats : Number of anonymous and authenticated users, number of draft and published projects, number of tasks, taskruns and total number of users. tasks : Task and Taskrun statistics. tasks : Task and Taskrun statistics. top_5_projects_24_hours : Top 5 projects in the last 24 hours. top_5_users_24_hours : Top 5 users in the last 24 hours. users : User statistics. Example output { \"locs\" : \"[]\" , \"projects\" : { \"label\" : \"Projects Statistics\" , \"values\" : [ { \"label\" : \"Published\" , \"value\" : [ 0 , 534 ] }, { \"label\" : \"Draft\" , \"value\" : [ 0 , 1278 ] } ] }, \"show_locs\" : false , \"stats\" : { \"n_anon\" : 27587 , \"n_auth\" : 11134 , \"n_draft_projects\" : 1278 , \"n_published_projects\" : 534 , \"n_task_runs\" : 1801222 , \"n_tasks\" : 553012 , \"n_total_projects\" : 1812 , \"n_total_users\" : 38721 }, \"tasks\" : { \"label\" : \"Task and Task Run Statistics\" , \"values\" : [ { \"label\" : \"Tasks\" , \"value\" : [ 0 , 553012 ] }, { \"label\" : \"Answers\" , \"value\" : [ 1 , 1801222 ] } ] }, \"template\" : \"/stats/global.html\" , \"title\" : \"Global Statistics\" , \"top5_projects_24_hours\" : [], \"top5_users_24_hours\" : [], \"users\" : { \"label\" : \"User Statistics\" , \"values\" : [ { \"label\" : \"Anonymous\" , \"value\" : [ 0 , 27587 ] }, { \"label\" : \"Authenticated\" , \"value\" : [ 0 , 11134 ] } ] } }","title":"Methods"},{"location":"api/stats/#pybossa-server-stats","text":"Endpoint: /stats/ Allowed methods : GET GET Gives you the global stats of the PYBOSSA server. title : the title for the endpoint. locs : localizations for anonymous users that have contributed. projects : statistics about total published and draft projects. show_locs : if GEOIP is enabled to show that data. stats : Number of anonymous and authenticated users, number of draft and published projects, number of tasks, taskruns and total number of users. tasks : Task and Taskrun statistics. tasks : Task and Taskrun statistics. top_5_projects_24_hours : Top 5 projects in the last 24 hours. top_5_users_24_hours : Top 5 users in the last 24 hours. users : User statistics. Example output { \"locs\" : \"[]\" , \"projects\" : { \"label\" : \"Projects Statistics\" , \"values\" : [ { \"label\" : \"Published\" , \"value\" : [ 0 , 534 ] }, { \"label\" : \"Draft\" , \"value\" : [ 0 , 1278 ] } ] }, \"show_locs\" : false , \"stats\" : { \"n_anon\" : 27587 , \"n_auth\" : 11134 , \"n_draft_projects\" : 1278 , \"n_published_projects\" : 534 , \"n_task_runs\" : 1801222 , \"n_tasks\" : 553012 , \"n_total_projects\" : 1812 , \"n_total_users\" : 38721 }, \"tasks\" : { \"label\" : \"Task and Task Run Statistics\" , \"values\" : [ { \"label\" : \"Tasks\" , \"value\" : [ 0 , 553012 ] }, { \"label\" : \"Answers\" , \"value\" : [ 1 , 1801222 ] } ] }, \"template\" : \"/stats/global.html\" , \"title\" : \"Global Statistics\" , \"top5_projects_24_hours\" : [], \"top5_users_24_hours\" : [], \"users\" : { \"label\" : \"User Statistics\" , \"values\" : [ { \"label\" : \"Anonymous\" , \"value\" : [ 0 , 27587 ] }, { \"label\" : \"Authenticated\" , \"value\" : [ 0 , 11134 ] } ] } }","title":"PYBOSSA server stats"},{"location":"api/admin/dashboard/","text":"Admin dashboard \u00b6 **Endpoint: /admin/dashboard/ Allowed methods : GET GET It shows the server statistics. You can use the argument ?refresh=1 to update the data, as this data is only updated every 24 hours. active_anon_last_week : Active number of anonymous users in the server. published_projects_last_week : Published projects from the last week. new_tasks_week : Number of new tasks created on the last week. update_feed : Activity feed of actions in the server. draft_projects_last_week : List of new draft projects created in the last week. update_projects_last_week : List of updated projects in the last week. new_users_week : Number of new registered users in the last week. new_task_runs_week : Number of new task runs in the last week. returning_users_week : Number of returning users per number of days in a row in the last week. active_users_last_week : Number of active users in the last week. wait : This will be False if there\u2019s data, otherwise it will be True. Example output { \"active_anon_last_week\" : { \"labels\" : [ \"2016-04-28\" ], \"series\" : [ [ 0 ] ] }, \"active_users_last_week\" : { \"labels\" : [ \"2016-04-28\" ], \"series\" : [ [ 1 ] ] }, \"draft_projects_last_week\" : [ { \"day\" : \"2016-04-27\" , \"email_addr\" : \"email\" , \"id\" : id , \"owner_id\" : id , \"p_name\" : \"name\" , \"short_name\" : \"name\" , \"u_name\" : \"name\" }, { \"day\" : \"2016-04-26\" , \"email_addr\" : \"email\" , \"id\" : id , \"owner_id\" : id , \"p_name\" : \"name\" , \"short_name\" : \"name\" , \"u_name\" : \"name\" } ], \"new_task_runs_week\" : { \"labels\" : [ \"2016-04-28\" ], \"series\" : [ [ 4 ] ] }, \"new_tasks_week\" : { \"labels\" : [ \"2016-04-26\" , \"2016-04-28\" ], \"series\" : [ [ 57 , 4 ] ] }, \"new_users_week\" : { \"labels\" : [ \"2016-04-27\" ], \"series\" : [ [ 1 ] ] }, \"published_projects_last_week\" : [], \"returning_users_week\" : { \"labels\" : [ \"1 day\" , \"2 days\" , \"3 days\" , \"4 days\" , \"5 days\" , \"6 days\" , \"7 days\" ], \"series\" : [ [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ] }, \"template\" : \"admin/dashboard.html\" , \"title\" : \"Dashboard\" , \"update_feed\" : [], \"update_projects_last_week\" : [ { \"day\" : \"2016-04-28\" , \"email_addr\" : \"email\" , \"id\" : id , \"owner_id\" : id , \"p_name\" : \"name\" , \"short_name\" : \"name\" , \"u_name\" : \"name\" }, { \"day\" : \"2016-04-27\" , \"email_addr\" : \"email\" , \"id\" : id , \"owner_id\" : id , \"p_name\" : \"name\" , \"short_name\" : \"name\" , \"u_name\" : \"name\" }, { \"day\" : \"2016-04-26\" , \"email_addr\" : \"email\" , \"id\" : id , \"owner_id\" : id , \"p_name\" : \"name\" , \"short_name\" : \"name\" , \"u_name\" : \"name\" }, ], \"wait\" : false }","title":"Dashboard"},{"location":"api/admin/dashboard/#admin-dashboard","text":"**Endpoint: /admin/dashboard/ Allowed methods : GET GET It shows the server statistics. You can use the argument ?refresh=1 to update the data, as this data is only updated every 24 hours. active_anon_last_week : Active number of anonymous users in the server. published_projects_last_week : Published projects from the last week. new_tasks_week : Number of new tasks created on the last week. update_feed : Activity feed of actions in the server. draft_projects_last_week : List of new draft projects created in the last week. update_projects_last_week : List of updated projects in the last week. new_users_week : Number of new registered users in the last week. new_task_runs_week : Number of new task runs in the last week. returning_users_week : Number of returning users per number of days in a row in the last week. active_users_last_week : Number of active users in the last week. wait : This will be False if there\u2019s data, otherwise it will be True. Example output { \"active_anon_last_week\" : { \"labels\" : [ \"2016-04-28\" ], \"series\" : [ [ 0 ] ] }, \"active_users_last_week\" : { \"labels\" : [ \"2016-04-28\" ], \"series\" : [ [ 1 ] ] }, \"draft_projects_last_week\" : [ { \"day\" : \"2016-04-27\" , \"email_addr\" : \"email\" , \"id\" : id , \"owner_id\" : id , \"p_name\" : \"name\" , \"short_name\" : \"name\" , \"u_name\" : \"name\" }, { \"day\" : \"2016-04-26\" , \"email_addr\" : \"email\" , \"id\" : id , \"owner_id\" : id , \"p_name\" : \"name\" , \"short_name\" : \"name\" , \"u_name\" : \"name\" } ], \"new_task_runs_week\" : { \"labels\" : [ \"2016-04-28\" ], \"series\" : [ [ 4 ] ] }, \"new_tasks_week\" : { \"labels\" : [ \"2016-04-26\" , \"2016-04-28\" ], \"series\" : [ [ 57 , 4 ] ] }, \"new_users_week\" : { \"labels\" : [ \"2016-04-27\" ], \"series\" : [ [ 1 ] ] }, \"published_projects_last_week\" : [], \"returning_users_week\" : { \"labels\" : [ \"1 day\" , \"2 days\" , \"3 days\" , \"4 days\" , \"5 days\" , \"6 days\" , \"7 days\" ], \"series\" : [ [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ] }, \"template\" : \"admin/dashboard.html\" , \"title\" : \"Dashboard\" , \"update_feed\" : [], \"update_projects_last_week\" : [ { \"day\" : \"2016-04-28\" , \"email_addr\" : \"email\" , \"id\" : id , \"owner_id\" : id , \"p_name\" : \"name\" , \"short_name\" : \"name\" , \"u_name\" : \"name\" }, { \"day\" : \"2016-04-27\" , \"email_addr\" : \"email\" , \"id\" : id , \"owner_id\" : id , \"p_name\" : \"name\" , \"short_name\" : \"name\" , \"u_name\" : \"name\" }, { \"day\" : \"2016-04-26\" , \"email_addr\" : \"email\" , \"id\" : id , \"owner_id\" : id , \"p_name\" : \"name\" , \"short_name\" : \"name\" , \"u_name\" : \"name\" }, ], \"wait\" : false }","title":"Admin dashboard"},{"location":"api/admin/featured/","text":"Admin featured projects \u00b6 Endpoint: /admin/featured Allowed methods : GET GET Gives you all featured projects on PYBOSSA. categories : Gives you a list of categories where projects can be featured. form : The form fields that need to be sent for feature and unfeature a project. It contains the CSRF token for validating the POST/DELETE. projects : Featured projects grouped by categories. template : The Jinja2 template that could be rendered. Example output { \"categories\" : [ { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, { \"created\" : \"2013-06-18T11:14:54.737672\" , \"description\" : \"Humanities projects\" , \"id\" : 4 , \"name\" : \"Humanities\" , \"short_name\" : \"humanities\" }, ... ], \"projects\" : { \"art\" : [ { \"created\" : \"2013-12-10T06:54:48.222642\" , \"description\" : \"Description\" , \"id\" : 1069 , \"info\" : { \"container\" : \"user_3738\" , \"thumbnail\" : \"app_1069_thumbnail_1410772175.32.png\" }, \"last_activity\" : \"just now\" , \"last_activity_raw\" : null , \"n_tasks\" : 13 , \"n_volunteers\" : 0 , \"name\" : \"AAAA Test\" , \"overall_progress\" : 0 , \"owner\" : \"John Doe\" , \"short_name\" : \"AAAATest\" , \"updated\" : \"2014-11-05T14:55:07.564118\" }, ... ] \"humanities\" : [ { \"created\" : \"2014-10-21T12:20:51.194485\" , \"description\" : \"test project\" , \"id\" : 2144 , \"info\" : { \"container\" : null , \"thumbnail\" : null }, \"last_activity\" : \"2 years ago\" , \"last_activity_raw\" : \"2014-10-21T12:31:51.560422\" , \"n_tasks\" : 9 , \"n_volunteers\" : 2 , \"name\" : \"zak's test\" , \"overall_progress\" : 0 , \"owner\" : \"John Doe Cousin\" , \"short_name\" : \"cousintest\" , \"updated\" : \"2014-11-05T14:55:07.564118\" }, ... ] }, \"form\" : { \"csrf\" : \"secret_token_here\" }, \"template\" : \"/admin/projects.html\" } Admin un-/feature projects \u00b6 Endpoint: /admin/featured/<int:project_id> Allowed methods : POST / DELETE POST Features a specific project. To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. Example output On Success it will give you the project information { \"info\" : { \"task_presenter\" : \"...\" , \"container\" : \"user_3738\" , \"thumbnail\" : \"app_1069_thumbnail_1410772175.32.png\" }, \"updated\" : \"2017-01-24T17:21:07.545983\" , \"category_id\" : 3 , \"description\" : \"Description\" , \"short_name\" : \"AAAATest\" , \"created\" : \"2013-12-10T06:54:48.222642\" , \"webhook\" : null , \"long_description\" : \"AAAATest\\n\\n\" , \"featured\" : false , \"allow_anonymous_contributors\" : true , \"published\" : true , \"secret_key\" : \"dfgojdsfgsgd\" , \"owner_id\" : 3738 , \"contacted\" : null , \"id\" : 1069 , \"name\" : \"AAAA Test\" } If a project is already featured: { \"code\" : 400 , \"description\" : \"CSRF token missing or incorrect.\" , \"template\" : \"400.html\" } DELETE Unfeatures a specific project. To send a valid DELETE request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. Example output On Success it will give you the project information { \"info\" : { \"task_presenter\" : \"...\" , \"container\" : \"user_3738\" , \"thumbnail\" : \"app_1069_thumbnail_1410772175.32.png\" }, \"updated\" : \"2017-01-24T17:21:07.545983\" , \"category_id\" : 3 , \"description\" : \"Description\" , \"short_name\" : \"AAAATest\" , \"created\" : \"2013-12-10T06:54:48.222642\" , \"webhook\" : null , \"long_description\" : \"AAAATest\\n\\n\" , \"featured\" : false , \"allow_anonymous_contributors\" : true , \"published\" : true , \"secret_key\" : \"2ffgjngdf6bcbc38ba52561d4\" , \"owner_id\" : 3738 , \"contacted\" : null , \"id\" : 1069 , \"name\" : \"AAAA Test\" } If a project is already unfeatured: { \"status_code\" : 415 , \"error\" : \"Project.id 1069 is not featured\" }","title":"Featured projects"},{"location":"api/admin/featured/#admin-featured-projects","text":"Endpoint: /admin/featured Allowed methods : GET GET Gives you all featured projects on PYBOSSA. categories : Gives you a list of categories where projects can be featured. form : The form fields that need to be sent for feature and unfeature a project. It contains the CSRF token for validating the POST/DELETE. projects : Featured projects grouped by categories. template : The Jinja2 template that could be rendered. Example output { \"categories\" : [ { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, { \"created\" : \"2013-06-18T11:14:54.737672\" , \"description\" : \"Humanities projects\" , \"id\" : 4 , \"name\" : \"Humanities\" , \"short_name\" : \"humanities\" }, ... ], \"projects\" : { \"art\" : [ { \"created\" : \"2013-12-10T06:54:48.222642\" , \"description\" : \"Description\" , \"id\" : 1069 , \"info\" : { \"container\" : \"user_3738\" , \"thumbnail\" : \"app_1069_thumbnail_1410772175.32.png\" }, \"last_activity\" : \"just now\" , \"last_activity_raw\" : null , \"n_tasks\" : 13 , \"n_volunteers\" : 0 , \"name\" : \"AAAA Test\" , \"overall_progress\" : 0 , \"owner\" : \"John Doe\" , \"short_name\" : \"AAAATest\" , \"updated\" : \"2014-11-05T14:55:07.564118\" }, ... ] \"humanities\" : [ { \"created\" : \"2014-10-21T12:20:51.194485\" , \"description\" : \"test project\" , \"id\" : 2144 , \"info\" : { \"container\" : null , \"thumbnail\" : null }, \"last_activity\" : \"2 years ago\" , \"last_activity_raw\" : \"2014-10-21T12:31:51.560422\" , \"n_tasks\" : 9 , \"n_volunteers\" : 2 , \"name\" : \"zak's test\" , \"overall_progress\" : 0 , \"owner\" : \"John Doe Cousin\" , \"short_name\" : \"cousintest\" , \"updated\" : \"2014-11-05T14:55:07.564118\" }, ... ] }, \"form\" : { \"csrf\" : \"secret_token_here\" }, \"template\" : \"/admin/projects.html\" }","title":"Admin featured projects"},{"location":"api/admin/featured/#admin-un-feature-projects","text":"Endpoint: /admin/featured/<int:project_id> Allowed methods : POST / DELETE POST Features a specific project. To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. Example output On Success it will give you the project information { \"info\" : { \"task_presenter\" : \"...\" , \"container\" : \"user_3738\" , \"thumbnail\" : \"app_1069_thumbnail_1410772175.32.png\" }, \"updated\" : \"2017-01-24T17:21:07.545983\" , \"category_id\" : 3 , \"description\" : \"Description\" , \"short_name\" : \"AAAATest\" , \"created\" : \"2013-12-10T06:54:48.222642\" , \"webhook\" : null , \"long_description\" : \"AAAATest\\n\\n\" , \"featured\" : false , \"allow_anonymous_contributors\" : true , \"published\" : true , \"secret_key\" : \"dfgojdsfgsgd\" , \"owner_id\" : 3738 , \"contacted\" : null , \"id\" : 1069 , \"name\" : \"AAAA Test\" } If a project is already featured: { \"code\" : 400 , \"description\" : \"CSRF token missing or incorrect.\" , \"template\" : \"400.html\" } DELETE Unfeatures a specific project. To send a valid DELETE request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. Example output On Success it will give you the project information { \"info\" : { \"task_presenter\" : \"...\" , \"container\" : \"user_3738\" , \"thumbnail\" : \"app_1069_thumbnail_1410772175.32.png\" }, \"updated\" : \"2017-01-24T17:21:07.545983\" , \"category_id\" : 3 , \"description\" : \"Description\" , \"short_name\" : \"AAAATest\" , \"created\" : \"2013-12-10T06:54:48.222642\" , \"webhook\" : null , \"long_description\" : \"AAAATest\\n\\n\" , \"featured\" : false , \"allow_anonymous_contributors\" : true , \"published\" : true , \"secret_key\" : \"2ffgjngdf6bcbc38ba52561d4\" , \"owner_id\" : 3738 , \"contacted\" : null , \"id\" : 1069 , \"name\" : \"AAAA Test\" } If a project is already unfeatured: { \"status_code\" : 415 , \"error\" : \"Project.id 1069 is not featured\" }","title":"Admin un-/feature projects"},{"location":"api/blogpost/intro/","text":"Intro \u00b6 This endpoint (api/blogpost) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial. Blogposts allow you to upload images via the endpoint using the multipart/form-data Content-Type. For example, imagine that you want to add a photo to your blogpost. In this case, you can do the following (using the popular Python requests library, but you can use any other programming language): import requests url = 'https://crowdsourced.micropasts.org/api/blogpost?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID , 'title' : 'Title' , 'body' : 'body' } r = requests . post ( url , data = data , files = files ) Note Only project owners can create blogposts.","title":"Attaching files"},{"location":"api/blogpost/intro/#intro","text":"This endpoint (api/blogpost) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial. Blogposts allow you to upload images via the endpoint using the multipart/form-data Content-Type. For example, imagine that you want to add a photo to your blogpost. In this case, you can do the following (using the popular Python requests library, but you can use any other programming language): import requests url = 'https://crowdsourced.micropasts.org/api/blogpost?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID , 'title' : 'Title' , 'body' : 'body' } r = requests . post ( url , data = data , files = files ) Note Only project owners can create blogposts.","title":"Intro"},{"location":"api/helpingmaterial/intro/","text":"Intro \u00b6 This endpoint (api/helpingmaterial) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial. Helping materials allow you to upload images via the endpoint using the multipart/form-data Content-Type. For example, imagine that you want to add a photo of an animal and it\u2019s description, so users can easily identify it (or use it as pre-loaded answer for classifying pictures of animals). In this case, you can do the following (using the popular Python requests library, but you can use any other programming language): import requests url = 'https://crowdsourced.micropasts.org/api/helpingpoint?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID } r = requests . post ( url , data = data , files = files ) # Get the created helping material hp = r . json () # Add the meta-data of the picture url = 'https://crowdsourced.micropasts.org/api/helpingpoint/ %s ?api_key=YOURKEY' % hp [ 'id' ] info = { 'popular_name' : 'elephant' , 'scientific_name' : 'loxodonta' } r = requests . put ( url , json = { 'info' : info }) You can add as many files as you want. Then, from any place you can query the helping material endpoint to retrieve the example/tutorial materials for helping your users. Tip You can use PBS to add helping materials from an Excel or CSV file. Check the documentation . Note Only project owners can create helping materials.","title":"Attaching files"},{"location":"api/helpingmaterial/intro/#intro","text":"This endpoint (api/helpingmaterial) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial. Helping materials allow you to upload images via the endpoint using the multipart/form-data Content-Type. For example, imagine that you want to add a photo of an animal and it\u2019s description, so users can easily identify it (or use it as pre-loaded answer for classifying pictures of animals). In this case, you can do the following (using the popular Python requests library, but you can use any other programming language): import requests url = 'https://crowdsourced.micropasts.org/api/helpingpoint?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID } r = requests . post ( url , data = data , files = files ) # Get the created helping material hp = r . json () # Add the meta-data of the picture url = 'https://crowdsourced.micropasts.org/api/helpingpoint/ %s ?api_key=YOURKEY' % hp [ 'id' ] info = { 'popular_name' : 'elephant' , 'scientific_name' : 'loxodonta' } r = requests . put ( url , json = { 'info' : info }) You can add as many files as you want. Then, from any place you can query the helping material endpoint to retrieve the example/tutorial materials for helping your users. Tip You can use PBS to add helping materials from an Excel or CSV file. Check the documentation . Note Only project owners can create helping materials.","title":"Intro"},{"location":"api/page/intro/","text":"Intro \u00b6 This endpoint (api/page) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build a headless CMS. Pages allow you to upload images (or any allowed file) via the endpoint using the multipart/form-data Content-Type. For example, imagine that you want to add a page for your SPA or #jamstack solution. In this case, you can do the following (using the popular Python requests library, but you can use any other programming language): import requests url = 'https://crowdsourced.micropasts.org/api/page?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID , 'slug' : 'aboutus' } r = requests . post ( url , data = data , files = files ) # Get the created helping material hp = r . json () # Add the meta-data of the picture url = 'https://crowdsourced.micropasts.org/api/page/ %s ?api_key=YOURKEY' % hp [ 'id' ] info = { 'structure' : [ 'Header' , 'About' , 'Footer' ]} r = requests . put ( url , json = { 'info' : info }) You can add as many pages as you want. Then, within your frontend framework (i.e. nuxt) you can match URLs in your router to request the page\u2019s structure from PYBOSSA. In this way, you will be able to handle structure to PYBOSSA, so your site is more flexible than ever. Note Only project owners and admins can create pages.","title":"Info"},{"location":"api/page/intro/#intro","text":"This endpoint (api/page) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build a headless CMS. Pages allow you to upload images (or any allowed file) via the endpoint using the multipart/form-data Content-Type. For example, imagine that you want to add a page for your SPA or #jamstack solution. In this case, you can do the following (using the popular Python requests library, but you can use any other programming language): import requests url = 'https://crowdsourced.micropasts.org/api/page?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID , 'slug' : 'aboutus' } r = requests . post ( url , data = data , files = files ) # Get the created helping material hp = r . json () # Add the meta-data of the picture url = 'https://crowdsourced.micropasts.org/api/page/ %s ?api_key=YOURKEY' % hp [ 'id' ] info = { 'structure' : [ 'Header' , 'About' , 'Footer' ]} r = requests . put ( url , json = { 'info' : info }) You can add as many pages as you want. Then, within your frontend framework (i.e. nuxt) you can match URLs in your router to request the page\u2019s structure from PYBOSSA. In this way, you will be able to handle structure to PYBOSSA, so your site is more flexible than ever. Note Only project owners and admins can create pages.","title":"Intro"},{"location":"api/project/filtering/","text":"In PYBOSSA most of the domain objects are related to a project. Therefore, you can query (or filter) a list of project IDs directly via the API to reduce the number of queries that you need to do. This is especially useful for Single Page Applications that only use the PYBOSSA JSON endpoints. For example, you can get all the tasks for a list of projects like this: 1 GET https://crowdsourced.micropasts.org/api/task?project_id=[1,2,3] That filter will return tasks for project IDs 1, 2 and 3. The same can be done for task runs and blog posts.","title":"Filtering data to several project IDs"},{"location":"api/project/project/","text":"Project creation \u00b6 Endpoint: /project/new Allowed methods : GET/POST GET Gives you the list of required fields in the form to create a project. template : The Jinja2 template that could be rendered. title : the title for the endpoint. form : The form fields that need to be sent for creating the project. It contains the CSRF token for validating the POST, as well as an errors field in case that something is wrong. Example output { \"errors\" : false , \"form\" : { \"csrf\" : \"token\" , \"description\" : null , \"errors\" : {}, \"long_description\" : null , \"name\" : null , \"short_name\" : null }, \"template\" : \"projects/new.html\" , \"title\" : \"Create a Project\" } Project blog list \u00b6 Endpoint: /project/<short_name>/blog Allowed methods : GET GET Gives you the list of posted blogs by the given project short name. blogposts : All the blog posts for the given project. project : Info about the project. The project and owner fields will have more information if the owner of the project does the request, providing its private information like api_key, password keys, etc. Otherwise, it will be removed and only show public info. Example public output { \"blogposts\" : [ { \"body\" : \"Please, e-mail us to alejasan 4t ucm dot es if you find any bug. Thanks.\" , \"created\" : \"2014-05-14T14:25:04.899079\" , \"id\" : 1 , \"project_id\" : 1377 , \"title\" : \"We are working on the Alpha version.\" , \"user_id\" : 3927 }, ], \"n_completed_tasks\" : 137051 , \"n_task_runs\" : 1070561 , \"n_tasks\" : 169671 , \"n_volunteers\" : 17499 , \"overall_progress\" : 80 , \"owner\" : { \"created\" : \"2014-02-13T15:28:08.420187\" , \"fullname\" : \"John Doe\" , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"container\" }, \"n_answers\" : 32814 , \"name\" : \"johndoe\" , \"rank\" : 4 , \"registered_ago\" : \"3 years ago\" , \"score\" : 32814 }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Image pattern recognition\" , \"featured\" : true , \"id\" : 1 , \"info\" : { \"container\" : \"container\" , \"thumbnail\" : \"58.png\" }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"Dark Skies ISS\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"darkskies\" , \"updated\" : \"2017-01-31T09:18:28.491496\" }, \"template\" : \"projects/blog.html\" } Project task presenter editor \u00b6 Endpoint: /project/<short_name>/tasks/taskpresentereditor Allowed methods : GET/POST GET This endpoint allows you to get the list of available templates for the current project. This will only happen when the project has an empty template, otherwise, it will load the template for you. template : The Jinja2 template that could be rendered. title : the title for the endpoint. presenters : List of available templates (in HTML format). The name of them without the \u2018.html\u2019 will be the argument for the endpoint. last_activit : last activity of the project. n_task_runs : number of task runs. n_tasks : number of tasks. n_volunteers : number of volunteers. owner : information about the owner. pro_features : which pro features are enabled. pro_features : which pro features are enabled. project : info about the project. status : status of the flash message. flash : flash message. Example output { \"flash\" : \"<strong>Note</strong> You will need to upload the tasks using the<a href=\\\"/project/asdf123/tasks/import\\\"> CSV importer</a> or download the project bundle and run the <strong>createTasks.py</strong> script in your computer\" , \"last_activity\" : null , \"n_completed_tasks\" : 0 , \"n_task_runs\" : 0 , \"n_tasks\" : 0 , \"n_volunteers\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"key\" , \"confirmation_email_sent\" : false , \"created\" : \"2016-09-15T11:30:42.660450\" , \"email_addr\" : \"prueba@prueba.com\" , \"fullname\" : \"prueba de json\" , \"id\" : 12030 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user\" }, \"n_answers\" : 5 , \"name\" : \"pruebaadfadfa\" , \"rank\" : 4411 , \"registered_ago\" : \"6 months ago\" , \"score\" : 5 , \"total\" : 11134 , \"valid_email\" : true }, \"presenters\" : [ \"projects/presenters/basic.html\" , \"projects/presenters/image.html\" , \"projects/presenters/sound.html\" , \"projects/presenters/video.html\" , \"projects/presenters/map.html\" , \"projects/presenters/pdf.html\" ], \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"allow_anonymous_contributors\" : true , \"category_id\" : 4 , \"contacted\" : false , \"contrib_button\" : \"draft\" , \"created\" : \"2017-01-11T09:37:43.613007\" , \"description\" : \"adsf\" , \"featured\" : false , \"id\" : 3 , \"info\" : { \"passwd_hash\" : null , \"task_presenter\" : \"\" }, \"long_description\" : \"adsf\" , \"n_blogposts\" : 0 , \"n_results\" : 0 , \"name\" : \"asdf1324\" , \"owner_id\" : 12030 , \"published\" : false , \"secret_key\" : \"73aee9df-be47-4e4c-8192-3a8bf0ab5161\" , \"short_name\" : \"asdf123\" , \"updated\" : \"2017-03-15T13:20:48.022328\" , \"webhook\" : \"\" }, \"status\" : \"info\" , \"template\" : \"projects/task_presenter_options.html\" , \"title\" : \"Project: asdf1324 &middot; Task Presenter Editor\" } If you want to preload the template from one of the available prenters, you have to pass the following argument: ?template=basic for the basic or ?template=iamge for the image template. Example output { \"errors\" : false , \"flash\" : \"Your code will be <em>automagically</em> rendered in the <strong>preview section</strong>. Click in the preview button!\" , \"form\" : { \"csrf\" : \"token\" , \"editor\" : \"<div class=\\\"row\\\">\\n <div class=\\\"col-md-12\\\">\\n <h1>Write here your HTML Task Presenter</h1>\\n </div>\\n</div>\\n<script type=\\\"text/javascript\\\">\\n(function() {\\n // Your JavaScript code\\n pybossa.taskLoaded(function(task, deferred){\\n // When the task is loaded, do....\\n });\\n\\n pybossa.presentTask(function(task, deferred){\\n // Present the current task to the user\\n // Load the task data into the HTML DOM\\n });\\n\\n pybossa.run('asdf123');\\n})();\\n</script>\" , \"errors\" : {}, \"id\" : 3 }, \"last_activity\" : null , \"n_completed_tasks\" : 0 , \"n_task_runs\" : 0 , \"n_tasks\" : 0 , \"n_volunteers\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"key\" , \"confirmation_email_sent\" : false , \"created\" : \"2016-09-15T11:30:42.660450\" , \"email_addr\" : \"prueba@prueba.com\" , \"fullname\" : \"prueba de json\" , \"id\" : 0 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user\" }, \"n_answers\" : 5 , \"name\" : \"pruebaadfadfa\" , \"rank\" : 4411 , \"registered_ago\" : \"6 months ago\" , \"score\" : 5 , \"total\" : 11134 , \"valid_email\" : true }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"allow_anonymous_contributors\" : true , \"category_id\" : 4 , \"contacted\" : false , \"contrib_button\" : \"draft\" , \"created\" : \"2017-01-11T09:37:43.613007\" , \"description\" : \"adsf\" , \"featured\" : false , \"id\" : 3 , \"info\" : { \"passwd_hash\" : null , \"task_presenter\" : \"\" }, \"long_description\" : \"adsf\" , \"n_blogposts\" : 0 , \"n_results\" : 0 , \"name\" : \"asdf1324\" , \"owner_id\" : 0 , \"published\" : false , \"secret_key\" : \"73aee9df-be47-4e4c-8192-3a8bf0ab5161\" , \"short_name\" : \"asdf123\" , \"updated\" : \"2017-03-15T13:20:48.022328\" , \"webhook\" : \"\" }, \"status\" : \"info\" , \"template\" : \"projects/task_presenter_editor.html\" , \"title\" : \"Project: asdf1324 &middot; Task Presenter Editor\" } Then, you can use that template, or if you prefer you can do a POST directly without that information. As in any other request involving a POST you will need the CSRFToken to validate it. POST To send a valid POST request, you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. You will have to POST the data fields found in the previous example, as it contains the information about the fields: specifically editor with the HTML/CSS/JS that you want to provide. If the post is successful, you will get the following output: Example output { \"flash\" : \"<i class=\\\"icon-ok\\\"></i> Task presenter added!\" , \"next\" : \"/project/asdf123/tasks/\" , \"status\" : \"success\" } Project delete \u00b6 Endpoint: /project/<short_name>/delete Allowed methods : GET/POST GET The GET endpoint allows you to get all the info about the project (see the Project endpoint as well) as well as the csrf token. As this endpoint does not have any form, the csrf token is not inside the form field. Example output { \"csrf\" : \"token\" , \"last_activity\" : null , \"n_tasks\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"key\" , \"confirmation_email_sent\" : false , \"created\" : \"2016-09-15T11:30:42.660450\" , \"email_addr\" : \"prueba@prueba.com\" , \"fullname\" : \"prueba de json\" , \"id\" : 0 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"0\" }, \"n_answers\" : 5 , \"name\" : \"pruebaadfadfa\" , \"rank\" : 4411 , \"registered_ago\" : \"6 months ago\" , \"score\" : 5 , \"total\" : 11134 , \"valid_email\" : true }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"allow_anonymous_contributors\" : true , \"category_id\" : 2 , \"contacted\" : false , \"created\" : \"2017-03-15T15:02:12.160810\" , \"description\" : \"asdf\" , \"featured\" : false , \"id\" : 3 , \"info\" : {}, \"long_description\" : \"asdf\" , \"name\" : \"algo\" , \"owner_id\" : 12030 , \"published\" : false , \"secret_key\" : \"c5a77943-f5a4-484a-86bb-d69559e80357\" , \"short_name\" : \"algo\" , \"updated\" : \"2017-03-15T15:02:12.160823\" , \"webhook\" : null }, \"template\" : \"/projects/delete.html\" , \"title\" : \"Project: algo &middot; Delete\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. Example output { \"flash\" : \"Project deleted!\" , \"next\" : \"/account/pruebaadfadfa/\" , \"status\" : \"success\" } Project update \u00b6 Endpoint: /project/<short_name>/update Allowed methods : GET/POST GET It returns a JSON object with the following information: form : the form fields that need to be sent for updating the project. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. upload_form : the form fields that need to be sent for updating the project\u2019s avatar. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. title : The title for the view. Example output { \"form\" : { \"allow_anonymous_contributors\" : false , \"category_id\" : 2 , \"csrf\" : \"token\" , \"description\" : \"description\" , \"errors\" : {}, \"id\" : 3117 , \"long_description\" : \"long description\" , \"name\" : \"name\" , \"password\" : null , \"protect\" : false , \"short_name\" : \"slug\" , \"webhook\" : null }, \"last_activity\" : null , \"n_completed_tasks\" : 0 , \"n_task_runs\" : 0 , \"n_tasks\" : 2 , \"n_volunteers\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"key\" , \"confirmation_email_sent\" : false , \"created\" : \"2012-06-06T06:27:18.760254\" , \"email_addr\" : \"email.com\" , \"fullname\" : \"John Doe\" , \"id\" : 0 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user\" , }, \"n_answers\" : 2414 , \"name\" : \"johndoe\" , \"rank\" : 69 , \"registered_ago\" : \"4 years ago\" , \"score\" : 2414 , \"total\" : 11134 , \"valid_email\" : false }, \"pro_features\" : { \"auditlog_enabled\" : true , \"autoimporter_enabled\" : true , \"webhooks_enabled\" : true }, \"project\" : { \"allow_anonymous_contributors\" : false , \"category_id\" : 2 , \"contacted\" : false , \"contrib_button\" : \"can_contribute\" , \"created\" : \"2015-06-29T08:23:14.201331\" , \"description\" : \"description\" , \"featured\" : false , \"id\" : 0 , \"info\" : { \"container\" : \"user\" , \"passwd_hash\" : null , \"task_presenter\" : \"HTML+CSS+JS, \" t humb na il \": \" t humb na il.p n g \" }, \" lo n g_descrip t io n \": \" lo n g descrip t io n \", \" n _blogpos ts \": 0, \" n _resul ts \": 0, \" na me \": \" na me \", \" ow ner _id \": 0, \" published \": true, \" secre t _key \": \" key \", \" shor t _ na me \": \" slug \", \" upda te d \": \" 2017-03-16 T 14 : 50 : 45.055331 \", \" webhook \": null }, \" te mpla te \": \" /projec ts /upda te .h t ml \", \" t i tle \": \" Projec t : na me &middo t ; Upda te \", \" upload_ f orm \": { \" ava tar \": null, \" csr f \": \" t oke n \", \" errors \": {}, \" id \": null, \" x 1 \": 0, \" x 2 \": 0, \" y 1 \": 0, \" y 2 \": 0 } } POST To send a valid POST request, you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken.\u201d As this endpoint supports two different forms, you must specify which form are you targeting adding an extra key: btn . The options for this key are: Upload : to update the upload_form . The other one does not need this extra key. Note Be sure to respect the Uppercase in the first letter. Otherwise, it will fail. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was successful. form : the form fields with the sent information. It contains the csrf token for validating the post, as well as an errors field in the case that something is wrong. Example output { \"flash\" : \"Your profile has been updated!\" , \"next\" : \"/account/pruebaadfadfa/update\" , \"status\" : \"success\" } If there\u2019s an error in the form fields, you will get them in the form.errors key: { \"flash\" : \"Please correct the errors\" , \"form\" : { \"allow_anonymous_contributors\" : false , \"category_id\" : 2 , \"csrf\" : \"token\" , \"description\" : \"description\" , \"errors\" : { \"short_name\" : [ \"This field is required.\" ] }, \"id\" : 3117 , \"long_description\" : \"new description\" , \"name\" : \"new name\" , \"password\" : null , \"protect\" : true , \"short_name\" : \"\" , \"webhook\" : null }, ... } Note For updating the avatar is very important to not set the Content-Type . If you are using jQuery, set it to False, so the file is handled properly. To still recieve a JSON response you can add the response_format=json query paramater to your request. The (x1,x2,y1,y2) are the coordinates for cutting the image and create the avatar. (x1,y1) are the offset left of the cropped area and the offset top of the cropped area respectively; and (x2,y2) are the width and height of the crop. And don\u2019t forget to add an extra key to the form-data: \u2018btn\u2019 with a value Upload to select this form. Project reset secret key \u00b6 Endpoint: /project/<short_name>/resetsecretkey Allowed methods : POST Resets the secret key of a project. To send a valid POST request, you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d retrieved from the GET endpoint /project/<short_name>/update . Example output { \"flash\" : \"New secret key generated\" , \"next\" : \"/project/flickrproject2/update\" , \"status\" : \"success\" } Project tasks browse \u00b6 Endpoint: /project/<short_name>/tasks/browse/ Endpoint: /project/<short_name>/tasks/browse/<int:page> Allowed methods : GET n_completed_tasks : number of completed tasks n_tasks : number of tasks n_volunteers : number of volunteers overall_progress : overall progress owner : project owner pagination : pagination information pro_features : pro features enabled or not project : project information tasks : tasks, paginated template : the Jinja2 template that should be rendered in case of text/html. title : the title for the endpoint. Example output { \"n_completed_tasks\" : 0 , \"n_tasks\" : 1 , \"n_volunteers\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"created\" : \"2017-04-17T23:56:22.892222\" , \"fullname\" : \"John Doe\" , \"info\" : {}, \"locale\" : null , \"n_answers\" : 0 , \"name\" : \"johndoe\" , \"rank\" : null , \"registered_ago\" : \"3 hours ago\" , \"score\" : null }, \"pagination\" : { \"next\" : false , \"page\" : 1 , \"per_page\" : 10 , \"prev\" : false , \"total\" : 1 }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"created\" : \"2017-04-17T23:56:23.416754\" , \"description\" : \"Description\" , \"featured\" : false , \"id\" : 1 , \"info\" : {}, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"Sample Project\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"sampleapp\" , \"updated\" : \"2017-04-17T23:56:23.589652\" }, \"tasks\" : [ { \"id\" : 1 , \"n_answers\" : 10 , \"n_task_runs\" : 0 , \"pct_status\" : 0.0 } ], \"template\" : \"/projects/tasks_browse.html\" , \"title\" : \"Project: Sample Project &middot; Tasks\" } Project tasks import \u00b6 Endpoint: /project/<short_name>/tasks/import Allowed methods : GET/POST GET It returns a JSON object with the following information: available_importers : A list of available importers for the server. To use one of the items, you have to add to the endpoint the following argument: ?type=name where the name is the string that you will find in the list of importers in the format: projects/tasks/name.html . template : The Jinja2 template that could be rendered. title : The title for the view. Example output { \"available_importers\" : [ \"projects/tasks/epicollect.html\" , \"projects/tasks/csv.html\" , \"projects/tasks/s3.html\" , \"projects/tasks/youtube.html\" , \"projects/tasks/gdocs.html\" , \"projects/tasks/dropbox.html\" , \"projects/tasks/iiif.html\" ], \"form\" : null , \"loading_text\" : \"Importing tasks, this may take a while, wait...\" , \"n_completed_tasks\" : 0 , \"n_tasks\" : 5 , \"n_volunteers\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"key\" , \"confirmation_email_sent\" : false , \"created\" : \"2012-06-06T06:27:18.760254\" , \"email_addr\" : \"johndoe@gmail.com\" , \"fullname\" : \"John Doe\" , \"id\" : 0 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user\" , }, \"n_answers\" : 2414 , \"name\" : \"johndoe\" , \"rank\" : 69 , \"registered_ago\" : \"4 years ago\" , \"score\" : 2414 , \"total\" : 11134 , \"valid_email\" : false }, \"pro_features\" : { \"auditlog_enabled\" : true , \"autoimporter_enabled\" : true , \"webhooks_enabled\" : true }, \"project\" : { \"allow_anonymous_contributors\" : false , \"category_id\" : 2 , \"contacted\" : false , \"contrib_button\" : \"can_contribute\" , \"created\" : \"2015-06-29T08:23:14.201331\" , \"description\" : \"old\" , \"featured\" : false , \"id\" : 3117 , \"info\" : { \"container\" : \"user\" , \"passwd_hash\" : null , \"task_presenter\" : \"HTML+CSS+JS\" \"thumbnail\" : \"avatar.png\" }, \"long_description\" : \"algo\" , \"n_blogposts\" : 0 , \"n_results\" : 0 , \"name\" : \"name\" , \"owner_id\" : 3 , \"published\" : true , \"secret_key\" : \"f\" , \"short_name\" : \"name\" , \"updated\" : \"2017-03-17T09:15:46.867215\" , \"webhook\" : null }, \"target\" : \"project.import_task\" , \"task_tmpls\" : [ \"projects/tasks/gdocs-sound.html\" , \"projects/tasks/gdocs-map.html\" , \"projects/tasks/gdocs-image.html\" , \"projects/tasks/gdocs-video.html\" , \"projects/tasks/gdocs-pdf.html\" ], \"template\" : \"/projects/task_import_options.html\" , \"title\" : \"Project: bevan &middot; Import Tasks\" } Therefore, if you want to import tasks from a CSV link, you will have to do the following GET: 1 GET server/project/<short_name>/tasks/import?type=csv That query will return the same output as before, but instead of the available_importers, you will get the the form fields and CSRF token for that importer. POST To send a valid POST request, you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken.\u201d It returns a JSON object with the following information: flash : A success message, or error indicating if the request was successful. Example output { \"flash\" : \"Tasks imported\" , \"next\" : \"/project/<short_name>/tasks/\" , \"status\" : \"success\" } Project tutorial \u00b6 Endpoint: /project/<short_name>/tutorial GET It returns a JSON object with the following information: owner : owner information project : project information template : The Jinja2 template that could be rendered. title : The title for the view. Example output { \"owner\" : { \"created\" : \"2014-02-13T15:28:08.420187\" , \"fullname\" : \"John Doe\" , \"info\" : { \"avatar\" : \"1410769844.15_avatar.png\" , \"avatar_url\" : null , \"container\" : \"user_3927\" , \"extra\" : null }, \"locale\" : null , \"n_answers\" : 43565 , \"name\" : \"jdoe\" , \"rank\" : 3 , \"registered_ago\" : \"3 years ago\" , \"score\" : 43565 }, \"project\" : { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Image pattern recognition\" , \"featured\" : true , \"id\" : 1377 , \"info\" : { \"container\" : \"user_3927\" , \"thumbnail\" : \"app_1377_thumbnail_1410772569.58.png\" , \"thumbnail_url\" : null }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"myproject\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"johndoeproject\" , \"updated\" : \"2017-03-02T21:00:33.965587\" }, \"template\" : \"/projects/tutorial.html\" , \"title\" : \"Project: myproject\" } Project shortname \u00b6 Endpoint: /project/<short_name>/ Allowed methods : GET GET Shows project information and owner information. If you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself. last_activity : Last activity on the project. n_completed_tasks : Number of completed tasks. n_task_runs : Number of task runs. n_tasks : Number of tasks. n_volunteers : Number of volunteers. overall_progress : Overall progress. owner : Owner user information. pro_features : Enabled pro features for the project. project : Project information template : Jinja2 template. title : the title for the endpoint. Example output for logged in user JohnDoe: { \"last_activity\" : \"2015-01-21T12:01:41.209270\" , \"n_completed_tasks\" : 0 , \"n_task_runs\" : 3 , \"n_tasks\" : 8 , \"n_volunteers\" : 1 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"akjhfd85-8afd6-48af-f7afg-kjhsfdlkjhf1\" , \"confirmation_email_sent\" : false , \"created\" : \"2014-08-11T08:59:32.079599\" , \"email_addr\" : \"johndoe@johndoe.com\" , \"fullname\" : \"John Doe\" , \"id\" : 1234 , \"info\" : { \"container\" : \"user_1234\" }, \"n_answers\" : 56 , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"registered_ago\" : \"2 years ago\" , \"score\" : 56 , \"total\" : 11093 , \"valid_email\" : true }, \"pro_features\" : { \"auditlog_enabled\" : true , \"autoimporter_enabled\" : true , \"webhooks_enabled\" : true }, \"project\" : { \"allow_anonymous_contributors\" : true , \"category_id\" : 2 , \"contacted\" : true , \"contrib_button\" : \"can_contribute\" , \"created\" : \"2015-01-21T11:59:36.519541\" , \"description\" : \"flickr678\" , \"featured\" : false , \"id\" : 4567 , \"info\" : { \"task_presenter\" : \"<div> .... \" }, \"long_description\" : \"flickr678\\r\\n\" , \"n_blogposts\" : 0 , \"n_results\" : 0 , \"name\" : \"flickr678\" , \"owner_id\" : 9876 , \"published\" : true , \"secret_key\" : \"veryverysecretkey\" , \"short_name\" : \"flickr678\" , \"updated\" : \"2016-04-13T08:07:38.897626\" , \"webhook\" : null }, \"template\" : \"/projects/project.html\" , \"title\" : \"Project: flickr678\" } Anonymous and other user output: { \"last_activity\" : \"2015-01-21T12:01:41.209270\" , \"n_completed_tasks\" : 0 , \"n_task_runs\" : 3 , \"n_tasks\" : 8 , \"n_volunteers\" : 1 , \"overall_progress\" : 0 , \"owner\" : { \"created\" : \"2014-08-11T08:59:32.079599\" , \"fullname\" : \"John Doe\" , \"info\" : { \"avatar\" : null , \"container\" : \"user_4953\" }, \"n_answers\" : 56 , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"registered_ago\" : \"2 years ago\" , \"score\" : 56 }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"created\" : \"2015-01-21T11:59:36.519541\" , \"description\" : \"flickr678\" , \"id\" : 4567 , \"info\" : { \"container\" : null , \"thumbnail\" : null }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"flickr678\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"flickr678\" , \"updated\" : \"2016-04-13T08:07:38.897626\" }, \"template\" : \"/projects/project.html\" , \"title\" : \"Project: flickr678\" } Project settings \u00b6 Endpoint: /project/<short_name>/settings Allowed methods : GET GET Shows project information and owner information. Only works for authenticated users for their projects (or admins). Anonymous users will get a 302 to the login page. Logged in users with access rights will get a 403 when it\u2019s not their project. last_activity : Last activity on the project. n_completed_tasks : Number of completed tasks. n_task_runs : Number of task runs. n_tasks : Number of tasks. n_volunteers : Number of volunteers. overall_progress : Overall progress. owner : Owner user information. pro_features : Enabled pro features for the project. project : Project information template : Jinja2 template. title : the title for the endpoint. The example output matches /project/<short_name>/ Project results \u00b6 Endpoint: /project/<short_name>/results Allowed methods : GET GET Shows information about a project results template. If the logged in user is the owner of the project you will get a more detailed owner information and project information. last_activity : Last activity on the project. n_completed_tasks : Number of completed tasks. n_results : Number of results n_task_runs : Number of task runs. n_tasks : Number of tasks. n_volunteers : Number of volunteers. overall_progress : Overall progress. owner : Owner user information. pro_features : Enabled pro features for the project. project : Project information template : Jinja2 template for results title : the title for the endpoint. Example output For an anonymous user or when you are not the project owner: { \"last_activity\" : \"2015-01-21T12:01:41.209270\" , \"n_completed_tasks\" : 0 , \"n_results\" : 0 , \"n_task_runs\" : 3 , \"n_tasks\" : 8 , \"n_volunteers\" : 1 , \"overall_progress\" : 0 , \"owner\" : { \"created\" : \"2014-08-11T08:59:32.079599\" , \"fullname\" : \"John\" , \"info\" : { \"avatar\" : null , \"container\" : \"user_4953\" }, \"n_answers\" : 56 , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"registered_ago\" : \"2 years ago\" , \"score\" : 56 }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"created\" : \"2015-01-21T11:59:36.519541\" , \"description\" : \"flickr678\" , \"featured\" : false , \"id\" : 2417 , \"info\" : { \"container\" : null , \"thumbnail\" : null }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"flickr678\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"flickr678\" , \"updated\" : \"2016-04-13T08:07:38.897626\" }, \"template\" : \"/projects/results.html\" , \"title\" : \"Project: flickr678\" } Project stats \u00b6 Endpoint: /project/<short_name>/stats Allowed methods : GET GET Shows project statistics if available. If you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself. avg_contrib_time : Average contribution time (NOT existing when no statistics there!). projectStats : Project statistics (NOT existing when no statistics there!). userStats : User statistics (NOT existing when no statistics there!). n_completed_tasks : Number of completed tasks. n_tasks : Number of tasks. n_volunteers : Number of volunteers. overall_progress : Progress (0..100). owner : Owner user information pro_features : Enabled pro features for the project. project : Project information template : Jinja2 template. title : the title for the endpoint. Example output Statistics are existing in this output: { \"avg_contrib_time\" : 0 , \"n_completed_tasks\" : 2 , \"n_tasks\" : 2 , \"n_volunteers\" : 59 , \"overall_progress\" : 100 , \"owner\" : { \"created\" : \"2012-06-06T06:27:18.760254\" , \"fullname\" : \"Daniel Lombra\u00f1a Gonz\u00e1lez\" , \"info\" : { \"avatar\" : \"1422360933.8_avatar.png\" , \"container\" : \"user_3\" }, \"n_answers\" : 2998 , \"name\" : \"teleyinex\" , \"rank\" : 66 , \"registered_ago\" : \"4 years ago\" , \"score\" : 2998 }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"better_stats_enabled\" : true , \"webhooks_enabled\" : false }, \"project\" : { \"created\" : \"2013-01-10T19:58:55.454015\" , \"description\" : \"Facial expressions that convey feelings\" , \"featured\" : true , \"id\" : 253 , \"info\" : { \"container\" : \"user_3\" , \"thumbnail\" : \"project_253_thumbnail_1460620575.png\" }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"The Face We Make\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"thefacewemake\" , \"updated\" : \"2016-04-14T07:56:16.114006\" }, \"projectStats\" : \"{\\\"userAuthStats\\\": {\\\"top5\\\": [], \\\"values\\\": [], \\\"label\\\": \\\"Authenticated Users\\\"} ...\" , \"template\" : \"/projects/stats.html\" , \"title\" : \"Project: The Face We Make &middot; Statistics\" , \"userStats\" : { \"anonymous\" : { \"pct_taskruns\" : 0 , \"taskruns\" : 0 , \"top5\" : [], \"users\" : 0 }, \"authenticated\" : { \"pct_taskruns\" : 0 , \"taskruns\" : 0 , \"top5\" : [], \"users\" : 0 }, \"geo\" : false } } Project tasks \u00b6 Endpoint: /project/<short_name>/tasks Allowed methods : GET GET Shows project tasks. If you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself. autoimporter_enabled : If autoimporter is enabled. last_activity : Last activity. n_completed_tasks : Number of completed tasks. n_task_runs : Number of task runs. n_tasks : Number of tasks. n_volunteers : Number of volunteers. overall_progress : Progress (0..100). owner : Owner user information pro_features : Enabled pro features for the project. project : Project information. template : Jinja2 template. title : the title for the endpoint. Example output for another project where you are not the owner: { \"autoimporter_enabled\" : true , \"last_activity\" : \"2017-03-02T21:00:33.627277\" , \"n_completed_tasks\" : 184839 , \"n_task_runs\" : 1282945 , \"n_tasks\" : 193090 , \"n_volunteers\" : 20016 , \"overall_progress\" : 95 , \"owner\" : { \"created\" : \"2014-02-13T15:28:08.420187\" , \"fullname\" : \"John Smith\" , \"info\" : { \"avatar\" : \"1410769844.15_avatar.png\" , \"container\" : \"user_3927\" , \"extra\" : null }, \"locale\" : null , \"n_answers\" : 43565 , \"name\" : \"pmisson\" , \"rank\" : 3 , \"registered_ago\" : \"3 years ago\" , \"score\" : 43565 }, \"pro_features\" : { \"auditlog_enabled\" : true , \"autoimporter_enabled\" : true , \"webhooks_enabled\" : true }, \"project\" : { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Image pattern recognition\" , \"featured\" : true , \"id\" : 1377 , \"info\" : { \"container\" : \"user_3927\" , \"thumbnail\" : \"app_1377_thumbnail_1410772569.58.png\" }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"Cool Project\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"coolproject\" , \"updated\" : \"2017-03-02T21:00:33.965587\" }, \"template\" : \"/projects/tasks.html\" , \"title\" : \"Project: Cool project\" } Project task id \u00b6 Endpoint: /project/<short_name>/task/<int:task_id> Allowed methods : GET GET Shows a project task based on id. If you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself. owner : Owner user information project : Project information. template : Jinja2 template of the task HTML template. title : the title for the endpoint. Example output for another project where you are not the owner: { \"owner\" : { \"created\" : \"2014-08-11T08:59:32.079599\" , \"fullname\" : \"John Doe\" , \"info\" : { \"avatar\" : \"1458638093.9_avatar.png\" , \"container\" : \"user_4953\" , \"extra\" : null }, \"locale\" : null , \"n_answers\" : 257 , \"name\" : \"JohnD\" , \"rank\" : 840 , \"registered_ago\" : \"2 years ago\" , \"score\" : 257 }, \"project\" : { \"created\" : \"2015-01-21T11:59:36.519541\" , \"description\" : \"flickr678\" , \"featured\" : false , \"id\" : 2417 , \"info\" : { \"container\" : null , \"thumbnail\" : null }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"flickr678\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"flickr678\" , \"updated\" : \"2017-03-22T13:03:55.496660\" }, \"template\" : \"/projects/presenter.html\" , \"title\" : \"Project: flickr678 &middot; Contribute\" } Project Category \u00b6 Endpoint: /project/category/<short_name>/ Allowed methods : GET GET Gives you the list of projects in a category. pagination : A pagination object for getting projects from this category. active_cat : Active category. projects : List of projects belonging to this category. categories : List of available categories in this server. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"active_cat\" : { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, \"categories\" : [ { \"created\" : null , \"description\" : \"Featured projects\" , \"id\" : null , \"name\" : \"Featured\" , \"short_name\" : \"featured\" }, { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, ], \"pagination\" : { \"next\" : false , \"page\" : 1 , \"per_page\" : 20 , \"prev\" : false , \"total\" : 1 }, \"projects\" : [ { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Image pattern recognition\" , \"id\" : 1377 , \"info\" : { \"container\" : \"7\" , \"thumbnail\" : \"58.png\" }, \"last_activity\" : \"2 weeks ago\" , \"last_activity_raw\" : \"2017-01-31T09:18:28.450391\" , \"n_tasks\" : 169671 , \"n_volunteers\" : 17499 , \"name\" : \"Name\" , \"overall_progress\" : 80 , \"owner\" : \"John Doe\" , \"short_name\" : \"name\" , \"updated\" : \"2017-01-31T09:18:28.491496\" }, ], \"template\" : \"/projects/index.html\" , \"title\" : \"Projects\" } Note To override the default ranking you pass the orderby query parameter to sort projects by any of the attributes listed above, such as n_volunteers or n_tasks . The desc query parameter can also be added to sort in descending order. For example: GET /project/category/<short_name>/?orderby=n_tasks&desc=True Project Category Featured \u00b6 Endpoint: /project/category/featured/ Allowed methods : GET GET Gives you the list of featured projects. pagination : A pagination object for getting new featured projects from this category. active_cat : Active category. projects : List of projects belonging to this category. categories : List of available categories in this server. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"active_cat\" : { \"created\" : null , \"description\" : \"Featured projects\" , \"id\" : null , \"name\" : \"Featured\" , \"short_name\" : \"featured\" }, \"categories\" : [ { \"created\" : null , \"description\" : \"Featured projects\" , \"id\" : null , \"name\" : \"Featured\" , \"short_name\" : \"featured\" }, { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, ], \"pagination\" : { \"next\" : false , \"page\" : 1 , \"per_page\" : 20 , \"prev\" : false , \"total\" : 1 }, \"projects\" : [ { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Image pattern recognition\" , \"id\" : 1377 , \"info\" : { \"container\" : \"7\" , \"thumbnail\" : \"58.png\" }, \"last_activity\" : \"2 weeks ago\" , \"last_activity_raw\" : \"2017-01-31T09:18:28.450391\" , \"n_tasks\" : 169671 , \"n_volunteers\" : 17499 , \"name\" : \"Name\" , \"overall_progress\" : 80 , \"owner\" : \"John Doe\" , \"short_name\" : \"name\" , \"updated\" : \"2017-01-31T09:18:28.491496\" }, ], \"template\" : \"/projects/index.html\" , \"title\" : \"Projects\" } Note To override the default ranking, you pass the orderby query parameter to sort projects by any of the attributes listed above, such as n_volunteers or n_tasks . The desc query parameter can also be added to sort in descending order. For example: GET /project/category/featured/?orderby=n_tasks&desc=True Project Category Draft \u00b6 Endpoint: /project/category/draft/ Allowed methods : GET GET Gives you the list of featured projects. pagination : A pagination object for getting new draft projets from this category. active_cat : Active category. projects : List of projects belonging to this category. categories : List of available categories in this server. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"active_cat\" : { \"created\" : null , \"description\" : \"Draft projects\" , \"id\" : null , \"name\" : \"Draft\" , \"short_name\" : \"draft\" }, \"categories\" : [ { \"created\" : null , \"description\" : \"Draft projects\" , \"id\" : null , \"name\" : \"Draft\" , \"short_name\" : \"draft\" }, { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, ], \"pagination\" : { \"next\" : false , \"page\" : 1 , \"per_page\" : 20 , \"prev\" : false , \"total\" : 1 }, \"projects\" : [ { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Draft 1\" , \"id\" : 17 , \"info\" : { \"container\" : \"7\" , \"thumbnail\" : \"58.png\" }, \"last_activity\" : \"2 weeks ago\" , \"last_activity_raw\" : \"2017-01-31T09:18:28.450391\" , \"n_tasks\" : 0 , \"n_volunteers\" : 0 , \"name\" : \"Name\" , \"overall_progress\" : 0 , \"owner\" : \"John Doe\" , \"short_name\" : \"name\" , \"updated\" : \"2017-01-31T09:18:28.491496\" }, ], \"template\" : \"/projects/index.html\" , \"title\" : \"Projects\" } Note To override the default ranking, you pass the orderby query parameter to sort projects by any of the attributes listed above, such as n_volunteers or n_tasks . The desc query parameter can also be added to sort in descending order. For example: GET /project/category/draft/?orderby=n_tasks&desc=True","title":"Options"},{"location":"api/project/project/#project-creation","text":"Endpoint: /project/new Allowed methods : GET/POST GET Gives you the list of required fields in the form to create a project. template : The Jinja2 template that could be rendered. title : the title for the endpoint. form : The form fields that need to be sent for creating the project. It contains the CSRF token for validating the POST, as well as an errors field in case that something is wrong. Example output { \"errors\" : false , \"form\" : { \"csrf\" : \"token\" , \"description\" : null , \"errors\" : {}, \"long_description\" : null , \"name\" : null , \"short_name\" : null }, \"template\" : \"projects/new.html\" , \"title\" : \"Create a Project\" }","title":"Project creation"},{"location":"api/project/project/#project-blog-list","text":"Endpoint: /project/<short_name>/blog Allowed methods : GET GET Gives you the list of posted blogs by the given project short name. blogposts : All the blog posts for the given project. project : Info about the project. The project and owner fields will have more information if the owner of the project does the request, providing its private information like api_key, password keys, etc. Otherwise, it will be removed and only show public info. Example public output { \"blogposts\" : [ { \"body\" : \"Please, e-mail us to alejasan 4t ucm dot es if you find any bug. Thanks.\" , \"created\" : \"2014-05-14T14:25:04.899079\" , \"id\" : 1 , \"project_id\" : 1377 , \"title\" : \"We are working on the Alpha version.\" , \"user_id\" : 3927 }, ], \"n_completed_tasks\" : 137051 , \"n_task_runs\" : 1070561 , \"n_tasks\" : 169671 , \"n_volunteers\" : 17499 , \"overall_progress\" : 80 , \"owner\" : { \"created\" : \"2014-02-13T15:28:08.420187\" , \"fullname\" : \"John Doe\" , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"container\" }, \"n_answers\" : 32814 , \"name\" : \"johndoe\" , \"rank\" : 4 , \"registered_ago\" : \"3 years ago\" , \"score\" : 32814 }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Image pattern recognition\" , \"featured\" : true , \"id\" : 1 , \"info\" : { \"container\" : \"container\" , \"thumbnail\" : \"58.png\" }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"Dark Skies ISS\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"darkskies\" , \"updated\" : \"2017-01-31T09:18:28.491496\" }, \"template\" : \"projects/blog.html\" }","title":"Project blog list"},{"location":"api/project/project/#project-task-presenter-editor","text":"Endpoint: /project/<short_name>/tasks/taskpresentereditor Allowed methods : GET/POST GET This endpoint allows you to get the list of available templates for the current project. This will only happen when the project has an empty template, otherwise, it will load the template for you. template : The Jinja2 template that could be rendered. title : the title for the endpoint. presenters : List of available templates (in HTML format). The name of them without the \u2018.html\u2019 will be the argument for the endpoint. last_activit : last activity of the project. n_task_runs : number of task runs. n_tasks : number of tasks. n_volunteers : number of volunteers. owner : information about the owner. pro_features : which pro features are enabled. pro_features : which pro features are enabled. project : info about the project. status : status of the flash message. flash : flash message. Example output { \"flash\" : \"<strong>Note</strong> You will need to upload the tasks using the<a href=\\\"/project/asdf123/tasks/import\\\"> CSV importer</a> or download the project bundle and run the <strong>createTasks.py</strong> script in your computer\" , \"last_activity\" : null , \"n_completed_tasks\" : 0 , \"n_task_runs\" : 0 , \"n_tasks\" : 0 , \"n_volunteers\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"key\" , \"confirmation_email_sent\" : false , \"created\" : \"2016-09-15T11:30:42.660450\" , \"email_addr\" : \"prueba@prueba.com\" , \"fullname\" : \"prueba de json\" , \"id\" : 12030 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user\" }, \"n_answers\" : 5 , \"name\" : \"pruebaadfadfa\" , \"rank\" : 4411 , \"registered_ago\" : \"6 months ago\" , \"score\" : 5 , \"total\" : 11134 , \"valid_email\" : true }, \"presenters\" : [ \"projects/presenters/basic.html\" , \"projects/presenters/image.html\" , \"projects/presenters/sound.html\" , \"projects/presenters/video.html\" , \"projects/presenters/map.html\" , \"projects/presenters/pdf.html\" ], \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"allow_anonymous_contributors\" : true , \"category_id\" : 4 , \"contacted\" : false , \"contrib_button\" : \"draft\" , \"created\" : \"2017-01-11T09:37:43.613007\" , \"description\" : \"adsf\" , \"featured\" : false , \"id\" : 3 , \"info\" : { \"passwd_hash\" : null , \"task_presenter\" : \"\" }, \"long_description\" : \"adsf\" , \"n_blogposts\" : 0 , \"n_results\" : 0 , \"name\" : \"asdf1324\" , \"owner_id\" : 12030 , \"published\" : false , \"secret_key\" : \"73aee9df-be47-4e4c-8192-3a8bf0ab5161\" , \"short_name\" : \"asdf123\" , \"updated\" : \"2017-03-15T13:20:48.022328\" , \"webhook\" : \"\" }, \"status\" : \"info\" , \"template\" : \"projects/task_presenter_options.html\" , \"title\" : \"Project: asdf1324 &middot; Task Presenter Editor\" } If you want to preload the template from one of the available prenters, you have to pass the following argument: ?template=basic for the basic or ?template=iamge for the image template. Example output { \"errors\" : false , \"flash\" : \"Your code will be <em>automagically</em> rendered in the <strong>preview section</strong>. Click in the preview button!\" , \"form\" : { \"csrf\" : \"token\" , \"editor\" : \"<div class=\\\"row\\\">\\n <div class=\\\"col-md-12\\\">\\n <h1>Write here your HTML Task Presenter</h1>\\n </div>\\n</div>\\n<script type=\\\"text/javascript\\\">\\n(function() {\\n // Your JavaScript code\\n pybossa.taskLoaded(function(task, deferred){\\n // When the task is loaded, do....\\n });\\n\\n pybossa.presentTask(function(task, deferred){\\n // Present the current task to the user\\n // Load the task data into the HTML DOM\\n });\\n\\n pybossa.run('asdf123');\\n})();\\n</script>\" , \"errors\" : {}, \"id\" : 3 }, \"last_activity\" : null , \"n_completed_tasks\" : 0 , \"n_task_runs\" : 0 , \"n_tasks\" : 0 , \"n_volunteers\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"key\" , \"confirmation_email_sent\" : false , \"created\" : \"2016-09-15T11:30:42.660450\" , \"email_addr\" : \"prueba@prueba.com\" , \"fullname\" : \"prueba de json\" , \"id\" : 0 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user\" }, \"n_answers\" : 5 , \"name\" : \"pruebaadfadfa\" , \"rank\" : 4411 , \"registered_ago\" : \"6 months ago\" , \"score\" : 5 , \"total\" : 11134 , \"valid_email\" : true }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"allow_anonymous_contributors\" : true , \"category_id\" : 4 , \"contacted\" : false , \"contrib_button\" : \"draft\" , \"created\" : \"2017-01-11T09:37:43.613007\" , \"description\" : \"adsf\" , \"featured\" : false , \"id\" : 3 , \"info\" : { \"passwd_hash\" : null , \"task_presenter\" : \"\" }, \"long_description\" : \"adsf\" , \"n_blogposts\" : 0 , \"n_results\" : 0 , \"name\" : \"asdf1324\" , \"owner_id\" : 0 , \"published\" : false , \"secret_key\" : \"73aee9df-be47-4e4c-8192-3a8bf0ab5161\" , \"short_name\" : \"asdf123\" , \"updated\" : \"2017-03-15T13:20:48.022328\" , \"webhook\" : \"\" }, \"status\" : \"info\" , \"template\" : \"projects/task_presenter_editor.html\" , \"title\" : \"Project: asdf1324 &middot; Task Presenter Editor\" } Then, you can use that template, or if you prefer you can do a POST directly without that information. As in any other request involving a POST you will need the CSRFToken to validate it. POST To send a valid POST request, you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. You will have to POST the data fields found in the previous example, as it contains the information about the fields: specifically editor with the HTML/CSS/JS that you want to provide. If the post is successful, you will get the following output: Example output { \"flash\" : \"<i class=\\\"icon-ok\\\"></i> Task presenter added!\" , \"next\" : \"/project/asdf123/tasks/\" , \"status\" : \"success\" }","title":"Project task presenter editor"},{"location":"api/project/project/#project-delete","text":"Endpoint: /project/<short_name>/delete Allowed methods : GET/POST GET The GET endpoint allows you to get all the info about the project (see the Project endpoint as well) as well as the csrf token. As this endpoint does not have any form, the csrf token is not inside the form field. Example output { \"csrf\" : \"token\" , \"last_activity\" : null , \"n_tasks\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"key\" , \"confirmation_email_sent\" : false , \"created\" : \"2016-09-15T11:30:42.660450\" , \"email_addr\" : \"prueba@prueba.com\" , \"fullname\" : \"prueba de json\" , \"id\" : 0 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"0\" }, \"n_answers\" : 5 , \"name\" : \"pruebaadfadfa\" , \"rank\" : 4411 , \"registered_ago\" : \"6 months ago\" , \"score\" : 5 , \"total\" : 11134 , \"valid_email\" : true }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"allow_anonymous_contributors\" : true , \"category_id\" : 2 , \"contacted\" : false , \"created\" : \"2017-03-15T15:02:12.160810\" , \"description\" : \"asdf\" , \"featured\" : false , \"id\" : 3 , \"info\" : {}, \"long_description\" : \"asdf\" , \"name\" : \"algo\" , \"owner_id\" : 12030 , \"published\" : false , \"secret_key\" : \"c5a77943-f5a4-484a-86bb-d69559e80357\" , \"short_name\" : \"algo\" , \"updated\" : \"2017-03-15T15:02:12.160823\" , \"webhook\" : null }, \"template\" : \"/projects/delete.html\" , \"title\" : \"Project: algo &middot; Delete\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. Example output { \"flash\" : \"Project deleted!\" , \"next\" : \"/account/pruebaadfadfa/\" , \"status\" : \"success\" }","title":"Project delete"},{"location":"api/project/project/#project-update","text":"Endpoint: /project/<short_name>/update Allowed methods : GET/POST GET It returns a JSON object with the following information: form : the form fields that need to be sent for updating the project. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. upload_form : the form fields that need to be sent for updating the project\u2019s avatar. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. title : The title for the view. Example output { \"form\" : { \"allow_anonymous_contributors\" : false , \"category_id\" : 2 , \"csrf\" : \"token\" , \"description\" : \"description\" , \"errors\" : {}, \"id\" : 3117 , \"long_description\" : \"long description\" , \"name\" : \"name\" , \"password\" : null , \"protect\" : false , \"short_name\" : \"slug\" , \"webhook\" : null }, \"last_activity\" : null , \"n_completed_tasks\" : 0 , \"n_task_runs\" : 0 , \"n_tasks\" : 2 , \"n_volunteers\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"key\" , \"confirmation_email_sent\" : false , \"created\" : \"2012-06-06T06:27:18.760254\" , \"email_addr\" : \"email.com\" , \"fullname\" : \"John Doe\" , \"id\" : 0 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user\" , }, \"n_answers\" : 2414 , \"name\" : \"johndoe\" , \"rank\" : 69 , \"registered_ago\" : \"4 years ago\" , \"score\" : 2414 , \"total\" : 11134 , \"valid_email\" : false }, \"pro_features\" : { \"auditlog_enabled\" : true , \"autoimporter_enabled\" : true , \"webhooks_enabled\" : true }, \"project\" : { \"allow_anonymous_contributors\" : false , \"category_id\" : 2 , \"contacted\" : false , \"contrib_button\" : \"can_contribute\" , \"created\" : \"2015-06-29T08:23:14.201331\" , \"description\" : \"description\" , \"featured\" : false , \"id\" : 0 , \"info\" : { \"container\" : \"user\" , \"passwd_hash\" : null , \"task_presenter\" : \"HTML+CSS+JS, \" t humb na il \": \" t humb na il.p n g \" }, \" lo n g_descrip t io n \": \" lo n g descrip t io n \", \" n _blogpos ts \": 0, \" n _resul ts \": 0, \" na me \": \" na me \", \" ow ner _id \": 0, \" published \": true, \" secre t _key \": \" key \", \" shor t _ na me \": \" slug \", \" upda te d \": \" 2017-03-16 T 14 : 50 : 45.055331 \", \" webhook \": null }, \" te mpla te \": \" /projec ts /upda te .h t ml \", \" t i tle \": \" Projec t : na me &middo t ; Upda te \", \" upload_ f orm \": { \" ava tar \": null, \" csr f \": \" t oke n \", \" errors \": {}, \" id \": null, \" x 1 \": 0, \" x 2 \": 0, \" y 1 \": 0, \" y 2 \": 0 } } POST To send a valid POST request, you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken.\u201d As this endpoint supports two different forms, you must specify which form are you targeting adding an extra key: btn . The options for this key are: Upload : to update the upload_form . The other one does not need this extra key. Note Be sure to respect the Uppercase in the first letter. Otherwise, it will fail. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was successful. form : the form fields with the sent information. It contains the csrf token for validating the post, as well as an errors field in the case that something is wrong. Example output { \"flash\" : \"Your profile has been updated!\" , \"next\" : \"/account/pruebaadfadfa/update\" , \"status\" : \"success\" } If there\u2019s an error in the form fields, you will get them in the form.errors key: { \"flash\" : \"Please correct the errors\" , \"form\" : { \"allow_anonymous_contributors\" : false , \"category_id\" : 2 , \"csrf\" : \"token\" , \"description\" : \"description\" , \"errors\" : { \"short_name\" : [ \"This field is required.\" ] }, \"id\" : 3117 , \"long_description\" : \"new description\" , \"name\" : \"new name\" , \"password\" : null , \"protect\" : true , \"short_name\" : \"\" , \"webhook\" : null }, ... } Note For updating the avatar is very important to not set the Content-Type . If you are using jQuery, set it to False, so the file is handled properly. To still recieve a JSON response you can add the response_format=json query paramater to your request. The (x1,x2,y1,y2) are the coordinates for cutting the image and create the avatar. (x1,y1) are the offset left of the cropped area and the offset top of the cropped area respectively; and (x2,y2) are the width and height of the crop. And don\u2019t forget to add an extra key to the form-data: \u2018btn\u2019 with a value Upload to select this form.","title":"Project update"},{"location":"api/project/project/#project-reset-secret-key","text":"Endpoint: /project/<short_name>/resetsecretkey Allowed methods : POST Resets the secret key of a project. To send a valid POST request, you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d retrieved from the GET endpoint /project/<short_name>/update . Example output { \"flash\" : \"New secret key generated\" , \"next\" : \"/project/flickrproject2/update\" , \"status\" : \"success\" }","title":"Project reset secret key"},{"location":"api/project/project/#project-tasks-browse","text":"Endpoint: /project/<short_name>/tasks/browse/ Endpoint: /project/<short_name>/tasks/browse/<int:page> Allowed methods : GET n_completed_tasks : number of completed tasks n_tasks : number of tasks n_volunteers : number of volunteers overall_progress : overall progress owner : project owner pagination : pagination information pro_features : pro features enabled or not project : project information tasks : tasks, paginated template : the Jinja2 template that should be rendered in case of text/html. title : the title for the endpoint. Example output { \"n_completed_tasks\" : 0 , \"n_tasks\" : 1 , \"n_volunteers\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"created\" : \"2017-04-17T23:56:22.892222\" , \"fullname\" : \"John Doe\" , \"info\" : {}, \"locale\" : null , \"n_answers\" : 0 , \"name\" : \"johndoe\" , \"rank\" : null , \"registered_ago\" : \"3 hours ago\" , \"score\" : null }, \"pagination\" : { \"next\" : false , \"page\" : 1 , \"per_page\" : 10 , \"prev\" : false , \"total\" : 1 }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"created\" : \"2017-04-17T23:56:23.416754\" , \"description\" : \"Description\" , \"featured\" : false , \"id\" : 1 , \"info\" : {}, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"Sample Project\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"sampleapp\" , \"updated\" : \"2017-04-17T23:56:23.589652\" }, \"tasks\" : [ { \"id\" : 1 , \"n_answers\" : 10 , \"n_task_runs\" : 0 , \"pct_status\" : 0.0 } ], \"template\" : \"/projects/tasks_browse.html\" , \"title\" : \"Project: Sample Project &middot; Tasks\" }","title":"Project tasks browse"},{"location":"api/project/project/#project-tasks-import","text":"Endpoint: /project/<short_name>/tasks/import Allowed methods : GET/POST GET It returns a JSON object with the following information: available_importers : A list of available importers for the server. To use one of the items, you have to add to the endpoint the following argument: ?type=name where the name is the string that you will find in the list of importers in the format: projects/tasks/name.html . template : The Jinja2 template that could be rendered. title : The title for the view. Example output { \"available_importers\" : [ \"projects/tasks/epicollect.html\" , \"projects/tasks/csv.html\" , \"projects/tasks/s3.html\" , \"projects/tasks/youtube.html\" , \"projects/tasks/gdocs.html\" , \"projects/tasks/dropbox.html\" , \"projects/tasks/iiif.html\" ], \"form\" : null , \"loading_text\" : \"Importing tasks, this may take a while, wait...\" , \"n_completed_tasks\" : 0 , \"n_tasks\" : 5 , \"n_volunteers\" : 0 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"key\" , \"confirmation_email_sent\" : false , \"created\" : \"2012-06-06T06:27:18.760254\" , \"email_addr\" : \"johndoe@gmail.com\" , \"fullname\" : \"John Doe\" , \"id\" : 0 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user\" , }, \"n_answers\" : 2414 , \"name\" : \"johndoe\" , \"rank\" : 69 , \"registered_ago\" : \"4 years ago\" , \"score\" : 2414 , \"total\" : 11134 , \"valid_email\" : false }, \"pro_features\" : { \"auditlog_enabled\" : true , \"autoimporter_enabled\" : true , \"webhooks_enabled\" : true }, \"project\" : { \"allow_anonymous_contributors\" : false , \"category_id\" : 2 , \"contacted\" : false , \"contrib_button\" : \"can_contribute\" , \"created\" : \"2015-06-29T08:23:14.201331\" , \"description\" : \"old\" , \"featured\" : false , \"id\" : 3117 , \"info\" : { \"container\" : \"user\" , \"passwd_hash\" : null , \"task_presenter\" : \"HTML+CSS+JS\" \"thumbnail\" : \"avatar.png\" }, \"long_description\" : \"algo\" , \"n_blogposts\" : 0 , \"n_results\" : 0 , \"name\" : \"name\" , \"owner_id\" : 3 , \"published\" : true , \"secret_key\" : \"f\" , \"short_name\" : \"name\" , \"updated\" : \"2017-03-17T09:15:46.867215\" , \"webhook\" : null }, \"target\" : \"project.import_task\" , \"task_tmpls\" : [ \"projects/tasks/gdocs-sound.html\" , \"projects/tasks/gdocs-map.html\" , \"projects/tasks/gdocs-image.html\" , \"projects/tasks/gdocs-video.html\" , \"projects/tasks/gdocs-pdf.html\" ], \"template\" : \"/projects/task_import_options.html\" , \"title\" : \"Project: bevan &middot; Import Tasks\" } Therefore, if you want to import tasks from a CSV link, you will have to do the following GET: 1 GET server/project/<short_name>/tasks/import?type=csv That query will return the same output as before, but instead of the available_importers, you will get the the form fields and CSRF token for that importer. POST To send a valid POST request, you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken.\u201d It returns a JSON object with the following information: flash : A success message, or error indicating if the request was successful. Example output { \"flash\" : \"Tasks imported\" , \"next\" : \"/project/<short_name>/tasks/\" , \"status\" : \"success\" }","title":"Project tasks import"},{"location":"api/project/project/#project-tutorial","text":"Endpoint: /project/<short_name>/tutorial GET It returns a JSON object with the following information: owner : owner information project : project information template : The Jinja2 template that could be rendered. title : The title for the view. Example output { \"owner\" : { \"created\" : \"2014-02-13T15:28:08.420187\" , \"fullname\" : \"John Doe\" , \"info\" : { \"avatar\" : \"1410769844.15_avatar.png\" , \"avatar_url\" : null , \"container\" : \"user_3927\" , \"extra\" : null }, \"locale\" : null , \"n_answers\" : 43565 , \"name\" : \"jdoe\" , \"rank\" : 3 , \"registered_ago\" : \"3 years ago\" , \"score\" : 43565 }, \"project\" : { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Image pattern recognition\" , \"featured\" : true , \"id\" : 1377 , \"info\" : { \"container\" : \"user_3927\" , \"thumbnail\" : \"app_1377_thumbnail_1410772569.58.png\" , \"thumbnail_url\" : null }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"myproject\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"johndoeproject\" , \"updated\" : \"2017-03-02T21:00:33.965587\" }, \"template\" : \"/projects/tutorial.html\" , \"title\" : \"Project: myproject\" }","title":"Project tutorial"},{"location":"api/project/project/#project-shortname","text":"Endpoint: /project/<short_name>/ Allowed methods : GET GET Shows project information and owner information. If you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself. last_activity : Last activity on the project. n_completed_tasks : Number of completed tasks. n_task_runs : Number of task runs. n_tasks : Number of tasks. n_volunteers : Number of volunteers. overall_progress : Overall progress. owner : Owner user information. pro_features : Enabled pro features for the project. project : Project information template : Jinja2 template. title : the title for the endpoint. Example output for logged in user JohnDoe: { \"last_activity\" : \"2015-01-21T12:01:41.209270\" , \"n_completed_tasks\" : 0 , \"n_task_runs\" : 3 , \"n_tasks\" : 8 , \"n_volunteers\" : 1 , \"overall_progress\" : 0 , \"owner\" : { \"admin\" : false , \"api_key\" : \"akjhfd85-8afd6-48af-f7afg-kjhsfdlkjhf1\" , \"confirmation_email_sent\" : false , \"created\" : \"2014-08-11T08:59:32.079599\" , \"email_addr\" : \"johndoe@johndoe.com\" , \"fullname\" : \"John Doe\" , \"id\" : 1234 , \"info\" : { \"container\" : \"user_1234\" }, \"n_answers\" : 56 , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"registered_ago\" : \"2 years ago\" , \"score\" : 56 , \"total\" : 11093 , \"valid_email\" : true }, \"pro_features\" : { \"auditlog_enabled\" : true , \"autoimporter_enabled\" : true , \"webhooks_enabled\" : true }, \"project\" : { \"allow_anonymous_contributors\" : true , \"category_id\" : 2 , \"contacted\" : true , \"contrib_button\" : \"can_contribute\" , \"created\" : \"2015-01-21T11:59:36.519541\" , \"description\" : \"flickr678\" , \"featured\" : false , \"id\" : 4567 , \"info\" : { \"task_presenter\" : \"<div> .... \" }, \"long_description\" : \"flickr678\\r\\n\" , \"n_blogposts\" : 0 , \"n_results\" : 0 , \"name\" : \"flickr678\" , \"owner_id\" : 9876 , \"published\" : true , \"secret_key\" : \"veryverysecretkey\" , \"short_name\" : \"flickr678\" , \"updated\" : \"2016-04-13T08:07:38.897626\" , \"webhook\" : null }, \"template\" : \"/projects/project.html\" , \"title\" : \"Project: flickr678\" } Anonymous and other user output: { \"last_activity\" : \"2015-01-21T12:01:41.209270\" , \"n_completed_tasks\" : 0 , \"n_task_runs\" : 3 , \"n_tasks\" : 8 , \"n_volunteers\" : 1 , \"overall_progress\" : 0 , \"owner\" : { \"created\" : \"2014-08-11T08:59:32.079599\" , \"fullname\" : \"John Doe\" , \"info\" : { \"avatar\" : null , \"container\" : \"user_4953\" }, \"n_answers\" : 56 , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"registered_ago\" : \"2 years ago\" , \"score\" : 56 }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"created\" : \"2015-01-21T11:59:36.519541\" , \"description\" : \"flickr678\" , \"id\" : 4567 , \"info\" : { \"container\" : null , \"thumbnail\" : null }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"flickr678\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"flickr678\" , \"updated\" : \"2016-04-13T08:07:38.897626\" }, \"template\" : \"/projects/project.html\" , \"title\" : \"Project: flickr678\" }","title":"Project shortname"},{"location":"api/project/project/#project-settings","text":"Endpoint: /project/<short_name>/settings Allowed methods : GET GET Shows project information and owner information. Only works for authenticated users for their projects (or admins). Anonymous users will get a 302 to the login page. Logged in users with access rights will get a 403 when it\u2019s not their project. last_activity : Last activity on the project. n_completed_tasks : Number of completed tasks. n_task_runs : Number of task runs. n_tasks : Number of tasks. n_volunteers : Number of volunteers. overall_progress : Overall progress. owner : Owner user information. pro_features : Enabled pro features for the project. project : Project information template : Jinja2 template. title : the title for the endpoint. The example output matches /project/<short_name>/","title":"Project settings"},{"location":"api/project/project/#project-results","text":"Endpoint: /project/<short_name>/results Allowed methods : GET GET Shows information about a project results template. If the logged in user is the owner of the project you will get a more detailed owner information and project information. last_activity : Last activity on the project. n_completed_tasks : Number of completed tasks. n_results : Number of results n_task_runs : Number of task runs. n_tasks : Number of tasks. n_volunteers : Number of volunteers. overall_progress : Overall progress. owner : Owner user information. pro_features : Enabled pro features for the project. project : Project information template : Jinja2 template for results title : the title for the endpoint. Example output For an anonymous user or when you are not the project owner: { \"last_activity\" : \"2015-01-21T12:01:41.209270\" , \"n_completed_tasks\" : 0 , \"n_results\" : 0 , \"n_task_runs\" : 3 , \"n_tasks\" : 8 , \"n_volunteers\" : 1 , \"overall_progress\" : 0 , \"owner\" : { \"created\" : \"2014-08-11T08:59:32.079599\" , \"fullname\" : \"John\" , \"info\" : { \"avatar\" : null , \"container\" : \"user_4953\" }, \"n_answers\" : 56 , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"registered_ago\" : \"2 years ago\" , \"score\" : 56 }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"webhooks_enabled\" : false }, \"project\" : { \"created\" : \"2015-01-21T11:59:36.519541\" , \"description\" : \"flickr678\" , \"featured\" : false , \"id\" : 2417 , \"info\" : { \"container\" : null , \"thumbnail\" : null }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"flickr678\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"flickr678\" , \"updated\" : \"2016-04-13T08:07:38.897626\" }, \"template\" : \"/projects/results.html\" , \"title\" : \"Project: flickr678\" }","title":"Project results"},{"location":"api/project/project/#project-stats","text":"Endpoint: /project/<short_name>/stats Allowed methods : GET GET Shows project statistics if available. If you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself. avg_contrib_time : Average contribution time (NOT existing when no statistics there!). projectStats : Project statistics (NOT existing when no statistics there!). userStats : User statistics (NOT existing when no statistics there!). n_completed_tasks : Number of completed tasks. n_tasks : Number of tasks. n_volunteers : Number of volunteers. overall_progress : Progress (0..100). owner : Owner user information pro_features : Enabled pro features for the project. project : Project information template : Jinja2 template. title : the title for the endpoint. Example output Statistics are existing in this output: { \"avg_contrib_time\" : 0 , \"n_completed_tasks\" : 2 , \"n_tasks\" : 2 , \"n_volunteers\" : 59 , \"overall_progress\" : 100 , \"owner\" : { \"created\" : \"2012-06-06T06:27:18.760254\" , \"fullname\" : \"Daniel Lombra\u00f1a Gonz\u00e1lez\" , \"info\" : { \"avatar\" : \"1422360933.8_avatar.png\" , \"container\" : \"user_3\" }, \"n_answers\" : 2998 , \"name\" : \"teleyinex\" , \"rank\" : 66 , \"registered_ago\" : \"4 years ago\" , \"score\" : 2998 }, \"pro_features\" : { \"auditlog_enabled\" : false , \"autoimporter_enabled\" : false , \"better_stats_enabled\" : true , \"webhooks_enabled\" : false }, \"project\" : { \"created\" : \"2013-01-10T19:58:55.454015\" , \"description\" : \"Facial expressions that convey feelings\" , \"featured\" : true , \"id\" : 253 , \"info\" : { \"container\" : \"user_3\" , \"thumbnail\" : \"project_253_thumbnail_1460620575.png\" }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"The Face We Make\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"thefacewemake\" , \"updated\" : \"2016-04-14T07:56:16.114006\" }, \"projectStats\" : \"{\\\"userAuthStats\\\": {\\\"top5\\\": [], \\\"values\\\": [], \\\"label\\\": \\\"Authenticated Users\\\"} ...\" , \"template\" : \"/projects/stats.html\" , \"title\" : \"Project: The Face We Make &middot; Statistics\" , \"userStats\" : { \"anonymous\" : { \"pct_taskruns\" : 0 , \"taskruns\" : 0 , \"top5\" : [], \"users\" : 0 }, \"authenticated\" : { \"pct_taskruns\" : 0 , \"taskruns\" : 0 , \"top5\" : [], \"users\" : 0 }, \"geo\" : false } }","title":"Project stats"},{"location":"api/project/project/#project-tasks","text":"Endpoint: /project/<short_name>/tasks Allowed methods : GET GET Shows project tasks. If you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself. autoimporter_enabled : If autoimporter is enabled. last_activity : Last activity. n_completed_tasks : Number of completed tasks. n_task_runs : Number of task runs. n_tasks : Number of tasks. n_volunteers : Number of volunteers. overall_progress : Progress (0..100). owner : Owner user information pro_features : Enabled pro features for the project. project : Project information. template : Jinja2 template. title : the title for the endpoint. Example output for another project where you are not the owner: { \"autoimporter_enabled\" : true , \"last_activity\" : \"2017-03-02T21:00:33.627277\" , \"n_completed_tasks\" : 184839 , \"n_task_runs\" : 1282945 , \"n_tasks\" : 193090 , \"n_volunteers\" : 20016 , \"overall_progress\" : 95 , \"owner\" : { \"created\" : \"2014-02-13T15:28:08.420187\" , \"fullname\" : \"John Smith\" , \"info\" : { \"avatar\" : \"1410769844.15_avatar.png\" , \"container\" : \"user_3927\" , \"extra\" : null }, \"locale\" : null , \"n_answers\" : 43565 , \"name\" : \"pmisson\" , \"rank\" : 3 , \"registered_ago\" : \"3 years ago\" , \"score\" : 43565 }, \"pro_features\" : { \"auditlog_enabled\" : true , \"autoimporter_enabled\" : true , \"webhooks_enabled\" : true }, \"project\" : { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Image pattern recognition\" , \"featured\" : true , \"id\" : 1377 , \"info\" : { \"container\" : \"user_3927\" , \"thumbnail\" : \"app_1377_thumbnail_1410772569.58.png\" }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"Cool Project\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"coolproject\" , \"updated\" : \"2017-03-02T21:00:33.965587\" }, \"template\" : \"/projects/tasks.html\" , \"title\" : \"Project: Cool project\" }","title":"Project tasks"},{"location":"api/project/project/#project-task-id","text":"Endpoint: /project/<short_name>/task/<int:task_id> Allowed methods : GET GET Shows a project task based on id. If you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself. owner : Owner user information project : Project information. template : Jinja2 template of the task HTML template. title : the title for the endpoint. Example output for another project where you are not the owner: { \"owner\" : { \"created\" : \"2014-08-11T08:59:32.079599\" , \"fullname\" : \"John Doe\" , \"info\" : { \"avatar\" : \"1458638093.9_avatar.png\" , \"container\" : \"user_4953\" , \"extra\" : null }, \"locale\" : null , \"n_answers\" : 257 , \"name\" : \"JohnD\" , \"rank\" : 840 , \"registered_ago\" : \"2 years ago\" , \"score\" : 257 }, \"project\" : { \"created\" : \"2015-01-21T11:59:36.519541\" , \"description\" : \"flickr678\" , \"featured\" : false , \"id\" : 2417 , \"info\" : { \"container\" : null , \"thumbnail\" : null }, \"last_activity\" : null , \"last_activity_raw\" : null , \"n_tasks\" : null , \"n_volunteers\" : null , \"name\" : \"flickr678\" , \"overall_progress\" : null , \"owner\" : null , \"short_name\" : \"flickr678\" , \"updated\" : \"2017-03-22T13:03:55.496660\" }, \"template\" : \"/projects/presenter.html\" , \"title\" : \"Project: flickr678 &middot; Contribute\" }","title":"Project task id"},{"location":"api/project/project/#project-category","text":"Endpoint: /project/category/<short_name>/ Allowed methods : GET GET Gives you the list of projects in a category. pagination : A pagination object for getting projects from this category. active_cat : Active category. projects : List of projects belonging to this category. categories : List of available categories in this server. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"active_cat\" : { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, \"categories\" : [ { \"created\" : null , \"description\" : \"Featured projects\" , \"id\" : null , \"name\" : \"Featured\" , \"short_name\" : \"featured\" }, { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, ], \"pagination\" : { \"next\" : false , \"page\" : 1 , \"per_page\" : 20 , \"prev\" : false , \"total\" : 1 }, \"projects\" : [ { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Image pattern recognition\" , \"id\" : 1377 , \"info\" : { \"container\" : \"7\" , \"thumbnail\" : \"58.png\" }, \"last_activity\" : \"2 weeks ago\" , \"last_activity_raw\" : \"2017-01-31T09:18:28.450391\" , \"n_tasks\" : 169671 , \"n_volunteers\" : 17499 , \"name\" : \"Name\" , \"overall_progress\" : 80 , \"owner\" : \"John Doe\" , \"short_name\" : \"name\" , \"updated\" : \"2017-01-31T09:18:28.491496\" }, ], \"template\" : \"/projects/index.html\" , \"title\" : \"Projects\" } Note To override the default ranking you pass the orderby query parameter to sort projects by any of the attributes listed above, such as n_volunteers or n_tasks . The desc query parameter can also be added to sort in descending order. For example: GET /project/category/<short_name>/?orderby=n_tasks&desc=True","title":"Project Category"},{"location":"api/project/project/#project-category-featured","text":"Endpoint: /project/category/featured/ Allowed methods : GET GET Gives you the list of featured projects. pagination : A pagination object for getting new featured projects from this category. active_cat : Active category. projects : List of projects belonging to this category. categories : List of available categories in this server. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"active_cat\" : { \"created\" : null , \"description\" : \"Featured projects\" , \"id\" : null , \"name\" : \"Featured\" , \"short_name\" : \"featured\" }, \"categories\" : [ { \"created\" : null , \"description\" : \"Featured projects\" , \"id\" : null , \"name\" : \"Featured\" , \"short_name\" : \"featured\" }, { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, ], \"pagination\" : { \"next\" : false , \"page\" : 1 , \"per_page\" : 20 , \"prev\" : false , \"total\" : 1 }, \"projects\" : [ { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Image pattern recognition\" , \"id\" : 1377 , \"info\" : { \"container\" : \"7\" , \"thumbnail\" : \"58.png\" }, \"last_activity\" : \"2 weeks ago\" , \"last_activity_raw\" : \"2017-01-31T09:18:28.450391\" , \"n_tasks\" : 169671 , \"n_volunteers\" : 17499 , \"name\" : \"Name\" , \"overall_progress\" : 80 , \"owner\" : \"John Doe\" , \"short_name\" : \"name\" , \"updated\" : \"2017-01-31T09:18:28.491496\" }, ], \"template\" : \"/projects/index.html\" , \"title\" : \"Projects\" } Note To override the default ranking, you pass the orderby query parameter to sort projects by any of the attributes listed above, such as n_volunteers or n_tasks . The desc query parameter can also be added to sort in descending order. For example: GET /project/category/featured/?orderby=n_tasks&desc=True","title":"Project Category Featured"},{"location":"api/project/project/#project-category-draft","text":"Endpoint: /project/category/draft/ Allowed methods : GET GET Gives you the list of featured projects. pagination : A pagination object for getting new draft projets from this category. active_cat : Active category. projects : List of projects belonging to this category. categories : List of available categories in this server. template : The Jinja2 template that could be rendered. title : the title for the endpoint. Example output { \"active_cat\" : { \"created\" : null , \"description\" : \"Draft projects\" , \"id\" : null , \"name\" : \"Draft\" , \"short_name\" : \"draft\" }, \"categories\" : [ { \"created\" : null , \"description\" : \"Draft projects\" , \"id\" : null , \"name\" : \"Draft\" , \"short_name\" : \"draft\" }, { \"created\" : null , \"description\" : \"Social projects\" , \"id\" : 2 , \"name\" : \"Social\" , \"short_name\" : \"social\" }, { \"created\" : \"2013-06-18T11:13:44.789149\" , \"description\" : \"Art projects\" , \"id\" : 3 , \"name\" : \"Art\" , \"short_name\" : \"art\" }, ], \"pagination\" : { \"next\" : false , \"page\" : 1 , \"per_page\" : 20 , \"prev\" : false , \"total\" : 1 }, \"projects\" : [ { \"created\" : \"2014-02-22T15:09:23.691811\" , \"description\" : \"Draft 1\" , \"id\" : 17 , \"info\" : { \"container\" : \"7\" , \"thumbnail\" : \"58.png\" }, \"last_activity\" : \"2 weeks ago\" , \"last_activity_raw\" : \"2017-01-31T09:18:28.450391\" , \"n_tasks\" : 0 , \"n_volunteers\" : 0 , \"name\" : \"Name\" , \"overall_progress\" : 0 , \"owner\" : \"John Doe\" , \"short_name\" : \"name\" , \"updated\" : \"2017-01-31T09:18:28.491496\" }, ], \"template\" : \"/projects/index.html\" , \"title\" : \"Projects\" } Note To override the default ranking, you pass the orderby query parameter to sort projects by any of the attributes listed above, such as n_volunteers or n_tasks . The desc query parameter can also be added to sort in descending order. For example: GET /project/category/draft/?orderby=n_tasks&desc=True","title":"Project Category Draft"},{"location":"api/project/statistics/","text":"You can list project statistics, such as number of tasks, volunteers and overall progress via: 1 GET /api/projectstats To filter this list, for example, by project ID: 1 GET /api/projectstats?project_id=[1,2,3] To include additional hour stats, day stats and user stats for the past 2 weeks, append full=1 to the query, for example: 1 GET /api/projectstats?full=1 These additional statistics will be included in the info field of each object returned. Tip These statistics can also be retrieved by adding the argument stats=True to requests made to the /api/project endpoint. In this case they will be added against a stats key returned with each Project. User progress \u00b6 You can know how many tasks a user has completed for a given project by accessing the following endpoint: http://server.com/api/project/<id>/userprogress or http://server.com/api/project/<short_name>/userprogress The user needs to be authenticated to get the value, otherwise it will use the anonymous IP to get the value. If you are using external_uid for sending task runs, you can get the progress using the following parameter: http://server.com/api/project/<id>/userprogress?external_uid=EXTERNAL_UID","title":"Statistics"},{"location":"api/project/statistics/#user-progress","text":"You can know how many tasks a user has completed for a given project by accessing the following endpoint: http://server.com/api/project/<id>/userprogress or http://server.com/api/project/<short_name>/userprogress The user needs to be authenticated to get the value, otherwise it will use the anonymous IP to get the value. If you are using external_uid for sending task runs, you can get the progress using the following parameter: http://server.com/api/project/<id>/userprogress?external_uid=EXTERNAL_UID","title":"User progress"},{"location":"api/task/external/","text":"Using your user database \u00b6 Since version v2.3.0 PYBOSSA supports external User IDs. This means that you can efficiently use your database of users without having to register them in the PYBOSSA server. As a benefit, you will be able to track your users within the PYBOSSA server providing a straightforward and easy experience for them. A typical case for this would be for example a native phone app (Android, iOS or Windows). Usually, phone apps have their user database. With this in mind, you can add a crowdsourcing feature to your phone app by just using PYBOSSA in the following way. First, create a project. When you build a project in PYBOSSA, the system will create for you a secret key . This secret key will be used by your phone app to authenticate all the requests and avoid other users to send data to your project via external user API. Note We highly recommend using SSL on your server to secure all the process. You can use Let\u2019s Encrypt certificates for free. Check their documentation. Now your phone app will have to authenticate to the server to get tasks and post task runs. To do it, all you have to do is to create an HTTP Request with an Authorization Header like this: 1 2 HEADERS Authorization: project.secret_key GET https://crowdsourced.micropasts.org/api/auth/project/short_name/token That request will return a JWT token for you. With that token, you will be able to start requesting tasks for your user base passing an authorization header again. Imagine a user from your database is identified like this: \u20181xa\u2019: 1 2 HEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ GET https://crowdsourced.micropasts.org/api/{project.id}/newtask?external_uid=1xa That will return a task for the user ID 1xa that belongs to your database but not to PYBOSSA. Then, once the user has completed the task you will be able to submit it like this: 1 2 HEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ POST https://crowdsourced.micropasts.org/api/taskrun?external_uid=1xa Note The TaskRun object needs to have the external_uid field filled with 1xa. As simple as that!","title":"External user ID"},{"location":"api/task/external/#using-your-user-database","text":"Since version v2.3.0 PYBOSSA supports external User IDs. This means that you can efficiently use your database of users without having to register them in the PYBOSSA server. As a benefit, you will be able to track your users within the PYBOSSA server providing a straightforward and easy experience for them. A typical case for this would be for example a native phone app (Android, iOS or Windows). Usually, phone apps have their user database. With this in mind, you can add a crowdsourcing feature to your phone app by just using PYBOSSA in the following way. First, create a project. When you build a project in PYBOSSA, the system will create for you a secret key . This secret key will be used by your phone app to authenticate all the requests and avoid other users to send data to your project via external user API. Note We highly recommend using SSL on your server to secure all the process. You can use Let\u2019s Encrypt certificates for free. Check their documentation. Now your phone app will have to authenticate to the server to get tasks and post task runs. To do it, all you have to do is to create an HTTP Request with an Authorization Header like this: 1 2 HEADERS Authorization: project.secret_key GET https://crowdsourced.micropasts.org/api/auth/project/short_name/token That request will return a JWT token for you. With that token, you will be able to start requesting tasks for your user base passing an authorization header again. Imagine a user from your database is identified like this: \u20181xa\u2019: 1 2 HEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ GET https://crowdsourced.micropasts.org/api/{project.id}/newtask?external_uid=1xa That will return a task for the user ID 1xa that belongs to your database but not to PYBOSSA. Then, once the user has completed the task you will be able to submit it like this: 1 2 HEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ POST https://crowdsourced.micropasts.org/api/taskrun?external_uid=1xa Note The TaskRun object needs to have the external_uid field filled with 1xa. As simple as that!","title":"Using your user database"},{"location":"api/task/favorites/","text":"Authenticated users can mark a task as a favorite. This is useful for users when they want to see all the tasks they have done to remember them. For example, a user can mark as a favorite a picture that\u2019s beautiful and that he/she has characterized as favorited. For serving this purpose, PYBOSSA provides the following API endpoint: 1 GET /api/favorites If the user is authenticated, it will return all the tasks the user has marked as favorited. To add a task as a favorite, a POST should be done with a payload of {\u2018task_id\u2019: Task.id}: 1 POST /api/favorites For removing one task from the favorites, do a DELETE: 1 DEL /api/favorites/task.id Be sure to have always the user authenticated. Otherwise, the user will not be able to see it.","title":"Favorites"},{"location":"api/task/newtask/","text":"You can request a new task for the current user (anonymous or authenticated) by: 1 GET https://crowdsourced.micropasts.org/api/{project.id}/newtask This will return a domain Task object in JSON format if there is a task available for the user. Otherwise, it will return None . You can also use limit to get more than 1 task for the user like this: 1 GET https://crowdsourced.micropasts.org/api/{project.id}/newtask?limit=100 That query will return 100 tasks for the user. Note That\u2019s the maximum of tasks that a user can get at once. If you pass an argument of 200, PYBOSSA will convert it to 100. You can also, use offset to get the next tasks, if you want, allowing you to preload: 1 GET https://crowdsourced.micropasts.org/api/{project.id}/newtask?offset=1 That query will return the next task for the user, once it solves the previous task. Both arguments, limit and offset can be used together: 1 GET https://crowdsourced.micropasts.org/api/{project.id}/newtask?limit=2offset=2 That will load the next two tasks for the user. Also, you can request the tasks to be sorted by a Task attribute (like ID, created, etc.) using the following arguments: orderby and desc to sort them in descending order: 1 GET https://crowdsourced.micropasts.org/api/{project.id}/newtask?orderby=priority_0&desc=true That query will return the tasks order by priority in descending order, in other words, it will return first the tasks with higher priority.","title":"Requesting a task"},{"location":"api/task/participated/","text":"For the Tasks endpoint, you can also do something else, which could be pretty handy for PYBOSSA projects that are built using only Javascript (Single Page Applications) and do not want to use the /new task endpoint. You can use any of the previous filters for the /api/task endpoint and add the following argument: participated=1 to remove from the results, the tasks that the user has participated in. In this way, you will be entirely in charge of how the tasks are presented to your users. You will design how they will be delivered. This endpoint now accepts as well the external_uid parameter, as by default it identifies authenticated users, as well as anonymous users. If you are using the external UID, include it.","title":"Excluding contributed tasks"},{"location":"api/taskrun/intro/","text":"Intro \u00b6 TaskRuns are exactly as other domain objects with two exceptions: You cannot create a taskrun without filling a few requirements. You can upload files as part of it. Creating a TaskRun \u00b6 For creating a TaskRun a project needs to be published. If the project only allows authenticated contributions, PYBOSSA will reject the creation of TaskRuns via the API. Then, in order to save a TaskRun you, your user, needs to request it first. This is mandatory to avoid scripts creating hundreds of task runs in a few minutes. Requesting the task \u00b6 In order to request a task, all you have to do is basically an API call to any of the following endpoints: http://server/api/project/id/newtask or http://server/project/short_name/task/ID In the first case, you will be able to send a TaskRun only for the task that has been returned for your user via the newtask endpoint. In the second one, you are in charge to supply the task.ID. Attaching a file to the TaskRun \u00b6 You can create a TaskRun with an image, video, PDF, audio (or any file) by doing a POST request with the following Content-Type: multipart/form-data. For example, in Python you could do it like this: import requests import json url = 'https://crowdsourced.micropasts.org/api/taskrun?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID , 'task_id' : TASK_ID , 'info' : json . dumps ( dict ( foo = \"bar\" ))} r = requests . post ( url , data = data , files = files ) As you can see, you can submit in one HTTP request not only the file but also some extra info. The only requirement is to escape it, so PYBOSSA can parse it later on when the file has been succesfully uploaded. This feature is pretty handy if you need to send the latitude and longitude of a picture taken by a phone. You will be able to upload the file, but also its coordinates at once.","title":"Attaching files"},{"location":"api/taskrun/intro/#intro","text":"TaskRuns are exactly as other domain objects with two exceptions: You cannot create a taskrun without filling a few requirements. You can upload files as part of it.","title":"Intro"},{"location":"api/taskrun/intro/#creating-a-taskrun","text":"For creating a TaskRun a project needs to be published. If the project only allows authenticated contributions, PYBOSSA will reject the creation of TaskRuns via the API. Then, in order to save a TaskRun you, your user, needs to request it first. This is mandatory to avoid scripts creating hundreds of task runs in a few minutes.","title":"Creating a TaskRun"},{"location":"api/taskrun/intro/#requesting-the-task","text":"In order to request a task, all you have to do is basically an API call to any of the following endpoints: http://server/api/project/id/newtask or http://server/project/short_name/task/ID In the first case, you will be able to send a TaskRun only for the task that has been returned for your user via the newtask endpoint. In the second one, you are in charge to supply the task.ID.","title":"Requesting the task"},{"location":"api/taskrun/intro/#attaching-a-file-to-the-taskrun","text":"You can create a TaskRun with an image, video, PDF, audio (or any file) by doing a POST request with the following Content-Type: multipart/form-data. For example, in Python you could do it like this: import requests import json url = 'https://crowdsourced.micropasts.org/api/taskrun?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID , 'task_id' : TASK_ID , 'info' : json . dumps ( dict ( foo = \"bar\" ))} r = requests . post ( url , data = data , files = files ) As you can see, you can submit in one HTTP request not only the file but also some extra info. The only requirement is to escape it, so PYBOSSA can parse it later on when the file has been succesfully uploaded. This feature is pretty handy if you need to send the latitude and longitude of a picture taken by a phone. You will be able to upload the file, but also its coordinates at once.","title":"Attaching a file to the TaskRun"},{"location":"api/user/account/","text":"Account index \u00b6 Endpoint: /account/page/<int:page> Allowed methods : GET GET It returns a JSON object with the following information: accounts : this key holds the list of accounts for the given page. pagination : this key holds the pagination information. top_users : this key holds the top users (including the user if authenticated) with their rank and scores. update_feed : the latest actions in the server (users created, contributions, new tasks, etc.). template : the Jinja2 template that should be rendered in case of text/html. title : the title for the endpoint. Example output { \"accounts\" : [ { \"created\" : \"2015-06-10T15:02:38.411497\" , \"fullname\" : \"Scifabric\" , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user_234234dd3\" }, \"locale\" : null , \"name\" : \"Scifabric\" , \"rank\" : null , \"registered_ago\" : \"1 year ago\" , \"score\" : null , \"task_runs\" : 3 }, ], \"pagination\" : { \"next\" : true , \"page\" : 3 , \"per_page\" : 24 , \"prev\" : true , \"total\" : 11121 }, \"template\" : \"account/index.html\" , \"title\" : \"Community\" , \"top_users\" : [ { \"created\" : \"2014-08-17T18:28:56.738119\" , \"fullname\" : \"Buzz Bot\" , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user_55\" }, \"locale\" : null , \"name\" : \"buzzbot\" , \"rank\" : 1 , \"registered_ago\" : null , \"score\" : 54247 , \"task_runs\" : null }, ], \"total\" : 11121 , \"update_feed\" : [] } Account registration \u00b6 Endpoint: /account/register Allowed methods : GET/POST GET It returns a JSON object with the following information: form : The form fields that need to be sent for creating an account. It contains the CSRF token for validating the POST, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. title : the title of the page. Example output { \"form\" : { \"confirm\" : null , \"csrf\" : \"token,\" \"email_addr\" : null , \"errors\" : {}, \"fullname\" : null , \"name\" : null , \"password\" : null }, \"template\" : \"account/register.html\" , \"title\" : \"Register\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: next : URL that you JavaScript can follow as a redirect. It is not mandatory. Example output { \"next\" : \"/about\" } If there\u2019s an error in the form fields, you will get them in the form.errors key: { \"form\" : { \"confirm\" : \"daniel\" , \"csrf\" : \"token\" , \"email_addr\" : \"daniel\" , \"errors\" : { \"email_addr\" : [ \"Invalid email address.\" ], \"name\" : [ \"The user name is already taken\" ] }, \"fullname\" : \"daniel\" , \"name\" : \"daniel\" , \"password\" : \"daniel\" }, \"template\" : \"account/register.html\" , \"title\" : \"Register\" } If email confirmation is required for registering you will get this account validation result when all input data is correct. Note: Keep in mind that account is not created fully until the user confirmed his email. { \"status\" : \"sent\" , \"template\" : \"account/account_validation.html\" , \"title\" : \"Account validation\" } Account sign in \u00b6 Endpoint: /account/signin Allowed methods : GET/POST GET It returns a JSON object with the following information: form : the form fields that need to be sent for signing a user. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. Example output { \"form\" : { \"csrf\" : \"token\" , \"email\" : null , \"errors\" : {}, \"password\" : null }, \"next\" : null , \"template\" : \"account/signin.html\" , \"title\" : \"Sign in\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was successful. form : the form fields with the sent information. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. Example output { \"auth\" : { \"facebook\" : true , \"google\" : true , \"twitter\" : true }, \"flash\" : \"Please correct the errors\" , \"form\" : { \"csrf\" : \"token\" , \"email\" : \"prueba@prueba.com\" , \"errors\" : { \"password\" : [ \"You must provide a password\" ] }, \"password\" : \"\" }, \"next\" : null , \"status\" : \"error\" , \"template\" : \"account/signin.html\" , \"title\" : \"Sign in\" } If the login is successful, then, you will get something like this: { \"flash\" : \"Welcome back John Doe\" , \"next\" : \"/\" , \"status\" : \"success\" } Account sign out \u00b6 Endpoint: /account/signout Allowed methods : GET It returns a JSON object with the following information: next : suggested redirection after the sign out. message : message displaying success for sign out. Account recover password \u00b6 Endpoint: /account/forgot-password Allowed methods : GET/POST GET It returns a JSON object with the following information: form : the form fields that need to be sent for creating an account. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. Example output { \"form\" : { \"csrf\" : \"token,\" \"email_addr\" : null }, \"template\" : \"account/password_forgot.html\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was succesful. form : the form fields with the sent information. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. Example output { \"flash\" : [ \"We don't have this email in our records.\" ], \"form\" : { \"csrf\" : \"1483549683.06##cc1c7ff101b2a14a89cac5462e5028e6235ddb31\" , \"email_addr\" : \"algo@algo.com\" , \"errors\" : {} }, \"template\" : \"/account/password_forgot.html\" } If there\u2019s an error in the form fields, you will get them in the form.errors key: { \"flash\" : \"Something went wrong, please correct the errors on the form\" , \"form\" : { \"csrf\" : \"1483552042.97##f0e36b1b113934532ff9c8003b120365ff45f5e4\" , \"email_addr\" : \"algoom\" , \"errors\" : { \"email_addr\" : [ \"Invalid email address.\" ] } }, \"template\" : \"/account/password_forgot.html\" } Account name \u00b6 **Endpoint: /account/<name> Allowed methods : GET GET It returns a JSON object with the following information: projects_contrib : a list of projects the user has contributed too. template : The Jinja2 template that could be rendered. title : The title for the view. user : User information, including fullname, rank etc. Example output If you are not logged in or requesting details of another user you will only get public viewable information. If you are logged in you will also get private information in the user field. Sample output of public information: { \"projects_contrib\" : [ { \"description\" : \"this is a project\" , \"info\" : { \"container\" : \"123\" , \"thumbnail\" : \"thumbnailx\" }, \"n_tasks\" : 4 , \"n_volunteers\" : 0 , \"name\" : \"test12334\" , \"overall_progress\" : 0 , \"short_name\" : \"test12334\" } ], \"projects_created\" : [ { \"description\" : \"Youtube 1\" , \"info\" : { \"container\" : \"345\" , \"thumbnail\" : \"thumbnaily\" }, \"n_tasks\" : 15 , \"n_volunteers\" : 0 , \"name\" : \"JohnDoe Youtube 1\" , \"overall_progress\" : 0 , \"short_name\" : \"johnyoutube1\" }, ] \"template\" : \"/account/public_profile.html\" , \"title\" : \"John &middot; User Profile\" , \"user\" : { \"fullname\" : \"Joen Doe\" , \"info\" : { \"container\" : \"user_4953\" }, \"n_answers\" : 56 , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"score\" : 56 } } Example of logged in user: { ... \"user\" : { \"admin\" : false , \"api_key\" : \"aa3ee485-896d-488a-83f7-88a29bf45171\" , \"confirmation_email_sent\" : false , \"created\" : \"2014-08-11T08:59:32.079599\" , \"email_addr\" : \"johndoe@johndoe.com\" , \"facebook_user_id\" : null , \"fullname\" : \"John Doe\" , \"google_user_id\" : null , \"id\" : 4953 , \"info\" : { \"container\" : \"user_4953\" }, \"n_answers\" : 56 , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"registered_ago\" : \"2 years ago\" , \"score\" : 56 , \"total\" : 10046 , \"twitter_user_id\" : null , \"valid_email\" : true } } Account profile \u00b6 **Endpoint: /account/profile Allowed methods : GET GET If logged in you will get the same information as on /account/<name> (see above). If you are not logged in you will get the following example output Example output { \"next\" : \"/account/signin\" , \"status\" : \"not_signed_in\" } Account projects \u00b6 Endpoint: /account/<name>/projects Allowed methods : GET GET The user needs to be logged in. It returns a JSON object with the following information: projects_draft : a list of draft projects of the user. projects_published : a list of published projects of the user. template : The Jinja2 template that could be rendered. title : The title for the view. Example output { \"projects_draft\" : [ { \"description\" : \"This should be the Youtube Project\" , \"id\" : 3169 , \"info\" : { \"task_presenter\" : \"...\" }, \"n_tasks\" : 0 , \"n_volunteers\" : 0 , \"name\" : \"Youtube_Test1\" , \"overall_progress\" : 0 , \"owner_id\" : 4953 , \"short_name\" : \"youtube_test1\" }, ... ], \"projects_published\" : [ { \"description\" : \"Youtube 1\" , \"id\" : 3206 , \"info\" : { \"results\" : \"\" , \"task_presenter\" : \"..\" \"tutorial\" : \"\" }, \"n_tasks\" : 15 , \"n_volunteers\" : 0 , \"name\" : \"Youtube 1\" , \"overall_progress\" : 0 , \"owner_id\" : 4953 , \"short_name\" : \"youtube1\" }, ... ], \"template\" : \"account/projects.html\" , \"title\" : \"Projects\" } Account update profile \u00b6 Endpoint: /account/<name>/update Allowed methods : GET/POST GET It returns a JSON object with the following information: form : the form fields that need to be sent for updating account. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. password_form : the form fields that need to be sent for updating the account\u2019s password. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. upload_form : the form fields that need to be sent for updating the account\u2019s avatar. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. title : The title for the view. Example output { \"flash\" : null , \"form\" : { \"ckan_api\" : null , \"csrf\" : \"token\" , \"email_addr\" : \"email@emai.com\" , \"errors\" : {}, \"fullname\" : \"John Doe\" , \"id\" : 0 , \"locale\" : \"en\" , \"name\" : \"johndoe\" , \"privacy_mode\" : true , \"subscribed\" : true }, \"password_form\" : { \"confirm\" : null , \"csrf\" : \"token\" , \"current_password\" : null , \"errors\" : {}, \"new_password\" : null }, \"show_passwd_form\" : true , \"template\" : \"/account/update.html\" , \"title\" : \"Update your profile: John Doe\" , \"upload_form\" : { \"avatar\" : null , \"csrf\" : \"token\" , \"errors\" : {}, \"id\" : null , \"x1\" : 0 , \"x2\" : 0 , \"y1\" : 0 , \"y2\" : 0 } } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. As this endpoint supports three different forms, you must specify which form are you targeting adding an extra key: btn . The options for this key are: Profile : to update the form . Upload : to update the upload_form . Password : to update the password_form . External : to update the form but only the external services. Note Be sure to respect the Uppercase in the first letter, otherwise it will fail. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was successful. form : the form fields with the sent information. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. Example output { \"flash\" : \"Your profile has been updated!\" , \"next\" : \"/account/pruebaadfadfa/update\" , \"status\" : \"success\" } If there\u2019s an error in the form fields, you will get them in the form.errors key: { \"flash\" : \"Please correct the errors\" , \"form\" : { \"ckan_api\" : null , \"csrf\" : \"token\" , \"email_addr\" : \"pruebaprueba.com\" , \"errors\" : { \"email_addr\" : [ \"Invalid email address.\" ] }, \"fullname\" : \"prueba de json\" , \"id\" : 0 , \"locale\" : \"es\" , \"name\" : \"pruebaadfadfa\" , \"privacy_mode\" : true , \"subscribed\" : true }, \"password_form\" : { \"confirm\" : \"\" , \"csrf\" : \"token\" , \"current_password\" : \"\" , \"errors\" : {}, \"new_password\" : \"\" }, \"show_passwd_form\" : true , \"template\" : \"/account/update.html\" , \"title\" : \"Update your profile: John Doe\" , \"upload_form\" : { \"avatar\" : \"\" , \"csrf\" : \"token\" , \"errors\" : {}, \"id\" : 0 , \"x1\" : 0 , \"x2\" : 0 , \"y1\" : 0 , \"y2\" : 0 } } Note For updating the avatar is very important to not set the Content-Type . If you are using jQuery, set it to False, so the file is handled properly. To still recieve a JSON response you can add the response_format=json query paramater to your request. The (x1,x2,y1,y2) are the coordinates for cutting the image and create the avatar. (x1,y1) are the offset left of the cropped area and the offset top of the cropped area respectively; and (x2,y2) are the width and height of the crop. Account reset password \u00b6 Endpoint: /account/reset-password Allowed methods : GET/POST GET Required arguments : key a string required to validate the link for updating the password of the user. This key is sent to the user via email after requesting to reset the password. It returns a JSON object with the following information: form : the form fields that need to be sent for updating account. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. Example output { \"form\" : { \"confirm\" : null , \"csrf\" : \"token\" , \"current_password\" : null , \"errors\" : {}, \"new_password\" : null }, \"template\" : \"/account/password_reset.html\" POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was succesful. status : A status message, indicating if something went wrong. next : Suggested URL to redirect the user. Example output { \"status\" : \"success\" , \"flash\" : \"You reset your password successfully!\" , \"next\" : \"/\" } Account reset API Key \u00b6 Endpoint: /account/<user>/resetapikey Allowed methods : GET/POST GET It returns a JSON object with the following information: csrf : The CSRF token for validating the post. Example output { \"form\" : { \"csrf\" : \"token\" , } } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was succesful. status : A status message, indicating if something went wrong. next : Suggested URL to redirect the user. Example output { \"status\" : \"success\" , \"flash\" : \"New API-KEY generated\" , \"next\" : \"/account/<user>\" } Account subscribe to newsletter \u00b6 **Endpoint: /account/newsletter Allowed methods : GET GET It returns a JSON object with the following information: template : The template that Jinja2 will render. title : The title of the endpoint. next : The next URL. Example output { \"template\" : \"account/newsletter.html\" , \"title\" : \"Subscribe to our Newsletter\" , \"next\" : \"/\" } If you want to subscribe a user, then you have to call the same endpoint with the following argument: subscribe=true Example output { \"flash\" : \"You are subscribed to our newsletter\" , \"status\" : \"success\" , \"next\" : \"/\" } Account confirm email \u00b6 Endpoint: /account/confirm-email Allowed methods : GET GET If account validation is enabled, then, using this endpoint the user will receive an email to validate its account. It returns a JSON object with the following information: flash : A message stating that an email has been sent. status : The status of the call. next : The next url. Example output { \"flash\" : 'A ne email has bee n se nt t o valida te your e - mail address.' , 's tatus ' : 'i nf o' , ' ne x t ' : '/accou nt /<user na me>/' } Account delete \u00b6 Endpoint: /account/ /delete Allowed methods : GET GET If you send a GET request to this endpoint, PYBOSSA will enequeue a job to delete the user account. Note You should build a confirmation check before hitting this enpoint, as this action cannot be undone. Example output { \"template\" : No ne 'job' : 'e n queued' } Account export \u00b6 Endpoint: /account/ /export Allowed methods : GET GET If you send a GET request to this endpoint, PYBOSSA will enequeue a job to create zip files for the with his/her personal data. Example output { \"flash\" : \"GDPR export started\" , \"next\" : \"/account/user2/\" , \"status\" : \"success\" }","title":"Account"},{"location":"api/user/account/#account-index","text":"Endpoint: /account/page/<int:page> Allowed methods : GET GET It returns a JSON object with the following information: accounts : this key holds the list of accounts for the given page. pagination : this key holds the pagination information. top_users : this key holds the top users (including the user if authenticated) with their rank and scores. update_feed : the latest actions in the server (users created, contributions, new tasks, etc.). template : the Jinja2 template that should be rendered in case of text/html. title : the title for the endpoint. Example output { \"accounts\" : [ { \"created\" : \"2015-06-10T15:02:38.411497\" , \"fullname\" : \"Scifabric\" , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user_234234dd3\" }, \"locale\" : null , \"name\" : \"Scifabric\" , \"rank\" : null , \"registered_ago\" : \"1 year ago\" , \"score\" : null , \"task_runs\" : 3 }, ], \"pagination\" : { \"next\" : true , \"page\" : 3 , \"per_page\" : 24 , \"prev\" : true , \"total\" : 11121 }, \"template\" : \"account/index.html\" , \"title\" : \"Community\" , \"top_users\" : [ { \"created\" : \"2014-08-17T18:28:56.738119\" , \"fullname\" : \"Buzz Bot\" , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user_55\" }, \"locale\" : null , \"name\" : \"buzzbot\" , \"rank\" : 1 , \"registered_ago\" : null , \"score\" : 54247 , \"task_runs\" : null }, ], \"total\" : 11121 , \"update_feed\" : [] }","title":"Account index"},{"location":"api/user/account/#account-registration","text":"Endpoint: /account/register Allowed methods : GET/POST GET It returns a JSON object with the following information: form : The form fields that need to be sent for creating an account. It contains the CSRF token for validating the POST, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. title : the title of the page. Example output { \"form\" : { \"confirm\" : null , \"csrf\" : \"token,\" \"email_addr\" : null , \"errors\" : {}, \"fullname\" : null , \"name\" : null , \"password\" : null }, \"template\" : \"account/register.html\" , \"title\" : \"Register\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: next : URL that you JavaScript can follow as a redirect. It is not mandatory. Example output { \"next\" : \"/about\" } If there\u2019s an error in the form fields, you will get them in the form.errors key: { \"form\" : { \"confirm\" : \"daniel\" , \"csrf\" : \"token\" , \"email_addr\" : \"daniel\" , \"errors\" : { \"email_addr\" : [ \"Invalid email address.\" ], \"name\" : [ \"The user name is already taken\" ] }, \"fullname\" : \"daniel\" , \"name\" : \"daniel\" , \"password\" : \"daniel\" }, \"template\" : \"account/register.html\" , \"title\" : \"Register\" } If email confirmation is required for registering you will get this account validation result when all input data is correct. Note: Keep in mind that account is not created fully until the user confirmed his email. { \"status\" : \"sent\" , \"template\" : \"account/account_validation.html\" , \"title\" : \"Account validation\" }","title":"Account registration"},{"location":"api/user/account/#account-sign-in","text":"Endpoint: /account/signin Allowed methods : GET/POST GET It returns a JSON object with the following information: form : the form fields that need to be sent for signing a user. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. Example output { \"form\" : { \"csrf\" : \"token\" , \"email\" : null , \"errors\" : {}, \"password\" : null }, \"next\" : null , \"template\" : \"account/signin.html\" , \"title\" : \"Sign in\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was successful. form : the form fields with the sent information. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. Example output { \"auth\" : { \"facebook\" : true , \"google\" : true , \"twitter\" : true }, \"flash\" : \"Please correct the errors\" , \"form\" : { \"csrf\" : \"token\" , \"email\" : \"prueba@prueba.com\" , \"errors\" : { \"password\" : [ \"You must provide a password\" ] }, \"password\" : \"\" }, \"next\" : null , \"status\" : \"error\" , \"template\" : \"account/signin.html\" , \"title\" : \"Sign in\" } If the login is successful, then, you will get something like this: { \"flash\" : \"Welcome back John Doe\" , \"next\" : \"/\" , \"status\" : \"success\" }","title":"Account sign in"},{"location":"api/user/account/#account-sign-out","text":"Endpoint: /account/signout Allowed methods : GET It returns a JSON object with the following information: next : suggested redirection after the sign out. message : message displaying success for sign out.","title":"Account sign out"},{"location":"api/user/account/#account-recover-password","text":"Endpoint: /account/forgot-password Allowed methods : GET/POST GET It returns a JSON object with the following information: form : the form fields that need to be sent for creating an account. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. Example output { \"form\" : { \"csrf\" : \"token,\" \"email_addr\" : null }, \"template\" : \"account/password_forgot.html\" } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was succesful. form : the form fields with the sent information. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. Example output { \"flash\" : [ \"We don't have this email in our records.\" ], \"form\" : { \"csrf\" : \"1483549683.06##cc1c7ff101b2a14a89cac5462e5028e6235ddb31\" , \"email_addr\" : \"algo@algo.com\" , \"errors\" : {} }, \"template\" : \"/account/password_forgot.html\" } If there\u2019s an error in the form fields, you will get them in the form.errors key: { \"flash\" : \"Something went wrong, please correct the errors on the form\" , \"form\" : { \"csrf\" : \"1483552042.97##f0e36b1b113934532ff9c8003b120365ff45f5e4\" , \"email_addr\" : \"algoom\" , \"errors\" : { \"email_addr\" : [ \"Invalid email address.\" ] } }, \"template\" : \"/account/password_forgot.html\" }","title":"Account recover password"},{"location":"api/user/account/#account-name","text":"**Endpoint: /account/<name> Allowed methods : GET GET It returns a JSON object with the following information: projects_contrib : a list of projects the user has contributed too. template : The Jinja2 template that could be rendered. title : The title for the view. user : User information, including fullname, rank etc. Example output If you are not logged in or requesting details of another user you will only get public viewable information. If you are logged in you will also get private information in the user field. Sample output of public information: { \"projects_contrib\" : [ { \"description\" : \"this is a project\" , \"info\" : { \"container\" : \"123\" , \"thumbnail\" : \"thumbnailx\" }, \"n_tasks\" : 4 , \"n_volunteers\" : 0 , \"name\" : \"test12334\" , \"overall_progress\" : 0 , \"short_name\" : \"test12334\" } ], \"projects_created\" : [ { \"description\" : \"Youtube 1\" , \"info\" : { \"container\" : \"345\" , \"thumbnail\" : \"thumbnaily\" }, \"n_tasks\" : 15 , \"n_volunteers\" : 0 , \"name\" : \"JohnDoe Youtube 1\" , \"overall_progress\" : 0 , \"short_name\" : \"johnyoutube1\" }, ] \"template\" : \"/account/public_profile.html\" , \"title\" : \"John &middot; User Profile\" , \"user\" : { \"fullname\" : \"Joen Doe\" , \"info\" : { \"container\" : \"user_4953\" }, \"n_answers\" : 56 , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"score\" : 56 } } Example of logged in user: { ... \"user\" : { \"admin\" : false , \"api_key\" : \"aa3ee485-896d-488a-83f7-88a29bf45171\" , \"confirmation_email_sent\" : false , \"created\" : \"2014-08-11T08:59:32.079599\" , \"email_addr\" : \"johndoe@johndoe.com\" , \"facebook_user_id\" : null , \"fullname\" : \"John Doe\" , \"google_user_id\" : null , \"id\" : 4953 , \"info\" : { \"container\" : \"user_4953\" }, \"n_answers\" : 56 , \"name\" : \"JohnDoe\" , \"rank\" : 1813 , \"registered_ago\" : \"2 years ago\" , \"score\" : 56 , \"total\" : 10046 , \"twitter_user_id\" : null , \"valid_email\" : true } }","title":"Account name"},{"location":"api/user/account/#account-profile","text":"**Endpoint: /account/profile Allowed methods : GET GET If logged in you will get the same information as on /account/<name> (see above). If you are not logged in you will get the following example output Example output { \"next\" : \"/account/signin\" , \"status\" : \"not_signed_in\" }","title":"Account profile"},{"location":"api/user/account/#account-projects","text":"Endpoint: /account/<name>/projects Allowed methods : GET GET The user needs to be logged in. It returns a JSON object with the following information: projects_draft : a list of draft projects of the user. projects_published : a list of published projects of the user. template : The Jinja2 template that could be rendered. title : The title for the view. Example output { \"projects_draft\" : [ { \"description\" : \"This should be the Youtube Project\" , \"id\" : 3169 , \"info\" : { \"task_presenter\" : \"...\" }, \"n_tasks\" : 0 , \"n_volunteers\" : 0 , \"name\" : \"Youtube_Test1\" , \"overall_progress\" : 0 , \"owner_id\" : 4953 , \"short_name\" : \"youtube_test1\" }, ... ], \"projects_published\" : [ { \"description\" : \"Youtube 1\" , \"id\" : 3206 , \"info\" : { \"results\" : \"\" , \"task_presenter\" : \"..\" \"tutorial\" : \"\" }, \"n_tasks\" : 15 , \"n_volunteers\" : 0 , \"name\" : \"Youtube 1\" , \"overall_progress\" : 0 , \"owner_id\" : 4953 , \"short_name\" : \"youtube1\" }, ... ], \"template\" : \"account/projects.html\" , \"title\" : \"Projects\" }","title":"Account projects"},{"location":"api/user/account/#account-update-profile","text":"Endpoint: /account/<name>/update Allowed methods : GET/POST GET It returns a JSON object with the following information: form : the form fields that need to be sent for updating account. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. password_form : the form fields that need to be sent for updating the account\u2019s password. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. upload_form : the form fields that need to be sent for updating the account\u2019s avatar. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. title : The title for the view. Example output { \"flash\" : null , \"form\" : { \"ckan_api\" : null , \"csrf\" : \"token\" , \"email_addr\" : \"email@emai.com\" , \"errors\" : {}, \"fullname\" : \"John Doe\" , \"id\" : 0 , \"locale\" : \"en\" , \"name\" : \"johndoe\" , \"privacy_mode\" : true , \"subscribed\" : true }, \"password_form\" : { \"confirm\" : null , \"csrf\" : \"token\" , \"current_password\" : null , \"errors\" : {}, \"new_password\" : null }, \"show_passwd_form\" : true , \"template\" : \"/account/update.html\" , \"title\" : \"Update your profile: John Doe\" , \"upload_form\" : { \"avatar\" : null , \"csrf\" : \"token\" , \"errors\" : {}, \"id\" : null , \"x1\" : 0 , \"x2\" : 0 , \"y1\" : 0 , \"y2\" : 0 } } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. As this endpoint supports three different forms, you must specify which form are you targeting adding an extra key: btn . The options for this key are: Profile : to update the form . Upload : to update the upload_form . Password : to update the password_form . External : to update the form but only the external services. Note Be sure to respect the Uppercase in the first letter, otherwise it will fail. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was successful. form : the form fields with the sent information. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. Example output { \"flash\" : \"Your profile has been updated!\" , \"next\" : \"/account/pruebaadfadfa/update\" , \"status\" : \"success\" } If there\u2019s an error in the form fields, you will get them in the form.errors key: { \"flash\" : \"Please correct the errors\" , \"form\" : { \"ckan_api\" : null , \"csrf\" : \"token\" , \"email_addr\" : \"pruebaprueba.com\" , \"errors\" : { \"email_addr\" : [ \"Invalid email address.\" ] }, \"fullname\" : \"prueba de json\" , \"id\" : 0 , \"locale\" : \"es\" , \"name\" : \"pruebaadfadfa\" , \"privacy_mode\" : true , \"subscribed\" : true }, \"password_form\" : { \"confirm\" : \"\" , \"csrf\" : \"token\" , \"current_password\" : \"\" , \"errors\" : {}, \"new_password\" : \"\" }, \"show_passwd_form\" : true , \"template\" : \"/account/update.html\" , \"title\" : \"Update your profile: John Doe\" , \"upload_form\" : { \"avatar\" : \"\" , \"csrf\" : \"token\" , \"errors\" : {}, \"id\" : 0 , \"x1\" : 0 , \"x2\" : 0 , \"y1\" : 0 , \"y2\" : 0 } } Note For updating the avatar is very important to not set the Content-Type . If you are using jQuery, set it to False, so the file is handled properly. To still recieve a JSON response you can add the response_format=json query paramater to your request. The (x1,x2,y1,y2) are the coordinates for cutting the image and create the avatar. (x1,y1) are the offset left of the cropped area and the offset top of the cropped area respectively; and (x2,y2) are the width and height of the crop.","title":"Account update profile"},{"location":"api/user/account/#account-reset-password","text":"Endpoint: /account/reset-password Allowed methods : GET/POST GET Required arguments : key a string required to validate the link for updating the password of the user. This key is sent to the user via email after requesting to reset the password. It returns a JSON object with the following information: form : the form fields that need to be sent for updating account. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong. template : The Jinja2 template that could be rendered. Example output { \"form\" : { \"confirm\" : null , \"csrf\" : \"token\" , \"current_password\" : null , \"errors\" : {}, \"new_password\" : null }, \"template\" : \"/account/password_reset.html\" POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was succesful. status : A status message, indicating if something went wrong. next : Suggested URL to redirect the user. Example output { \"status\" : \"success\" , \"flash\" : \"You reset your password successfully!\" , \"next\" : \"/\" }","title":"Account reset password"},{"location":"api/user/account/#account-reset-api-key","text":"Endpoint: /account/<user>/resetapikey Allowed methods : GET/POST GET It returns a JSON object with the following information: csrf : The CSRF token for validating the post. Example output { \"form\" : { \"csrf\" : \"token\" , } } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: flash : A success message, or error indicating if the request was succesful. status : A status message, indicating if something went wrong. next : Suggested URL to redirect the user. Example output { \"status\" : \"success\" , \"flash\" : \"New API-KEY generated\" , \"next\" : \"/account/<user>\" }","title":"Account reset API Key"},{"location":"api/user/account/#account-subscribe-to-newsletter","text":"**Endpoint: /account/newsletter Allowed methods : GET GET It returns a JSON object with the following information: template : The template that Jinja2 will render. title : The title of the endpoint. next : The next URL. Example output { \"template\" : \"account/newsletter.html\" , \"title\" : \"Subscribe to our Newsletter\" , \"next\" : \"/\" } If you want to subscribe a user, then you have to call the same endpoint with the following argument: subscribe=true Example output { \"flash\" : \"You are subscribed to our newsletter\" , \"status\" : \"success\" , \"next\" : \"/\" }","title":"Account subscribe to newsletter"},{"location":"api/user/account/#account-confirm-email","text":"Endpoint: /account/confirm-email Allowed methods : GET GET If account validation is enabled, then, using this endpoint the user will receive an email to validate its account. It returns a JSON object with the following information: flash : A message stating that an email has been sent. status : The status of the call. next : The next url. Example output { \"flash\" : 'A ne email has bee n se nt t o valida te your e - mail address.' , 's tatus ' : 'i nf o' , ' ne x t ' : '/accou nt /<user na me>/' }","title":"Account confirm email"},{"location":"api/user/account/#account-delete","text":"Endpoint: /account/ /delete Allowed methods : GET GET If you send a GET request to this endpoint, PYBOSSA will enequeue a job to delete the user account. Note You should build a confirmation check before hitting this enpoint, as this action cannot be undone. Example output { \"template\" : No ne 'job' : 'e n queued' }","title":"Account delete"},{"location":"api/user/account/#account-export","text":"Endpoint: /account/ /export Allowed methods : GET GET If you send a GET request to this endpoint, PYBOSSA will enequeue a job to create zip files for the with his/her personal data. Example output { \"flash\" : \"GDPR export started\" , \"next\" : \"/account/user2/\" , \"status\" : \"success\" }","title":"Account export"},{"location":"api/user/admin/","text":"Admin users \u00b6 Endpoint: /admin/users Allowed methods : GET/POST GET It returns a JSON object with the following information: form : A form for searching for users. found : A list of found users according to a search. template : Jinja2 template. users : List of admin users. Example output { \"form\" : { \"csrf\" : \"token\" , \"errors\" : {}, \"user\" : null }, \"found\" : [], \"template\" : \"/admin/users.html\" , \"title\" : \"Manage Admin Users\" , \"users\" : [ { \"admin\" : true , \"api_key\" : \"key\" , \"category\" : null , \"ckan_api\" : null , \"confirmation_email_sent\" : false , \"created\" : \"date\" , \"email_addr\" : \"email\" , \"facebook_user_id\" : null , \"flags\" : null , \"fullname\" : \"John Doe\" , \"google_user_id\" : null , \"id\" : 1 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user_1\" }, \"locale\" : \"en\" , \"name\" : \"johndoe\" , \"newsletter_prompted\" : false , \"passwd_hash\" : \"hash\" , \"privacy_mode\" : true , \"pro\" : false , \"subscribed\" : true , \"twitter_user_id\" : null , \"valid_email\" : true }, ] } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: form : A form with the submitted search. found : A list of found users according to a search. template : Jinja2 template. users : List of admin users. Example output { \"form\" : { \"csrf\" : \"token\" , \"errors\" : {}, \"user\" : 'ja ne doe' , }, \"found\" : [ { \"admin\" : false , \"api_key\" : \"key\" , \"category\" : null , \"ckan_api\" : null , \"confirmation_email_sent\" : false , \"created\" : \"date\" , \"email_addr\" : \"email\" , \"facebook_user_id\" : null , \"flags\" : null , \"fullname\" : \"janedoe\" , \"google_user_id\" : null , \"id\" : 80 , \"info\" : {}, \"locale\" : \"en\" , \"name\" : \"janedoe\" , \"newsletter_prompted\" : false , \"passwd_hash\" : \"hash\" , \"privacy_mode\" : true , \"pro\" : false , \"subscribed\" : true , \"twitter_user_id\" : null , \"valid_email\" : true }, ], \"template\" : \"/admin/users.html\" , \"title\" : \"Manage Admin Users\" , \"users\" : [ { \"admin\" : true , \"api_key\" : \"key\" , \"category\" : null , \"ckan_api\" : null , \"confirmation_email_sent\" : false , \"created\" : \"date\" , \"email_addr\" : \"email\" , \"flags\" : null , \"fullname\" : \"John Doe\" , \"id\" : 1 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user_1\" }, \"locale\" : \"en\" , \"name\" : \"johndoe\" , \"newsletter_prompted\" : false , \"passwd_hash\" : \"hash\" , \"privacy_mode\" : true , \"pro\" : false , \"subscribed\" : true , \"valid_email\" : true }, ] } Admin users add \u00b6 Endpoint: /admin/users/add/<int:user_id> Allowed methods : GET GET It adds a user to the admin group. It returns a JSON object with the following information: next : \u2018/admin/users\u2019, Example output { \"next\" : \"/admin/users\" , } Note You will need to use the /admin/users endpoint to get a list of users for adding deleting from the admin group. Admin users del \u00b6 Endpoint: /admin/users/del/<int:user_id> Allowed methods : GET GET It removes a user from the admin group. It returns a JSON object with the following information: next : \u2018/admin/users\u2019, Example output { \"next\" : \"/admin/users\" , } Note You will need to use the /admin/users endpoint to get a list of users for adding deleting from the admin group.","title":"Admins"},{"location":"api/user/admin/#admin-users","text":"Endpoint: /admin/users Allowed methods : GET/POST GET It returns a JSON object with the following information: form : A form for searching for users. found : A list of found users according to a search. template : Jinja2 template. users : List of admin users. Example output { \"form\" : { \"csrf\" : \"token\" , \"errors\" : {}, \"user\" : null }, \"found\" : [], \"template\" : \"/admin/users.html\" , \"title\" : \"Manage Admin Users\" , \"users\" : [ { \"admin\" : true , \"api_key\" : \"key\" , \"category\" : null , \"ckan_api\" : null , \"confirmation_email_sent\" : false , \"created\" : \"date\" , \"email_addr\" : \"email\" , \"facebook_user_id\" : null , \"flags\" : null , \"fullname\" : \"John Doe\" , \"google_user_id\" : null , \"id\" : 1 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user_1\" }, \"locale\" : \"en\" , \"name\" : \"johndoe\" , \"newsletter_prompted\" : false , \"passwd_hash\" : \"hash\" , \"privacy_mode\" : true , \"pro\" : false , \"subscribed\" : true , \"twitter_user_id\" : null , \"valid_email\" : true }, ] } POST To send a valid POST request you need to pass the csrf token in the headers. Use the following header: \u201cX-CSRFToken\u201d. It returns a JSON object with the following information: form : A form with the submitted search. found : A list of found users according to a search. template : Jinja2 template. users : List of admin users. Example output { \"form\" : { \"csrf\" : \"token\" , \"errors\" : {}, \"user\" : 'ja ne doe' , }, \"found\" : [ { \"admin\" : false , \"api_key\" : \"key\" , \"category\" : null , \"ckan_api\" : null , \"confirmation_email_sent\" : false , \"created\" : \"date\" , \"email_addr\" : \"email\" , \"facebook_user_id\" : null , \"flags\" : null , \"fullname\" : \"janedoe\" , \"google_user_id\" : null , \"id\" : 80 , \"info\" : {}, \"locale\" : \"en\" , \"name\" : \"janedoe\" , \"newsletter_prompted\" : false , \"passwd_hash\" : \"hash\" , \"privacy_mode\" : true , \"pro\" : false , \"subscribed\" : true , \"twitter_user_id\" : null , \"valid_email\" : true }, ], \"template\" : \"/admin/users.html\" , \"title\" : \"Manage Admin Users\" , \"users\" : [ { \"admin\" : true , \"api_key\" : \"key\" , \"category\" : null , \"ckan_api\" : null , \"confirmation_email_sent\" : false , \"created\" : \"date\" , \"email_addr\" : \"email\" , \"flags\" : null , \"fullname\" : \"John Doe\" , \"id\" : 1 , \"info\" : { \"avatar\" : \"avatar.png\" , \"container\" : \"user_1\" }, \"locale\" : \"en\" , \"name\" : \"johndoe\" , \"newsletter_prompted\" : false , \"passwd_hash\" : \"hash\" , \"privacy_mode\" : true , \"pro\" : false , \"subscribed\" : true , \"valid_email\" : true }, ] }","title":"Admin users"},{"location":"api/user/admin/#admin-users-add","text":"Endpoint: /admin/users/add/<int:user_id> Allowed methods : GET GET It adds a user to the admin group. It returns a JSON object with the following information: next : \u2018/admin/users\u2019, Example output { \"next\" : \"/admin/users\" , } Note You will need to use the /admin/users endpoint to get a list of users for adding deleting from the admin group.","title":"Admin users add"},{"location":"api/user/admin/#admin-users-del","text":"Endpoint: /admin/users/del/<int:user_id> Allowed methods : GET GET It removes a user from the admin group. It returns a JSON object with the following information: next : \u2018/admin/users\u2019, Example output { \"next\" : \"/admin/users\" , } Note You will need to use the /admin/users endpoint to get a list of users for adding deleting from the admin group.","title":"Admin users del"},{"location":"api/user/intro/","text":"While all the other endpoints behave the same, this one is a bit special as we deal with private information like emails. Anonymous users \u00b6 The following actions cannot be done: Create a new user via a POST Update an existing user via a PUT Delete an existing user via a DEL Read action will only return username and locale for that user. Authenticated users \u00b6 The following actions cannot be done: Create a new user via a POST Update an existing user via a PUT different than the same user Delete an existing user via a DEL Read action will only return user name and locale for that user. If the user access its page, then all the information will be available to him/her. Admin users \u00b6 The following actions cannot be done: Create a new user via a POST Delete an existing user via a DEL Read action can be done by any user. The admins will have access to the User IDs. This will be helpful in case that you want to give, for example, badges, for users when using our webhooks solution. Each user has in the info field a new field named extra where that information (or anything else) could be stored.","title":"Intro"},{"location":"api/user/intro/#anonymous-users","text":"The following actions cannot be done: Create a new user via a POST Update an existing user via a PUT Delete an existing user via a DEL Read action will only return username and locale for that user.","title":"Anonymous users"},{"location":"api/user/intro/#authenticated-users","text":"The following actions cannot be done: Create a new user via a POST Update an existing user via a PUT different than the same user Delete an existing user via a DEL Read action will only return user name and locale for that user. If the user access its page, then all the information will be available to him/her.","title":"Authenticated users"},{"location":"api/user/intro/#admin-users","text":"The following actions cannot be done: Create a new user via a POST Delete an existing user via a DEL Read action can be done by any user. The admins will have access to the User IDs. This will be helpful in case that you want to give, for example, badges, for users when using our webhooks solution. Each user has in the info field a new field named extra where that information (or anything else) could be stored.","title":"Admin users"},{"location":"api/user/progress/","text":"User progress \u00b6 You can know how many tasks a user has completed for a given project by accessing the following endpoint: http://server.com/api/project/<id>/userprogress or http://server.com/api/project/<short_name>/userprogress The user needs to be authenticated to get the value. You cannot query another user, just the current one that it is authenticated in the system.","title":"Project progress"},{"location":"api/user/progress/#user-progress","text":"You can know how many tasks a user has completed for a given project by accessing the following endpoint: http://server.com/api/project/<id>/userprogress or http://server.com/api/project/<short_name>/userprogress The user needs to be authenticated to get the value. You cannot query another user, just the current one that it is authenticated in the system.","title":"User progress"},{"location":"build/capture/","text":"Capture data with PYBOSSA \u00b6 Since version 2.10.0 PYBOSSA allows you to capture data with the crowd. This basically means that you don\u2019t need anymore the EpiCollect+ integration (unless you want to keep using it, of course). With PYBOSA 2.10.0 you can ask the crowd to submit any type of data via the API Configuring data capturing \u00b6 PYBOSSA has this feature enabled by default for the following extensions: [ 'js' , 'css' , 'p n g' , 'jpg' , 'jpeg' , 'gi f ' , 'zip' ] You can simply force a different set of extensions by using this config variable: ALLOWED_EXTENSIONS = [ 'mp4' , 'wav' ] Sending files within the taskrun \u00b6 You can create a TaskRun with an image, video, PDF, audio (or any file) by doing a POST request with the following Content-Type: multipart/form-data. For example, in Python you could do it like this: import requests import json url = 'https://server/api/taskrun?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID , 'task_id' : TASK_ID , 'info' : json . dumps ( dict ( foo = \"bar\" ))} r = requests . post ( url , data = data , files = files ) As you can see, you can submit in one HTTP request not only the file but also some extra info. The only requirement is to escape it, so PYBOSSA can parse it later on when the file has been succesfully uploaded. This feature is pretty handy if you need to send the latitude and longitude of a picture taken by a phone. You will be able to upload the file, but also its coordinates at once.","title":"Data capturing: image, video or audio"},{"location":"build/capture/#capture-data-with-pybossa","text":"Since version 2.10.0 PYBOSSA allows you to capture data with the crowd. This basically means that you don\u2019t need anymore the EpiCollect+ integration (unless you want to keep using it, of course). With PYBOSA 2.10.0 you can ask the crowd to submit any type of data via the API","title":"Capture data with PYBOSSA"},{"location":"build/capture/#configuring-data-capturing","text":"PYBOSSA has this feature enabled by default for the following extensions: [ 'js' , 'css' , 'p n g' , 'jpg' , 'jpeg' , 'gi f ' , 'zip' ] You can simply force a different set of extensions by using this config variable: ALLOWED_EXTENSIONS = [ 'mp4' , 'wav' ]","title":"Configuring data capturing"},{"location":"build/capture/#sending-files-within-the-taskrun","text":"You can create a TaskRun with an image, video, PDF, audio (or any file) by doing a POST request with the following Content-Type: multipart/form-data. For example, in Python you could do it like this: import requests import json url = 'https://server/api/taskrun?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID , 'task_id' : TASK_ID , 'info' : json . dumps ( dict ( foo = \"bar\" ))} r = requests . post ( url , data = data , files = files ) As you can see, you can submit in one HTTP request not only the file but also some extra info. The only requirement is to escape it, so PYBOSSA can parse it later on when the file has been succesfully uploaded. This feature is pretty handy if you need to send the latitude and longitude of a picture taken by a phone. You will be able to upload the file, but also its coordinates at once.","title":"Sending files within the taskrun"},{"location":"build/guide/","text":"Build with PYBOSSA \u00b6 This section covers how to you can write and manage your own PYBOSSA project. We suggest starting by taking a quick look at the PYBOSSA overview as this will introduce you to a few pieces of terminology and help you understand how things fit together. The following sections have some useful information to get you started: Quickstart: Creating a PYBOSSA project Using PYBOSSA from the command line Step by step tutorial about PYBOSSA Configuring the project PYBOSSA API Domain model Real time data analysis","title":"Guide"},{"location":"build/guide/#build-with-pybossa","text":"This section covers how to you can write and manage your own PYBOSSA project. We suggest starting by taking a quick look at the PYBOSSA overview as this will introduce you to a few pieces of terminology and help you understand how things fit together. The following sections have some useful information to get you started: Quickstart: Creating a PYBOSSA project Using PYBOSSA from the command line Step by step tutorial about PYBOSSA Configuring the project PYBOSSA API Domain model Real time data analysis","title":"Build with PYBOSSA"},{"location":"build/intro/","text":"Introduction \u00b6 PYBOSSA has two main components: the server and the projects. Professional PYBOSSA projects. If you want to build a project, you can hire Scifabric for designing, building, and analysing your data. Check Scifabric solutions . The server \u00b6 The PYBOSSA server is a web server with a RESTful API that distributes tasks among volunteers using a simple API. You can start directly using this service without any cost (setting your own server), or if you prefer you can hire one of our PYBOSSA server options . Architecture \u00b6 The following diagram gives you an overview of how a PYBOSSA system works: A PYBOSSA server can have one or more projects. A project can have one or more tasks, and PYBOSSA takes care of distributing the tasks among the volunteers. This distribution happens when a volunteer requests a task. PYBOSSA checks which available tasks can be sent to the user, and sends them. When the volunteer sends a task run (a classification, transcription, analysis, etc.) PYBOSSA saves it. PYBOSSA supports real-time data analysis. If the project has this feature enabled, PYBOSSA will notify, using a webhook POST, a microservice to do the statistical analysis and save a result for the given task based on the task runs of the task. The Project \u00b6 A PYBOSSA project is an HTML page with some JavaScript that will load a task from a PYBOSSA server and present it to the volunteer and ask the user to, for instance, classify an image or transcribe a handwritten document. A PYBOSSA project has two main components: The Task Presenter : an HTML document where the JavaScript will load the task data into the DOM ; and The Task Importer : usually a script that will upload the tasks for the project into the PYBOSSA server. Projects can be easily created using two approaches: Using the Web interface : where you can create a project, write the Task Presenter and upload the tasks using the simplified built-in Task Importers (get tasks from Amazon S3, Dropbox, Youtube, CSV, Google Spreadsheets a IIIF manifest); or Using the API: where you will be able to create the project, write the Task Presenter . For importing the tasks, you can use the Task Importer of your project, use our command line tool , or if you prefer it to create a specific script that will use the PYBOSSA API for this part using your preferred programming language. The Web Interface is an excellent start point to learn a bit more about the PYBOSSA architecture and how you can develop a simple project in a short time, while the API will give you more options regarding flexibility. Adding tasks to a project \u00b6 Creating a project is simple. You fill in some data via the web interface, and the project is created. Once you have it, you will need to add tasks to them. To do it, you could use one of the available PYBOSSA importers: Amazon S3: to import images, videos, audios or PDFs. Youtube: to import videos. Google Spreadsheets: to import spreadsheets. CSV: to import spreadsheets. EpiCollect+: to import form data from mobile phones with geolocalized information like images. Dropbox: to import pictures, videos, audios or PDFs. IIIF manifests: to import images (and in future, video or audio). Tip If you need an importer, please, add a Github Issue in our repository so we can implement it. While these importers solve most of the problems, in some scenarios you will need to import data into your PYBOSSA project in a different way. For these cases, we recommend you to use our command line tool pbs or just write a script that will talk directly to the PYBOSSA API . Scifabric provides several PYBOSSA project templates that can be re-used for creating new projects easily: Flickr Person Finder : an image classification template, Urban Parks : a geo-localizing using web-maps template, PDF Transcribe : a transcription template. The templates provide the following tools: Task Creator : check in the repository the createTasks.py script (deprecated as we use now pbs ), Task Presenter : check in the repository the template.html file, Tutorial : check in the repository the tutorial.html file, Project description : check in the repository the project.json and long_description.md files. We recommend you to read the tutorial as it gives a step by step guide about how you can create a project, write a script to import tasks, create the Task Presenter using the Flickr Person Finder template. Asking the crowd to participate \u00b6 Once we have the data in place, we would need to show it to the volunteers. We will achieve it by using the task presenter. As PYBOSSA runs mostly on the web (you can build native iOS or Android apps as well), a task presenter is usually an HTML page where we will load the task. For example, if we are classifying an image, we will insert the picture along with a form where the user can submit the response (the Task Presenter would also take care of sending that response back to the PYBOSSA server via an API call). Task Presenters can be written in any language and run anywhere as long as they can communicate with the PYBOSSA server via its API. PYBOSSA has a headless solution where developers can build native iOS and Android apps for interacting with PYBOSSA as well as Single Page Applications using popular Javascript frameworks. Scifabric provides several template projects that can be re-used to create your project: Flickr Person Finder : an image classification template, Urban Parks : a geo-localizing using web-maps template, PDF Transcribe : a transcription template. The template projects provide the task presenter, where you can learn how to use it. We recommend you to read the tutorial as it gives a step by step guide about how you can create a project, write the Task Creator and Presenter from scratch using the Flickr Person Finder template project.","title":"Introduction"},{"location":"build/intro/#introduction","text":"PYBOSSA has two main components: the server and the projects. Professional PYBOSSA projects. If you want to build a project, you can hire Scifabric for designing, building, and analysing your data. Check Scifabric solutions .","title":"Introduction"},{"location":"build/intro/#the-server","text":"The PYBOSSA server is a web server with a RESTful API that distributes tasks among volunteers using a simple API. You can start directly using this service without any cost (setting your own server), or if you prefer you can hire one of our PYBOSSA server options .","title":"The server"},{"location":"build/intro/#architecture","text":"The following diagram gives you an overview of how a PYBOSSA system works: A PYBOSSA server can have one or more projects. A project can have one or more tasks, and PYBOSSA takes care of distributing the tasks among the volunteers. This distribution happens when a volunteer requests a task. PYBOSSA checks which available tasks can be sent to the user, and sends them. When the volunteer sends a task run (a classification, transcription, analysis, etc.) PYBOSSA saves it. PYBOSSA supports real-time data analysis. If the project has this feature enabled, PYBOSSA will notify, using a webhook POST, a microservice to do the statistical analysis and save a result for the given task based on the task runs of the task.","title":"Architecture"},{"location":"build/intro/#the-project","text":"A PYBOSSA project is an HTML page with some JavaScript that will load a task from a PYBOSSA server and present it to the volunteer and ask the user to, for instance, classify an image or transcribe a handwritten document. A PYBOSSA project has two main components: The Task Presenter : an HTML document where the JavaScript will load the task data into the DOM ; and The Task Importer : usually a script that will upload the tasks for the project into the PYBOSSA server. Projects can be easily created using two approaches: Using the Web interface : where you can create a project, write the Task Presenter and upload the tasks using the simplified built-in Task Importers (get tasks from Amazon S3, Dropbox, Youtube, CSV, Google Spreadsheets a IIIF manifest); or Using the API: where you will be able to create the project, write the Task Presenter . For importing the tasks, you can use the Task Importer of your project, use our command line tool , or if you prefer it to create a specific script that will use the PYBOSSA API for this part using your preferred programming language. The Web Interface is an excellent start point to learn a bit more about the PYBOSSA architecture and how you can develop a simple project in a short time, while the API will give you more options regarding flexibility.","title":"The Project"},{"location":"build/intro/#adding-tasks-to-a-project","text":"Creating a project is simple. You fill in some data via the web interface, and the project is created. Once you have it, you will need to add tasks to them. To do it, you could use one of the available PYBOSSA importers: Amazon S3: to import images, videos, audios or PDFs. Youtube: to import videos. Google Spreadsheets: to import spreadsheets. CSV: to import spreadsheets. EpiCollect+: to import form data from mobile phones with geolocalized information like images. Dropbox: to import pictures, videos, audios or PDFs. IIIF manifests: to import images (and in future, video or audio). Tip If you need an importer, please, add a Github Issue in our repository so we can implement it. While these importers solve most of the problems, in some scenarios you will need to import data into your PYBOSSA project in a different way. For these cases, we recommend you to use our command line tool pbs or just write a script that will talk directly to the PYBOSSA API . Scifabric provides several PYBOSSA project templates that can be re-used for creating new projects easily: Flickr Person Finder : an image classification template, Urban Parks : a geo-localizing using web-maps template, PDF Transcribe : a transcription template. The templates provide the following tools: Task Creator : check in the repository the createTasks.py script (deprecated as we use now pbs ), Task Presenter : check in the repository the template.html file, Tutorial : check in the repository the tutorial.html file, Project description : check in the repository the project.json and long_description.md files. We recommend you to read the tutorial as it gives a step by step guide about how you can create a project, write a script to import tasks, create the Task Presenter using the Flickr Person Finder template.","title":"Adding tasks to a project"},{"location":"build/intro/#asking-the-crowd-to-participate","text":"Once we have the data in place, we would need to show it to the volunteers. We will achieve it by using the task presenter. As PYBOSSA runs mostly on the web (you can build native iOS or Android apps as well), a task presenter is usually an HTML page where we will load the task. For example, if we are classifying an image, we will insert the picture along with a form where the user can submit the response (the Task Presenter would also take care of sending that response back to the PYBOSSA server via an API call). Task Presenters can be written in any language and run anywhere as long as they can communicate with the PYBOSSA server via its API. PYBOSSA has a headless solution where developers can build native iOS and Android apps for interacting with PYBOSSA as well as Single Page Applications using popular Javascript frameworks. Scifabric provides several template projects that can be re-used to create your project: Flickr Person Finder : an image classification template, Urban Parks : a geo-localizing using web-maps template, PDF Transcribe : a transcription template. The template projects provide the task presenter, where you can learn how to use it. We recommend you to read the tutorial as it gives a step by step guide about how you can create a project, write the Task Creator and Presenter from scratch using the Flickr Person Finder template project.","title":"Asking the crowd to participate"},{"location":"build/model/","text":"Domain Model \u00b6 This section introduces the main domain objects present in the PYBOSSA system (see the api section for details about how you can access some of the objects using the API). Overview \u00b6 PYBOSSA has 5 main domain objects: Project : the overall Project to which Tasks are associated. HasA: Category HasMany: Tasks Task : an individual Task which can be performed by a user. A Task is associated to a project. HasA: Project HasA: Result HasMany: TaskRuns TaskRun : the answers of a specific User performing a specific task HasA: Task HasA: User Result : the statistical result of analyzing the task runs for a given task in a project HasA: Task HasMany: TaskRuns HelpingMaterial : media files for building advance tutorials HasA: Project Page : page layouts for building advance SPAs or Jamstack solutions HasA: Project User : a user account Category : a project category HasMany: Projects There are some attributes common across most of the domain objects notably: create_time : the Datetime (as an integer) when object was created. info : a \u2018blob-style\u2019 attribute into which one can store arbitrary JSON. This attribute is use to any additional information one wants (e.g. Task configuration or Task results on TaskRun) For more detailed information about the model, check the source code .","title":"Domain model"},{"location":"build/model/#domain-model","text":"This section introduces the main domain objects present in the PYBOSSA system (see the api section for details about how you can access some of the objects using the API).","title":"Domain Model"},{"location":"build/model/#overview","text":"PYBOSSA has 5 main domain objects: Project : the overall Project to which Tasks are associated. HasA: Category HasMany: Tasks Task : an individual Task which can be performed by a user. A Task is associated to a project. HasA: Project HasA: Result HasMany: TaskRuns TaskRun : the answers of a specific User performing a specific task HasA: Task HasA: User Result : the statistical result of analyzing the task runs for a given task in a project HasA: Task HasMany: TaskRuns HelpingMaterial : media files for building advance tutorials HasA: Project Page : page layouts for building advance SPAs or Jamstack solutions HasA: Project User : a user account Category : a project category HasMany: Projects There are some attributes common across most of the domain objects notably: create_time : the Datetime (as an integer) when object was created. info : a \u2018blob-style\u2019 attribute into which one can store arbitrary JSON. This attribute is use to any additional information one wants (e.g. Task configuration or Task results on TaskRun) For more detailed information about the model, check the source code .","title":"Overview"},{"location":"build/overview/","text":"Quickstart: Creating a Project \u00b6 This is a short guide on how you can create a PYBOSSA project. You may wish to start with the step by step tutorial ; which walks through creating a simple photo classification project if you want to understand all the details about how a project works. First of all, we have to create a project for the project. To create a project, you will have to provide the following information: Name , Short name or slug , and Description The slug or short name is a shortcut for accessing the project via the web (short URLs like this https://crowdsourced.micropasts.org.com/project/slug ). The description is a short sentence that will be used to describe your project (think about it as a Tweet long description). A project can be created using two different methods: web interface, or API interface. Using the Web Interface \u00b6 Creating a project using the web interface involves four steps: Building the project, Import the tasks using one of the available task importers , Write the task-presenter for the users, and Publish the project. Creating the project \u00b6 To create a project using the web interface you have to: Create a PYBOSSA account \u00b6 You can create an account filling a form. You can also set preferences for language, location, area of expertise (termed as user type) and set metadata for the account. For this, pybossa server need to be configured with new settings; sample for same can be obtained from pybossa/settings_upref_mdata.py.tmpl. Rename settings_upref_mdata.py.tmpl to settings_upref_mdata.py and copy it under folder containing settings_local.py. With this, contents of settings_upref_mdata.py will now be available on the account registration form. User preference/metedata set for the account can viewed and modified under account profile page. Creating the project \u00b6 Once you have an account, go to https://crowdsourced.micropasts.org/project/new After clicking on the previous link, you will have to fill in a form with the basic information needed to create your project: Name : the full name of your project, i.e., Flickr Person Finder . Short Name : the slug or short name used in the URL for accessing your project, i.e., flickrperson . Long Description : A long description where you can use Markdown to format the description of your project. This field is usually used to provide information about the project, the developer, the researcher group or institutions involved in the project, etc. Note PYBOSSA usually provides two Project Categories by default: prehistory is the default. Once you have filled all the fields, click in the Create the project button, and you will have created your first project After creating the project, you should be redirected to the Settings\u2019 project page, where you will be able to customize your project by adding some extra information or changing some settings. There, you will find a form with the same fields as in the previous step (just in case you\u2019ve changed your mind and wanted to change any of them) plus the following: Description : A short description of the project, e.g., A project to classify cancer cells . By default, this field is automatically populated with the information that you provided in the Long description field. Allow Anonymous Contributors : By default, anonymous and authenticated users can participate in all the projects. However, you can change it only to allow authenticated volunteers to participate. Password : If you want to control who can access your project, you can set a password here to share with those you allow to do it. If you leave it blank, then no password will protect your project. Category : Select a category that fits your project. Categories are added and managed by the server administrators. Note Also, you will be able to select and upload a image from your local computer to set it as the project image throughout the server. Importing the tasks via the built-in CSV Task Importer \u00b6 Tasks can be imported from different services like Dropbox or Amazon S3 via the importers. To use one, just do the following: 1. Navigate to your project\u2019s page (you can directly access it using the slug project name: http://server/project/slug ). 2. Click in the Tasks section -on the left side local navigation menu: And click again on the Import Tasks card. After clicking on it, you will see several options. The first ones are for using the different kinds of importers supported by PYBOSSA: Amazon S3, Dropbox, Youtube, Google Spreadsheet, CSV URL, IIIF, and EpiCollect Plus. The other importers are very similar. In most cases, you\u2019ll provide a URL to the resource, like for the CSV and Google Spreadsheet importer, while the Dropbox, Amazon S3, Youtube, and EpiCollect Plus importers will have a friendly interface to import data automagically for you. Note If you\u2019re trying to import from a Google Spreadsheet, ensure the file is accessible to everyone via the Share option, choosing: \u201cPublic on the web - Anyone on the Internet can find and view.\u201d Note Your spreadsheet/CSV file must contain a header row. All the fields in the CSV will be serialized to JSON and stored in the info field. If your field name is one of state , quorum , calibration , priority_0 , or n_answers , it will be saved in the respective columns. Your spreadsheet must be visible to the public or everyone with an URL. In the Task Importer section, you\u2019ll also find other pre-loaded Google Spreadsheets URLs. Those templates are examples that you can use to learn how to create your spreadsheets and import data for image, sound, video, pdf mining and mapping projects. By using these templates, you\u2019ll be able to learn the structure of the tasks, and directly re-use the task-presenter templates that know the structure (name of the columns) for presenting the task. Additionally, you can re-use the templates by downloading the CSV files from Google Docs, or even copying them to your own Google Drive account (click in File Make a copy in the Google Doc Spreadsheet). Scifabric provides the following templates: Image Pattern Recognition Sound Pattern Recognition Video Pattern Recognition Geo-coding and PDF transcription . Tip If you import the same URL again, only new records will be added to the project. Importing the tasks from an EpiCollect Plus Public Project \u00b6 EpiCollect provides a web tool for the generation of forms for many kinds of mobile data collection projects. Data can be collected using multiple mobile phones running either the Android Operating system or the iPhone (using the EpiCollect mobile app), and all data can be synchronized from the phones and viewed centrally (using Google Maps) via the Project website or directly on the phones. EpiCollect can help you to recollect data samples according to a form that could include multimedia like photos. Moreover, EpiCollect can geolocate the data sample as it supports the built-in GPS that all modern smartphones have. For example, you can create an EpiCollect project where the form will ask the user to take a picture of a lake, geo-locate it automatically via the built-in smartphone GPS and upload the image to the EpiCollect server. If the user does not have Internet access at that moment, the user will be able to synchronize the data afterward, i.e., when the user has access to an Internet WIFI hotspot. PYBOSSA can automatically import data from a public EpiCollect Plus project that you own or that it is publicly available on the website. Then you will be able to validate, analyze, etc. the data that has been obtained via EpiCollect. If you want to import the data points submitted to a public EpiCollect project, you will have to follow the next steps: Navigate to your project\u2019s page (you can directly access it using the slug project name: http://server/project/slug ). Click in the Tasks section -on the left side local navigation menu. And click on the Import Tasks button. After clicking on it you will see several different options. Click on the Use an EpiCollect Project one. Then, type the name of the EpiCollect project and the name of the form that you want to import and click on the import button. All the data points should be imported now in your project. Note EpiCollect projects will be gathering data mostly all the time, for this reason, if you import again the same EpiCollect project, only new data points will be imported. This feature will allow you to easily add new data points to the PYBOSSA project without having to do anything special. Importing the tasks from a Flickr photo set \u00b6 PYBOSSA also allows importing tasks for projects based on images (like image pattern recognition ones) directly from a Flickr [set] https://www.flickr.com/help/photos/#150321191 ) (also called album). When importing tasks from a Flickr set, a new task will be created for each of the photos in the specified set. The tasks will include the following data about each picture (which will be later available to be used in the task presenter): title: the title of the photograph, as it appears on Flickr. URL: the URL to the raw .jpg image, in its original size. url_b: the URL to the image, \u2018big sized. url_m: the URL to the image, \u2018medium\u2019 sized. link: a link to the photo page on Flickr (not to the raw image). You can import tasks from a Flickr photo set (a.k.a. album) in either of the following ways: using your Flickr account, or by typing the album ID. The easiest one is to give the PYBOSSA server permission to access your Flickr list of albums. To do so, you\u2019ll have to log in to your Flickr account by clicking the \u201cLog in Flickr\u201d button. Then you\u2019ll be redirected to Flickr, where you will be asked if you want to allow PYBOSSA to access your Flickr information. If you say yes, then you\u2019ll be again redirected to PYBOSSA, and you\u2019ll see all of your albums. Choose one of them and then click the \u201cImport\u201d button to get all the photos created as tasks for your project. Note Next time you try to import photos using the Flickr importer, you\u2019ll see the albums for your account again. If you don\u2019t want PYBOSSA to access them anymore, or just want to use another Flickr account, then click \u201cRevoke access.\u201d Another option to import from a Flickr album is by specifying the ID of the set (collection) directly. This option is a bit more advanced, but it allows you to import from a photo set that you don\u2019t own (although, it will have to be public. Also check the rights of the photos on it!). Another advantage is that you don\u2019t need to log in to Flickr, so you don\u2019t even need to have a Flickr account. These are the steps: Navigate to your project\u2019s page and click in the Tasks section. Then click on the Import Tasks button, and select the Flickr importer . Type the ID of the Flickr set you want to import the photos from, then click on the import button. If you cannot find the ID or don\u2019t know which one it is, just browse to the Flickr photo set and check the URL. Can you see that last long number right at the end of it? That\u2019s what you\u2019re looking for! Just like with the other importers, each task will be created only once, even if you import twice from the same Flickr set (unless you add new photos to it, of course!). Note You will need to make sure that every photo belonging to the set has the visibility set to public, so the PYBOSSA server can then access and present them to the volunteers of your project. Note For enabling the Flickr importer, check this section . Importing the tasks from a Dropbox account \u00b6 You can import tasks from arbitrary data hosted on a Dropbox account with the Dropbox importer. When you import tasks in this way, the following information will be added to the info field of each task, available later to be used in the task presenter of the project: filename: just it, the name of the file you\u2019re importing as a task. link: the link to the Dropbox page showing the file. link_raw: the link to the raw file served by Dropbox. This is the one you\u2019ll have to use if you want to direct link to the file from the presenter (e.g., for using an image in a tag, you\u2019d do: ). In addition to this generic information, the Dropbox importer will also recognize some files by their extension and will attach some extra information to them. For pdf files (.pdf extension), the following fields will be obtained too: pdf_url: direct link to the raw pdf file, with CORS support. For image files (.png, jpg, .jpeg and .gif extensions) the following data will be available: url_m: the same as link_raw url_b: the same as link_raw title: the same as the filename For audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav extensions): audio_url: raw link to the audio file, which can be used inside an HTML 5 <audio> tag and supports CORS. For video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions): audio_url: raw link to the video file, which can be used inside an HTML 5 <video> tag and supports CORS. The tasks created with the Dropbox importer are ready to be used with the template project presenters available in PYBOSSA, as they include the described fields. Thus, importing your images from Dropbox will allow you to use the image pattern recognition template with them immediately. If you import videos, audio files or PDFs you will also be able to use the presenter templates for video pattern recognition, sound pattern recognition or documents transcription, respectively, with no additional modifications and have them working right away (as long as the files have any of the mentioned file extensions, of course). For using this importer, just follow these are the steps: Navigate to your project\u2019s page and click in the Tasks section. Then click on the Import Tasks button, and select the Dropbox importer . Click on the \u201cChoose from Dropbox\u201d icon. You will be asked your Dropbox account credentials. Then select as many files as you want: You can repeat step 3 as many times as you want, and more files will be added to your import. Then, click on \u201cImport.\u201d Note For enabling the Dropbox importer, check this section . Importing tasks from an Amazon S3 bucket \u00b6 Tasks can be imported from data hosted on the Amazon S3 service. Similarly to the Dropbox importer, these tasks can use different kind of data, like images, videos, audios, PDF files, etc. hosted on any S3 bucket. The S3 importer will work pretty much the same as the Dropbox one. When using it, the created tasks will contain the following data in the info field: filename: just it, the name of the file you\u2019re importing as a task. link: the link to the raw file served from Amazon S3. URL: same as the above. In addition to this generic information, the S3 importer will also recognize some files by their extension and will attach some extra information to them. For pdf files (.pdf extension), the following field will be obtained too: pdf_url: direct link to the raw pdf file. For image files (.png, jpg, .jpeg and .gif extensions) the following data will be available: url_m: the same as the link. url_b: the same as the link. title: the same as the filename. For audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav extensions): audio_url: raw link to the audio file, which can be used inside an HTML 5 tag. For video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions): audio_url: raw link to the video file, which can be used inside an HTML 5 tag. The tasks created with the S3 importer are ready to be used with the template project presenters available in PYBOSSA, as they include the described fields. Thus, importing your images from S3 will allow you to use the image pattern recognition template with them immediately. If you import videos, audio files or PDFs you will also be able to use the presenter templates for video pattern recognition, sound pattern recognition or documents transcription, respectively, with no additional modifications and have them working right away (as long as the files have any of the mentioned file extensions, of course). Importing from an S3 bucket requires that the bucket visibility is set to public so its content can be seen and listed by PYBOSSA. To make a bucket public, go to your AWS management console and select the S3 service. Then select the bucket you want to make public and click on \u201cProperties.\u201d Click on \u201cAdd more Permissions\u201d and add a new one with \u201cGrantee: Everyone\u201d and the \u201cList\u201d checkbox selected, like in the following image: You may also need to enable CORS in the bucket. In the same menu as above, click on \u201cEdit CORS Configuration\u201d and configure it. You can learn more here . Finally, you need to make sure that every file inside the bucket that you want to use in a task has a public link too. Go to the bucket content and select the files. Then click on \u201cActions\u201d and select \u201cMake Public\u201d. Your files will now be visible for everyone, including a PYBOSSA server. Once your S3 bucket is ready, you can follow these steps to import tasks from it: Navigate to your project\u2019s page and click in the Tasks section. Then click on the Import Tasks button, and select the S3 importer . Type the name of the bucket from which you will be importing your tasks and click on \u201cSearch in the bucket.\u201d If you followed the steps above and your bucket is public, you will see a list of the items it contains. Select as many as you want: When you\u2019re ready, click on \u201cImport.\u201d Importing the tasks from Youtube \u00b6 Tasks can be imported from Youtube. Currently, the importer supports importing from Youtube with: Playlists When importing the video, the importer parses all videos information and creates tasks with info fields: video_url: the URL of the youtube video which can be embedded in the task form. oembed: embeddable code for the (old) PYBOSSA video templates. The tasks created with the Youtube importer are ready to be used with the youtube and video templates. Note For enabling the Youtube importer, check this section . Importing the tasks from a IIIF manifest \u00b6 The International Image Interoperability Framework (IIIF) is a protocol for standardized image retrieval created by a community of the world\u2019s leading research libraries, major national libraries and not-for-profit image repositories in an effort to collaboratively produce an interoperable technology and community framework for image delivery. Content made available via the IIIF Presentation API can be imported into PyBossa by passing the URI of a manifest. All images for all canvases defined in the first sequence of the manifest will be imported. In practice, this means that all images will be imported in their default order and each image used to generate a single task. Each task will include a reference to the canvas ID, the manifest ID, the tile source for the image and URIs to request different sizes of the image from the IIIF Image API . Here are the steps to import: Navigate to your project\u2019s page and click in the Tasks section. Then click on the Import Tasks button, and select the IIIF importer . Type the URI of the IIIF manifest that you want to import from, then click on the import button. Flushing all the tasks \u00b6 The project settings gives you an option to automatically delete all the tasks and associated task volunteer from your project. Danger This action cannot be undone, so please, be sure that you want to actually, delete all the tasks. Warning This action will only allow you to delete tasks that are not associated with a result. When a result is created, that task and its task runs cannot be deleted so the volunteers can always have access to their contributions. If you are sure that you want to flush all the tasks and task runs for your project, go to the project page ( http://server/project/slug/tasks/ ) and click on the Settings option of the left local navigation menu: Then, you will see that there is a subsection called: Task Settings and a button with the label: Delete the tasks . Click on that button and a new page will be shown: As you can see, a red warning alert is shown, warning you that if you click on the yes button, you will be deleting not only the project tasks but also the answers (task runs) that you have recollected for your project. Be sure before proceeding that you want to delete all the tasks. After clicking on the yes button, you will see that all the tasks have been flushed. Creating the Task Presenter \u00b6 Once you have the project and you have imported some tasks, you can start working with the task-presenter, which will be the web project that will get the tasks of your project, present them to the volunteer and save the answers provided by the users. If you have followed all the steps described in this section, you will be already on the page of your project, however, if you are not, you only need to access your project URL to work with your project. If your project slug or short name is flickrperson you will be able to access the project managing options in this URL: 1 http://PYBOSSA-SERVER/project/flickrperson Note You need to be logged in. Otherwise, you will not be able to modify the project. Another way of accessing your project (or projects) is clicking on your username (at the navbar) and select the My Projects item from the but it menu. From there you will be able to manage your projects: Once you have chosen your project, you can add a task-presenter by clicking on the Tasks local navigation link, and then clicking on the button named Editor under the Task Presenter box. After clicking this button, a new web page will be shown where you can choose a template to start coding your project, so you don\u2019t have to start from scratch. After choosing one of the templates, you will be able to adapt it to fit your project needs in a web text editor. Click on the Preview button to get an idea of how it will look like your task-presenter. We recommend reading the Step by step tutorial as you will understand how to create the task presenter, which explains how you can add some HTML skeleton to load the task data, input fields to get the answer from the users, and some JavaScript to make it work. Publishing the project \u00b6 After completing the previous three steps, your project will be almost ready. The final step is to publish it, because now it will still be a draft, and it will be hidden to everyone but you (and admins). When your project is a draft, you can contribute to it, and the answers (task runs) and results will be stored in the database so you can have access to them (and test the webhooks solution if you want to do real-time analysis). However, in the moment of publishing the project all the task runs and results (as well as the webhooks log entries) will be flushed, so don\u2019t be afraid and try it as much as you can until you are sure that everything works as expected. Once you think the project is ready for the world to see it, just click on the Publish button: Note Publishing a project cannot be undone, so please double check everything before taking the step. Note You can allow other users to give you feedback and let them try and see your project before it has been published. To do it so, just protect it with a password, and people will be able to access it (as long as they have the password, of course). After publishing it, you will be able to access your project using the slug, or under your account in the Published projects section. Also, results will begin to be created every time a task is completed. Enjoy! Using the API \u00b6 Creating a project using the API involves these steps: Create the project, Create the tasks for the project, and Create the task-presenter for the users. Publish it. This needs to be done via the web interface. Creating the project \u00b6 You can create a project via the API URL /api/project with a POST request (See api ). You have to provide the following information about the project and convert it to a JSON object (the actual values are taken from the Flickr Person demo project ): na me = u'Flickr Perso n Fi n der' shor t _ na me = u'FlickrPerso n ' descrip t io n = u'Do you see a huma n i n t his pho t o?' i nf o = { ' tas k_prese nter ' : u'<div> Skele t o n f or t he tas ks</div>' } da ta = dic t ( na me = na me , shor t _ na me = shor t _ na me , descrip t io n = descrip t io n , i nf o = i nf o , hidde n = 0 ) da ta = jso n .dumps(da ta ) Flickr Person Finder, which is a demo template that you can re-use to create your own project, simplifies this step by using a simple file named project.json : { \"name\" : \"Flickr Person Finder\" , \"short_name\" : \"flickrperson\" , \"description\" : \"Image pattern recognition\" , } The file provides the basic configuration for your project. Adding tasks \u00b6 As in all the previous steps, we are going to create a JSON object and POST it using the following API URL /api/task to add tasks to a project that you own. For PYBOSSA all the tasks are JSON objects with a field named info where the owners of the project can add any JSON object that will represent a task for their project. For example, using again the Flickr Person demo project template, we need to create a JSON object that should have the link to the photo that we want to identify: info = dict ( link = photo [ 'link' ], url = photo [ 'url_m' ], question = 'Do you see a human face in this photo?' ) data = dict ( project_id = project_id , state = 0 , info = info , calibration = 0 , priority_0 = 0 ) data = json . dumps ( data ) Note \u2018url_m\u2019 is a pattern to describe the URL to the m medium size of the photo used by Flickr. It can be whatever you want, but as we are using Flickr, we use the same patterns for storing the data. The most important field for the task is the info one. This field will be used to store a JSON object with the required data for the task. As Flickr Person is trying to figure out if there is a human or not in a photo, the provided information is: the Flickr web page posting the photo, and the direct URL to the image, the value. The info field is a free-form field that can be populated with any structure. If your project needs more fields, you can add them and use the format that best fits your needs. These steps are usually coded in a script. The Flickr Person Finder projects provides a template for the task-creator that can be re-used without any problems (check the createTasks.py script). Note The API request has to be authenticated and authorized . You can get an API-KEY creating an account on the server, and check the API-KEY created for your user, check the profile account (click on your username) and copy the field API-KEY . This API-KEY should be passed as a POST argument like this with the previous data: [POST] https://crowdsourced.micropasts.org/api/task/?api_key=API-KEY One of the benefits of using the API is that you can create tasks polling other web services like Flickr, where you can use an API. Once we have created the tasks, we will need to create the task-presenter for the project. Creating the Task Presenter \u00b6 The task-presenter is usually a template of HTML and JavaScript that will present the tasks to the users, and save the answers in the database. The Flickr Person demo project provides a template which has a to load the input files, in this case, the photo, and another to load the action buttons that the users will be able to press to answer the question and save it in the database. Please, check the tutorial for more details about the task-presenter. As we will be using the API for creating the task presenter, we will have to create an HTML file in our computer, read it from a a script, and post it into PYBOSSA using the API. Once the presenter has been posted to the project, you can edit it locally with your editor, or using the PYBOSSA interface (see previous section). Note The API request has to be authenticated and authorized . You can get an API-KEY creating an account on the server, and check the API-KEY created for your user, check the profile account (click on your user name) and copy the field API-KEY . This API-KEY should be passed as a POST argument like this with the previous data: [POST] https://crowdsourced.micropasts.org/api/project/?api_key=API-KEY Using PYBOSSA API from the command line \u00b6 While you can use your preferred programming language to access the API, we recommend you to use the PYBOSSA PBS command line tool as it simplifies the usage of PYBOSSA for any given project. Creating a project is as simple as creating a project.json file and then run the following command: pbs --server server --api-key yourkey create_project Please, read the pbs section for more details.","title":"Quickstart: Creating a project"},{"location":"build/overview/#quickstart-creating-a-project","text":"This is a short guide on how you can create a PYBOSSA project. You may wish to start with the step by step tutorial ; which walks through creating a simple photo classification project if you want to understand all the details about how a project works. First of all, we have to create a project for the project. To create a project, you will have to provide the following information: Name , Short name or slug , and Description The slug or short name is a shortcut for accessing the project via the web (short URLs like this https://crowdsourced.micropasts.org.com/project/slug ). The description is a short sentence that will be used to describe your project (think about it as a Tweet long description). A project can be created using two different methods: web interface, or API interface.","title":"Quickstart: Creating a Project"},{"location":"build/overview/#using-the-web-interface","text":"Creating a project using the web interface involves four steps: Building the project, Import the tasks using one of the available task importers , Write the task-presenter for the users, and Publish the project.","title":"Using the Web Interface"},{"location":"build/overview/#creating-the-project","text":"To create a project using the web interface you have to:","title":"Creating the project"},{"location":"build/overview/#create-a-pybossa-account","text":"You can create an account filling a form. You can also set preferences for language, location, area of expertise (termed as user type) and set metadata for the account. For this, pybossa server need to be configured with new settings; sample for same can be obtained from pybossa/settings_upref_mdata.py.tmpl. Rename settings_upref_mdata.py.tmpl to settings_upref_mdata.py and copy it under folder containing settings_local.py. With this, contents of settings_upref_mdata.py will now be available on the account registration form. User preference/metedata set for the account can viewed and modified under account profile page.","title":"Create a PYBOSSA account"},{"location":"build/overview/#creating-the-project_1","text":"Once you have an account, go to https://crowdsourced.micropasts.org/project/new After clicking on the previous link, you will have to fill in a form with the basic information needed to create your project: Name : the full name of your project, i.e., Flickr Person Finder . Short Name : the slug or short name used in the URL for accessing your project, i.e., flickrperson . Long Description : A long description where you can use Markdown to format the description of your project. This field is usually used to provide information about the project, the developer, the researcher group or institutions involved in the project, etc. Note PYBOSSA usually provides two Project Categories by default: prehistory is the default. Once you have filled all the fields, click in the Create the project button, and you will have created your first project After creating the project, you should be redirected to the Settings\u2019 project page, where you will be able to customize your project by adding some extra information or changing some settings. There, you will find a form with the same fields as in the previous step (just in case you\u2019ve changed your mind and wanted to change any of them) plus the following: Description : A short description of the project, e.g., A project to classify cancer cells . By default, this field is automatically populated with the information that you provided in the Long description field. Allow Anonymous Contributors : By default, anonymous and authenticated users can participate in all the projects. However, you can change it only to allow authenticated volunteers to participate. Password : If you want to control who can access your project, you can set a password here to share with those you allow to do it. If you leave it blank, then no password will protect your project. Category : Select a category that fits your project. Categories are added and managed by the server administrators. Note Also, you will be able to select and upload a image from your local computer to set it as the project image throughout the server.","title":"Creating the project"},{"location":"build/overview/#importing-the-tasks-via-the-built-in-csv-task-importer","text":"Tasks can be imported from different services like Dropbox or Amazon S3 via the importers. To use one, just do the following: 1. Navigate to your project\u2019s page (you can directly access it using the slug project name: http://server/project/slug ). 2. Click in the Tasks section -on the left side local navigation menu: And click again on the Import Tasks card. After clicking on it, you will see several options. The first ones are for using the different kinds of importers supported by PYBOSSA: Amazon S3, Dropbox, Youtube, Google Spreadsheet, CSV URL, IIIF, and EpiCollect Plus. The other importers are very similar. In most cases, you\u2019ll provide a URL to the resource, like for the CSV and Google Spreadsheet importer, while the Dropbox, Amazon S3, Youtube, and EpiCollect Plus importers will have a friendly interface to import data automagically for you. Note If you\u2019re trying to import from a Google Spreadsheet, ensure the file is accessible to everyone via the Share option, choosing: \u201cPublic on the web - Anyone on the Internet can find and view.\u201d Note Your spreadsheet/CSV file must contain a header row. All the fields in the CSV will be serialized to JSON and stored in the info field. If your field name is one of state , quorum , calibration , priority_0 , or n_answers , it will be saved in the respective columns. Your spreadsheet must be visible to the public or everyone with an URL. In the Task Importer section, you\u2019ll also find other pre-loaded Google Spreadsheets URLs. Those templates are examples that you can use to learn how to create your spreadsheets and import data for image, sound, video, pdf mining and mapping projects. By using these templates, you\u2019ll be able to learn the structure of the tasks, and directly re-use the task-presenter templates that know the structure (name of the columns) for presenting the task. Additionally, you can re-use the templates by downloading the CSV files from Google Docs, or even copying them to your own Google Drive account (click in File Make a copy in the Google Doc Spreadsheet). Scifabric provides the following templates: Image Pattern Recognition Sound Pattern Recognition Video Pattern Recognition Geo-coding and PDF transcription . Tip If you import the same URL again, only new records will be added to the project.","title":"Importing the tasks via the built-in CSV Task Importer"},{"location":"build/overview/#importing-the-tasks-from-an-epicollect-plus-public-project","text":"EpiCollect provides a web tool for the generation of forms for many kinds of mobile data collection projects. Data can be collected using multiple mobile phones running either the Android Operating system or the iPhone (using the EpiCollect mobile app), and all data can be synchronized from the phones and viewed centrally (using Google Maps) via the Project website or directly on the phones. EpiCollect can help you to recollect data samples according to a form that could include multimedia like photos. Moreover, EpiCollect can geolocate the data sample as it supports the built-in GPS that all modern smartphones have. For example, you can create an EpiCollect project where the form will ask the user to take a picture of a lake, geo-locate it automatically via the built-in smartphone GPS and upload the image to the EpiCollect server. If the user does not have Internet access at that moment, the user will be able to synchronize the data afterward, i.e., when the user has access to an Internet WIFI hotspot. PYBOSSA can automatically import data from a public EpiCollect Plus project that you own or that it is publicly available on the website. Then you will be able to validate, analyze, etc. the data that has been obtained via EpiCollect. If you want to import the data points submitted to a public EpiCollect project, you will have to follow the next steps: Navigate to your project\u2019s page (you can directly access it using the slug project name: http://server/project/slug ). Click in the Tasks section -on the left side local navigation menu. And click on the Import Tasks button. After clicking on it you will see several different options. Click on the Use an EpiCollect Project one. Then, type the name of the EpiCollect project and the name of the form that you want to import and click on the import button. All the data points should be imported now in your project. Note EpiCollect projects will be gathering data mostly all the time, for this reason, if you import again the same EpiCollect project, only new data points will be imported. This feature will allow you to easily add new data points to the PYBOSSA project without having to do anything special.","title":"Importing the tasks from an EpiCollect Plus Public Project"},{"location":"build/overview/#importing-the-tasks-from-a-flickr-photo-set","text":"PYBOSSA also allows importing tasks for projects based on images (like image pattern recognition ones) directly from a Flickr [set] https://www.flickr.com/help/photos/#150321191 ) (also called album). When importing tasks from a Flickr set, a new task will be created for each of the photos in the specified set. The tasks will include the following data about each picture (which will be later available to be used in the task presenter): title: the title of the photograph, as it appears on Flickr. URL: the URL to the raw .jpg image, in its original size. url_b: the URL to the image, \u2018big sized. url_m: the URL to the image, \u2018medium\u2019 sized. link: a link to the photo page on Flickr (not to the raw image). You can import tasks from a Flickr photo set (a.k.a. album) in either of the following ways: using your Flickr account, or by typing the album ID. The easiest one is to give the PYBOSSA server permission to access your Flickr list of albums. To do so, you\u2019ll have to log in to your Flickr account by clicking the \u201cLog in Flickr\u201d button. Then you\u2019ll be redirected to Flickr, where you will be asked if you want to allow PYBOSSA to access your Flickr information. If you say yes, then you\u2019ll be again redirected to PYBOSSA, and you\u2019ll see all of your albums. Choose one of them and then click the \u201cImport\u201d button to get all the photos created as tasks for your project. Note Next time you try to import photos using the Flickr importer, you\u2019ll see the albums for your account again. If you don\u2019t want PYBOSSA to access them anymore, or just want to use another Flickr account, then click \u201cRevoke access.\u201d Another option to import from a Flickr album is by specifying the ID of the set (collection) directly. This option is a bit more advanced, but it allows you to import from a photo set that you don\u2019t own (although, it will have to be public. Also check the rights of the photos on it!). Another advantage is that you don\u2019t need to log in to Flickr, so you don\u2019t even need to have a Flickr account. These are the steps: Navigate to your project\u2019s page and click in the Tasks section. Then click on the Import Tasks button, and select the Flickr importer . Type the ID of the Flickr set you want to import the photos from, then click on the import button. If you cannot find the ID or don\u2019t know which one it is, just browse to the Flickr photo set and check the URL. Can you see that last long number right at the end of it? That\u2019s what you\u2019re looking for! Just like with the other importers, each task will be created only once, even if you import twice from the same Flickr set (unless you add new photos to it, of course!). Note You will need to make sure that every photo belonging to the set has the visibility set to public, so the PYBOSSA server can then access and present them to the volunteers of your project. Note For enabling the Flickr importer, check this section .","title":"Importing the tasks from a Flickr photo set"},{"location":"build/overview/#importing-the-tasks-from-a-dropbox-account","text":"You can import tasks from arbitrary data hosted on a Dropbox account with the Dropbox importer. When you import tasks in this way, the following information will be added to the info field of each task, available later to be used in the task presenter of the project: filename: just it, the name of the file you\u2019re importing as a task. link: the link to the Dropbox page showing the file. link_raw: the link to the raw file served by Dropbox. This is the one you\u2019ll have to use if you want to direct link to the file from the presenter (e.g., for using an image in a tag, you\u2019d do: ). In addition to this generic information, the Dropbox importer will also recognize some files by their extension and will attach some extra information to them. For pdf files (.pdf extension), the following fields will be obtained too: pdf_url: direct link to the raw pdf file, with CORS support. For image files (.png, jpg, .jpeg and .gif extensions) the following data will be available: url_m: the same as link_raw url_b: the same as link_raw title: the same as the filename For audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav extensions): audio_url: raw link to the audio file, which can be used inside an HTML 5 <audio> tag and supports CORS. For video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions): audio_url: raw link to the video file, which can be used inside an HTML 5 <video> tag and supports CORS. The tasks created with the Dropbox importer are ready to be used with the template project presenters available in PYBOSSA, as they include the described fields. Thus, importing your images from Dropbox will allow you to use the image pattern recognition template with them immediately. If you import videos, audio files or PDFs you will also be able to use the presenter templates for video pattern recognition, sound pattern recognition or documents transcription, respectively, with no additional modifications and have them working right away (as long as the files have any of the mentioned file extensions, of course). For using this importer, just follow these are the steps: Navigate to your project\u2019s page and click in the Tasks section. Then click on the Import Tasks button, and select the Dropbox importer . Click on the \u201cChoose from Dropbox\u201d icon. You will be asked your Dropbox account credentials. Then select as many files as you want: You can repeat step 3 as many times as you want, and more files will be added to your import. Then, click on \u201cImport.\u201d Note For enabling the Dropbox importer, check this section .","title":"Importing the tasks from a Dropbox account"},{"location":"build/overview/#importing-tasks-from-an-amazon-s3-bucket","text":"Tasks can be imported from data hosted on the Amazon S3 service. Similarly to the Dropbox importer, these tasks can use different kind of data, like images, videos, audios, PDF files, etc. hosted on any S3 bucket. The S3 importer will work pretty much the same as the Dropbox one. When using it, the created tasks will contain the following data in the info field: filename: just it, the name of the file you\u2019re importing as a task. link: the link to the raw file served from Amazon S3. URL: same as the above. In addition to this generic information, the S3 importer will also recognize some files by their extension and will attach some extra information to them. For pdf files (.pdf extension), the following field will be obtained too: pdf_url: direct link to the raw pdf file. For image files (.png, jpg, .jpeg and .gif extensions) the following data will be available: url_m: the same as the link. url_b: the same as the link. title: the same as the filename. For audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav extensions): audio_url: raw link to the audio file, which can be used inside an HTML 5 tag. For video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions): audio_url: raw link to the video file, which can be used inside an HTML 5 tag. The tasks created with the S3 importer are ready to be used with the template project presenters available in PYBOSSA, as they include the described fields. Thus, importing your images from S3 will allow you to use the image pattern recognition template with them immediately. If you import videos, audio files or PDFs you will also be able to use the presenter templates for video pattern recognition, sound pattern recognition or documents transcription, respectively, with no additional modifications and have them working right away (as long as the files have any of the mentioned file extensions, of course). Importing from an S3 bucket requires that the bucket visibility is set to public so its content can be seen and listed by PYBOSSA. To make a bucket public, go to your AWS management console and select the S3 service. Then select the bucket you want to make public and click on \u201cProperties.\u201d Click on \u201cAdd more Permissions\u201d and add a new one with \u201cGrantee: Everyone\u201d and the \u201cList\u201d checkbox selected, like in the following image: You may also need to enable CORS in the bucket. In the same menu as above, click on \u201cEdit CORS Configuration\u201d and configure it. You can learn more here . Finally, you need to make sure that every file inside the bucket that you want to use in a task has a public link too. Go to the bucket content and select the files. Then click on \u201cActions\u201d and select \u201cMake Public\u201d. Your files will now be visible for everyone, including a PYBOSSA server. Once your S3 bucket is ready, you can follow these steps to import tasks from it: Navigate to your project\u2019s page and click in the Tasks section. Then click on the Import Tasks button, and select the S3 importer . Type the name of the bucket from which you will be importing your tasks and click on \u201cSearch in the bucket.\u201d If you followed the steps above and your bucket is public, you will see a list of the items it contains. Select as many as you want: When you\u2019re ready, click on \u201cImport.\u201d","title":"Importing tasks from an Amazon S3 bucket"},{"location":"build/overview/#importing-the-tasks-from-youtube","text":"Tasks can be imported from Youtube. Currently, the importer supports importing from Youtube with: Playlists When importing the video, the importer parses all videos information and creates tasks with info fields: video_url: the URL of the youtube video which can be embedded in the task form. oembed: embeddable code for the (old) PYBOSSA video templates. The tasks created with the Youtube importer are ready to be used with the youtube and video templates. Note For enabling the Youtube importer, check this section .","title":"Importing the tasks from Youtube"},{"location":"build/overview/#importing-the-tasks-from-a-iiif-manifest","text":"The International Image Interoperability Framework (IIIF) is a protocol for standardized image retrieval created by a community of the world\u2019s leading research libraries, major national libraries and not-for-profit image repositories in an effort to collaboratively produce an interoperable technology and community framework for image delivery. Content made available via the IIIF Presentation API can be imported into PyBossa by passing the URI of a manifest. All images for all canvases defined in the first sequence of the manifest will be imported. In practice, this means that all images will be imported in their default order and each image used to generate a single task. Each task will include a reference to the canvas ID, the manifest ID, the tile source for the image and URIs to request different sizes of the image from the IIIF Image API . Here are the steps to import: Navigate to your project\u2019s page and click in the Tasks section. Then click on the Import Tasks button, and select the IIIF importer . Type the URI of the IIIF manifest that you want to import from, then click on the import button.","title":"Importing the tasks from a IIIF manifest"},{"location":"build/overview/#flushing-all-the-tasks","text":"The project settings gives you an option to automatically delete all the tasks and associated task volunteer from your project. Danger This action cannot be undone, so please, be sure that you want to actually, delete all the tasks. Warning This action will only allow you to delete tasks that are not associated with a result. When a result is created, that task and its task runs cannot be deleted so the volunteers can always have access to their contributions. If you are sure that you want to flush all the tasks and task runs for your project, go to the project page ( http://server/project/slug/tasks/ ) and click on the Settings option of the left local navigation menu: Then, you will see that there is a subsection called: Task Settings and a button with the label: Delete the tasks . Click on that button and a new page will be shown: As you can see, a red warning alert is shown, warning you that if you click on the yes button, you will be deleting not only the project tasks but also the answers (task runs) that you have recollected for your project. Be sure before proceeding that you want to delete all the tasks. After clicking on the yes button, you will see that all the tasks have been flushed.","title":"Flushing all the tasks"},{"location":"build/overview/#creating-the-task-presenter","text":"Once you have the project and you have imported some tasks, you can start working with the task-presenter, which will be the web project that will get the tasks of your project, present them to the volunteer and save the answers provided by the users. If you have followed all the steps described in this section, you will be already on the page of your project, however, if you are not, you only need to access your project URL to work with your project. If your project slug or short name is flickrperson you will be able to access the project managing options in this URL: 1 http://PYBOSSA-SERVER/project/flickrperson Note You need to be logged in. Otherwise, you will not be able to modify the project. Another way of accessing your project (or projects) is clicking on your username (at the navbar) and select the My Projects item from the but it menu. From there you will be able to manage your projects: Once you have chosen your project, you can add a task-presenter by clicking on the Tasks local navigation link, and then clicking on the button named Editor under the Task Presenter box. After clicking this button, a new web page will be shown where you can choose a template to start coding your project, so you don\u2019t have to start from scratch. After choosing one of the templates, you will be able to adapt it to fit your project needs in a web text editor. Click on the Preview button to get an idea of how it will look like your task-presenter. We recommend reading the Step by step tutorial as you will understand how to create the task presenter, which explains how you can add some HTML skeleton to load the task data, input fields to get the answer from the users, and some JavaScript to make it work.","title":"Creating the Task Presenter"},{"location":"build/overview/#publishing-the-project","text":"After completing the previous three steps, your project will be almost ready. The final step is to publish it, because now it will still be a draft, and it will be hidden to everyone but you (and admins). When your project is a draft, you can contribute to it, and the answers (task runs) and results will be stored in the database so you can have access to them (and test the webhooks solution if you want to do real-time analysis). However, in the moment of publishing the project all the task runs and results (as well as the webhooks log entries) will be flushed, so don\u2019t be afraid and try it as much as you can until you are sure that everything works as expected. Once you think the project is ready for the world to see it, just click on the Publish button: Note Publishing a project cannot be undone, so please double check everything before taking the step. Note You can allow other users to give you feedback and let them try and see your project before it has been published. To do it so, just protect it with a password, and people will be able to access it (as long as they have the password, of course). After publishing it, you will be able to access your project using the slug, or under your account in the Published projects section. Also, results will begin to be created every time a task is completed. Enjoy!","title":"Publishing the project"},{"location":"build/overview/#using-the-api","text":"Creating a project using the API involves these steps: Create the project, Create the tasks for the project, and Create the task-presenter for the users. Publish it. This needs to be done via the web interface.","title":"Using the API"},{"location":"build/overview/#creating-the-project_2","text":"You can create a project via the API URL /api/project with a POST request (See api ). You have to provide the following information about the project and convert it to a JSON object (the actual values are taken from the Flickr Person demo project ): na me = u'Flickr Perso n Fi n der' shor t _ na me = u'FlickrPerso n ' descrip t io n = u'Do you see a huma n i n t his pho t o?' i nf o = { ' tas k_prese nter ' : u'<div> Skele t o n f or t he tas ks</div>' } da ta = dic t ( na me = na me , shor t _ na me = shor t _ na me , descrip t io n = descrip t io n , i nf o = i nf o , hidde n = 0 ) da ta = jso n .dumps(da ta ) Flickr Person Finder, which is a demo template that you can re-use to create your own project, simplifies this step by using a simple file named project.json : { \"name\" : \"Flickr Person Finder\" , \"short_name\" : \"flickrperson\" , \"description\" : \"Image pattern recognition\" , } The file provides the basic configuration for your project.","title":"Creating the project"},{"location":"build/overview/#adding-tasks","text":"As in all the previous steps, we are going to create a JSON object and POST it using the following API URL /api/task to add tasks to a project that you own. For PYBOSSA all the tasks are JSON objects with a field named info where the owners of the project can add any JSON object that will represent a task for their project. For example, using again the Flickr Person demo project template, we need to create a JSON object that should have the link to the photo that we want to identify: info = dict ( link = photo [ 'link' ], url = photo [ 'url_m' ], question = 'Do you see a human face in this photo?' ) data = dict ( project_id = project_id , state = 0 , info = info , calibration = 0 , priority_0 = 0 ) data = json . dumps ( data ) Note \u2018url_m\u2019 is a pattern to describe the URL to the m medium size of the photo used by Flickr. It can be whatever you want, but as we are using Flickr, we use the same patterns for storing the data. The most important field for the task is the info one. This field will be used to store a JSON object with the required data for the task. As Flickr Person is trying to figure out if there is a human or not in a photo, the provided information is: the Flickr web page posting the photo, and the direct URL to the image, the value. The info field is a free-form field that can be populated with any structure. If your project needs more fields, you can add them and use the format that best fits your needs. These steps are usually coded in a script. The Flickr Person Finder projects provides a template for the task-creator that can be re-used without any problems (check the createTasks.py script). Note The API request has to be authenticated and authorized . You can get an API-KEY creating an account on the server, and check the API-KEY created for your user, check the profile account (click on your username) and copy the field API-KEY . This API-KEY should be passed as a POST argument like this with the previous data: [POST] https://crowdsourced.micropasts.org/api/task/?api_key=API-KEY One of the benefits of using the API is that you can create tasks polling other web services like Flickr, where you can use an API. Once we have created the tasks, we will need to create the task-presenter for the project.","title":"Adding tasks"},{"location":"build/overview/#creating-the-task-presenter_1","text":"The task-presenter is usually a template of HTML and JavaScript that will present the tasks to the users, and save the answers in the database. The Flickr Person demo project provides a template which has a to load the input files, in this case, the photo, and another to load the action buttons that the users will be able to press to answer the question and save it in the database. Please, check the tutorial for more details about the task-presenter. As we will be using the API for creating the task presenter, we will have to create an HTML file in our computer, read it from a a script, and post it into PYBOSSA using the API. Once the presenter has been posted to the project, you can edit it locally with your editor, or using the PYBOSSA interface (see previous section). Note The API request has to be authenticated and authorized . You can get an API-KEY creating an account on the server, and check the API-KEY created for your user, check the profile account (click on your user name) and copy the field API-KEY . This API-KEY should be passed as a POST argument like this with the previous data: [POST] https://crowdsourced.micropasts.org/api/project/?api_key=API-KEY","title":"Creating the Task Presenter"},{"location":"build/overview/#using-pybossa-api-from-the-command-line","text":"While you can use your preferred programming language to access the API, we recommend you to use the PYBOSSA PBS command line tool as it simplifies the usage of PYBOSSA for any given project. Creating a project is as simple as creating a project.json file and then run the following command: pbs --server server --api-key yourkey create_project Please, read the pbs section for more details.","title":"Using PYBOSSA API from the command line"},{"location":"build/pbs/","text":"Using the command line \u00b6 In this section we\u2019ll learn how we can use the command line to interact with our project in a PYBOSSA server, using the command line tool: PBS built by Scifabric. PBS \u00b6 PBS is a simple command line interface to a PYBOSSA server. The command allows you to: create projects, add tasks from a CSV, Excel or JSON file, show progress when adding tasks delete tasks, updated redundancy for tasks, and update the project templates. Installation \u00b6 PBS is available in Pypi so that you can install the software with pip: pip install pybossa-pbs Note We recommend to use virtual environments to install new Python libraries and packages, so please, before installing the PBS command line tool consider using a virtual environment. If you have all the dependencies, the package will be installed, and you will be able to use it from the command line. The command is pbs . Configuring PBS \u00b6 By default, PBS does not need a config file. However, you will have to specify for every command the server and your API key to add tasks, create a project, etc. For determining the server and API key that you want to use, all you have to do is pass it as an argument: pbs --server https://crowdsourced.MicroPasts.org --api-key yourkey subcommand If you work with two or more servers, then, remembering all the keys, and server URLs could be problematic, as well as you will be leaving a trace in your BASH history file. For this reason, pbs has a configuration file where you can add all the servers that you are working with. To create the config file, all you have to do is creating a .pybossa.cfg file in your home folder: cd ~ vim .pybossa.cfg The file should have the following structure: [ default ] server : https : // theserver . com apikey : yourkey If you are working with more servers, add another section below it. For example: [ default ] server : https : // theserver . com apikey : yourkey [ yourserver ] server : https : // yourserver . org apikey : yourkeyinyourserver . org By default, pbs will use the credentials of the default section, so you don\u2019t have to type anything to use those values. However, if you want to do actions on another server, all you have to do is the following: pbs --credentials yourserver --help That command will use the values of the yourserver section. Project \u00b6 This section shows how you can handle a project using PBS. Creating a project \u00b6 Creating a project is very simple. All you have to do is create a file named project.json with the following fields: { \"name\" : \"Flickr Person Finder\" , \"short_name\" : \"flickrperson\" , \"description\" : \"Image pattern recognition\" } If you use the name project.json you will not have to pass the file name via an argument, as it\u2019s the name used by default. Once you have the file created, run the following command: pbs create_project That command should create the project. If you want to see all the available options, please check the \u2013help command: pbs create_project --help Updating templates \u00b6 Now that you have added tasks, you can work in your templates. All you have to do to add/update the templates of your project is running the following command: pbs update_project That command needs to have in the same folder where you are running it, the following files: template.html results.html long_description.md tutorial.html If you want to use another template, just use these arguments: pbs update_project --template /tmp/template.html If you want to see all the available options, please check the \u2013help command: pbs update_project --help Using an external JavaScript file \u00b6 Since PBS >= 2.3.0, PBS will check for an external JavaScript file named bundle.js or bundle.min.js . If any of those files exist, then, they will be added at the bottom of your template (like you have been doing so far with your projects). This solution allows you to use for example webpack plus babel to transpile your code, minimize it and add it to your PYBOSSA project. To use this solution, just transpile to a file named bundle.js or bundle.min.js. Note If there\u2019s a minified version of the file, bundle.min.js, that file will always be used instead of bundle.js. Auto-updating while developing a PYBOSSA project \u00b6 At some point, you will end up running lots of PBS update_project commands, as you will be using your chosen editor for fixing CSS, HTML or JavaScript. For these scenarios, PBS comes with a handy flag: \u2013watch . This argument will tell PBS to run the update_project command automatically when bundle.js, bundle.min.js, template.html, tutorial.html or long_description.md are modified in the file system. As simple as that. You can run it like this: pbs update_project --watch And the output will be similar to this: Using webpack and PBS This also works with bundle.js files. Thus, you can have webpack transpiling automatically your code, and PBS will update your project with the new code. Cheers Tasks \u00b6 This section shows how you can handle project\u2019s tasks. Adding tasks to a project \u00b6 Adding tasks is very simple. You can have your tasks in these formats: JSON CSV Excel (xlsx from 2010. It imports the first sheet) PO (any po file that you want to translate) PROPERTIES (any PROPERTIES file that you want to translate) Therefore, adding tasks to your project is as simple as this command: pbs add_tasks --tasks-file tasks_file.json If you want to see all the available options, please check the \u2013help command: Note By default, PYBOSSA servers use a rate limit for avoiding abuse of the API. For this reason, you can only do usually 300 requests per every 15 minutes. If you are going to add more than 300 tasks, pbs will detect it and warn you, auto-enabling the throttling for you to respect the limits. Please, see the rate-limiting section for more details. pbs add_tasks --help Updating tasks redundancy from a project \u00b6 If you need it, you can update the redundancy of a task using its ID or all the tasks skipping the ID. For example, to update the redundancy of one task to 5: pbs update-task-redundancy --task-id 34234 --redundancy 5 To update all of them: pbs update-task-redundancy --redundancy 5 Note Without the \u2013redundancy argument it will revert the redundancy to the default value: 30. This last command will confirm that you want to update all the tasks. If you want to see all the available options, please check the \u2013help command: pbs update-task-redundancy --help Deleting tasks from a project \u00b6 If you need it, you can delete all the tasks from your project, or only one using its task.id. For removing all the tasks, all you\u2019ve to do is run the following command: pbs delete_tasks This command will confirm that you want to delete all the tasks and associated task_runs. If you want to see all the available options, please check the \u2013help command: pbs delete_tasks --help Warning Only tasks that are not associated with a result will be deleted. Getting out of the API context \u00b6 PYBOSSA by default returns first your projects, meaning that if you want to work on a project that you don\u2019t own, it will return an error as the project will not be found. For solving this issue you have two options: In the config file, by adding a new flag: all:1 On the command line, passing the \u2013all=1 flag Helping Materials \u00b6 This section shows how you can handle project\u2019s helping materials. Adding helping materials to a project \u00b6 Adding helping materials is very simple. You can have your materials in three formats: JSON Excel (xlsx from 2010. It imports the first sheet) CSV Therefore, adding helping materials to your project is as simple as this command: pbs add_helpingmaterials --helping-materials-lfile file.xlsx --helping-type xlsx If you want to see all the available options, please check the \u2013help command: Note By default, PYBOSSA servers use a rate limit for avoiding abuse of the API. For this reason, you can only do usually 300 requests per every 15 minutes. If you are going to add more than 300 tasks, pbs will detect it and warn you, auto-enabling the throttling for you to respect the limits. Tip PYBOSSA helping materials allow you to upload media files like videos, images, or sounds to support your project tutorials. The command line PBS will check for a column in your file with the name file_path so it can upload it first to the server. Please, be sure that the file (or files) path is reachable from the helping materials file. pbs add_helpingmaterials --help","title":"Using the command line"},{"location":"build/pbs/#using-the-command-line","text":"In this section we\u2019ll learn how we can use the command line to interact with our project in a PYBOSSA server, using the command line tool: PBS built by Scifabric.","title":"Using the command line"},{"location":"build/pbs/#pbs","text":"PBS is a simple command line interface to a PYBOSSA server. The command allows you to: create projects, add tasks from a CSV, Excel or JSON file, show progress when adding tasks delete tasks, updated redundancy for tasks, and update the project templates.","title":"PBS"},{"location":"build/pbs/#installation","text":"PBS is available in Pypi so that you can install the software with pip: pip install pybossa-pbs Note We recommend to use virtual environments to install new Python libraries and packages, so please, before installing the PBS command line tool consider using a virtual environment. If you have all the dependencies, the package will be installed, and you will be able to use it from the command line. The command is pbs .","title":"Installation"},{"location":"build/pbs/#configuring-pbs","text":"By default, PBS does not need a config file. However, you will have to specify for every command the server and your API key to add tasks, create a project, etc. For determining the server and API key that you want to use, all you have to do is pass it as an argument: pbs --server https://crowdsourced.MicroPasts.org --api-key yourkey subcommand If you work with two or more servers, then, remembering all the keys, and server URLs could be problematic, as well as you will be leaving a trace in your BASH history file. For this reason, pbs has a configuration file where you can add all the servers that you are working with. To create the config file, all you have to do is creating a .pybossa.cfg file in your home folder: cd ~ vim .pybossa.cfg The file should have the following structure: [ default ] server : https : // theserver . com apikey : yourkey If you are working with more servers, add another section below it. For example: [ default ] server : https : // theserver . com apikey : yourkey [ yourserver ] server : https : // yourserver . org apikey : yourkeyinyourserver . org By default, pbs will use the credentials of the default section, so you don\u2019t have to type anything to use those values. However, if you want to do actions on another server, all you have to do is the following: pbs --credentials yourserver --help That command will use the values of the yourserver section.","title":"Configuring PBS"},{"location":"build/pbs/#project","text":"This section shows how you can handle a project using PBS.","title":"Project"},{"location":"build/pbs/#creating-a-project","text":"Creating a project is very simple. All you have to do is create a file named project.json with the following fields: { \"name\" : \"Flickr Person Finder\" , \"short_name\" : \"flickrperson\" , \"description\" : \"Image pattern recognition\" } If you use the name project.json you will not have to pass the file name via an argument, as it\u2019s the name used by default. Once you have the file created, run the following command: pbs create_project That command should create the project. If you want to see all the available options, please check the \u2013help command: pbs create_project --help","title":"Creating a project"},{"location":"build/pbs/#updating-templates","text":"Now that you have added tasks, you can work in your templates. All you have to do to add/update the templates of your project is running the following command: pbs update_project That command needs to have in the same folder where you are running it, the following files: template.html results.html long_description.md tutorial.html If you want to use another template, just use these arguments: pbs update_project --template /tmp/template.html If you want to see all the available options, please check the \u2013help command: pbs update_project --help","title":"Updating templates"},{"location":"build/pbs/#using-an-external-javascript-file","text":"Since PBS >= 2.3.0, PBS will check for an external JavaScript file named bundle.js or bundle.min.js . If any of those files exist, then, they will be added at the bottom of your template (like you have been doing so far with your projects). This solution allows you to use for example webpack plus babel to transpile your code, minimize it and add it to your PYBOSSA project. To use this solution, just transpile to a file named bundle.js or bundle.min.js. Note If there\u2019s a minified version of the file, bundle.min.js, that file will always be used instead of bundle.js.","title":"Using an external JavaScript file"},{"location":"build/pbs/#auto-updating-while-developing-a-pybossa-project","text":"At some point, you will end up running lots of PBS update_project commands, as you will be using your chosen editor for fixing CSS, HTML or JavaScript. For these scenarios, PBS comes with a handy flag: \u2013watch . This argument will tell PBS to run the update_project command automatically when bundle.js, bundle.min.js, template.html, tutorial.html or long_description.md are modified in the file system. As simple as that. You can run it like this: pbs update_project --watch And the output will be similar to this: Using webpack and PBS This also works with bundle.js files. Thus, you can have webpack transpiling automatically your code, and PBS will update your project with the new code. Cheers","title":"Auto-updating while developing a PYBOSSA project"},{"location":"build/pbs/#tasks","text":"This section shows how you can handle project\u2019s tasks.","title":"Tasks"},{"location":"build/pbs/#adding-tasks-to-a-project","text":"Adding tasks is very simple. You can have your tasks in these formats: JSON CSV Excel (xlsx from 2010. It imports the first sheet) PO (any po file that you want to translate) PROPERTIES (any PROPERTIES file that you want to translate) Therefore, adding tasks to your project is as simple as this command: pbs add_tasks --tasks-file tasks_file.json If you want to see all the available options, please check the \u2013help command: Note By default, PYBOSSA servers use a rate limit for avoiding abuse of the API. For this reason, you can only do usually 300 requests per every 15 minutes. If you are going to add more than 300 tasks, pbs will detect it and warn you, auto-enabling the throttling for you to respect the limits. Please, see the rate-limiting section for more details. pbs add_tasks --help","title":"Adding tasks to a project"},{"location":"build/pbs/#updating-tasks-redundancy-from-a-project","text":"If you need it, you can update the redundancy of a task using its ID or all the tasks skipping the ID. For example, to update the redundancy of one task to 5: pbs update-task-redundancy --task-id 34234 --redundancy 5 To update all of them: pbs update-task-redundancy --redundancy 5 Note Without the \u2013redundancy argument it will revert the redundancy to the default value: 30. This last command will confirm that you want to update all the tasks. If you want to see all the available options, please check the \u2013help command: pbs update-task-redundancy --help","title":"Updating tasks redundancy from a project"},{"location":"build/pbs/#deleting-tasks-from-a-project","text":"If you need it, you can delete all the tasks from your project, or only one using its task.id. For removing all the tasks, all you\u2019ve to do is run the following command: pbs delete_tasks This command will confirm that you want to delete all the tasks and associated task_runs. If you want to see all the available options, please check the \u2013help command: pbs delete_tasks --help Warning Only tasks that are not associated with a result will be deleted.","title":"Deleting tasks from a project"},{"location":"build/pbs/#getting-out-of-the-api-context","text":"PYBOSSA by default returns first your projects, meaning that if you want to work on a project that you don\u2019t own, it will return an error as the project will not be found. For solving this issue you have two options: In the config file, by adding a new flag: all:1 On the command line, passing the \u2013all=1 flag","title":"Getting out of the API context"},{"location":"build/pbs/#helping-materials","text":"This section shows how you can handle project\u2019s helping materials.","title":"Helping Materials"},{"location":"build/pbs/#adding-helping-materials-to-a-project","text":"Adding helping materials is very simple. You can have your materials in three formats: JSON Excel (xlsx from 2010. It imports the first sheet) CSV Therefore, adding helping materials to your project is as simple as this command: pbs add_helpingmaterials --helping-materials-lfile file.xlsx --helping-type xlsx If you want to see all the available options, please check the \u2013help command: Note By default, PYBOSSA servers use a rate limit for avoiding abuse of the API. For this reason, you can only do usually 300 requests per every 15 minutes. If you are going to add more than 300 tasks, pbs will detect it and warn you, auto-enabling the throttling for you to respect the limits. Tip PYBOSSA helping materials allow you to upload media files like videos, images, or sounds to support your project tutorials. The command line PBS will check for a column in your file with the name file_path so it can upload it first to the server. Please, be sure that the file (or files) path is reachable from the helping materials file. pbs add_helpingmaterials --help","title":"Adding helping materials to a project"},{"location":"build/project_settings/","text":"Configuring the Project \u00b6 If you are the owner of a project, you can configure it using the web interface. When you are the owner (or an administrator), a new link in the left local navigation bar of the project will appear with the name Settings . The Settings page will give you the following options: Project details : here you will be able to change the name of the project, the description, icon, etc. Task settings : this button will open the task-settings page where you will be able to configure the tasks\u2019 scheduler, change the tasks\u2019 priority, modify the tasks\u2019 redundancy and delete the tasks and its associated task runs (also known as answers). Project delete : if you click this button you will be able to remove the project from the system entirely. A big warning message will be shown before allowing you to delete the project. Project blog : if you click this button, you will be able to write a new blog post to be shared with the volunteers. Official support If you need help configuring your PYBOSSA server, contact us . We offer official support, and we would love to work with your PYBOSSA server. Edit the project details \u00b6 In this section you can change the following parameters of your project: Name : the full name of your project, i.e., Flickr Person Finder Short name : (also known as slug ) the string that will be used to access your project, http://server/project/short_name . Description : A short description of the project, e.g., Image pattern recognition . By default, it will have been autogenerated for you from the Long description you filled in the previous step (but without the Markdown!). Long Description : A long description where you can use Markdown to format the description of your project. This field is usually used to provide information about the project, the developer, the researcher group or institutions involved in the project, etc. Allow Anonymous Contributors : By default anonymous and authenticated users can participate in all the projects. However, you can change it only to allow authenticated volunteers to participate. Password : If you want to control who can contribute or access to your project, you can set a password here to share with those you allow to do it. If you leave it blank, then no password will protect your project! Category : Select a category that fits your project. categories are added and managed by the server administrators. Webhook : Write here the URL of the server that will handle the real-time data analysis of this project\u2019s tasks. Also, you will be able to select and upload a image from your local computer to set it as the project image throughout the server. Task Settings \u00b6 The Task Settings is only accessible for the project owner and server administrators. The page can be reached via the Settings menu, but also from the Tasks link in the left local navigation bar. The page shows four different blocks: Task Scheduler : this block allows you to specify how the project should send tasks to the volunteers. Task Priority : this block allows you to change the priority of the tasks. Task Redundancy : use this block to change the default number of answers (30 by default) that you want to obtain before marking a task as completed. Delete Tasks : this final block allows you to flush all the tasks and its associated task runs (answers). Task Scheduler \u00b6 PYBOSSA provides different task schedulers that will send tasks to the users in very different ways. Default or Depth First \u00b6 The Default task scheduler (also known as Depth First) has the following features: It sends the tasks in the order that were created, first in first out. Users (anonymous and authenticated) will only be allowed to participate once in the same task. Once a user has submitted a Task Run (or answer) for a given task, the scheduler will never send that task to the same user. It will send the same task until the task-redundancy is achieved. In other words, if a task has a redundancy value of 3, the task will be always sent until those 3 answers have been submitted. Once the 3 answers have been collected, the task will be marked as completed and it will not be sent again. When a user has submitted a Task Run for a given task, the scheduler will send to the same user the next task. This scheduler allows the usage of orderby and desc arguments via the api/projectID/newtask endpoint. In summary, from the point of view of a user (authenticated or anonymous) the system will be sending the project tasks in the order they were created. If the user tries to reload a task that he or she already participated, the system will detect it, and warn the user giving the option to try with another task (the scheduler will search for the proper task for the given user). From the point of view of the project, the scheduler will be trying to complete (get all the answers requested by the task-redundancy value) all the tasks as soon as possible. Depth First All \u00b6 The Depth First All scheduler has the following features: It sends the tasks in the order that were created, first in first out. Users (anonymous and authenticated) will only be allowed to participate once in the same task. Once a user has submitted a Task Run (or answer) for a given task, the scheduler will never send that task to the same user. It does not respect the task state. In other words, if a task has a redundancy value of 3, the task will be always sent even when those 3 answers have been submitted. Once the 3 answers have been collected, the task will be marked as completed and it will be sent again to new users. When a user has submitted a Task Run for a given task, the scheduler will send to the same user the next task. This scheduler allows the usage of orderby and desc arguments via the api/projectID/newtask endpoint. In summary, from the point of view of a user (authenticated or anonymous) the system will be sending the project tasks in the order they were created. If the user tries to reload a task that he or she already participated, the system will detect it, and warn the user giving the option to try with another task (the scheduler will search for the proper task for the given user). From the point of view of the project, the scheduler will be trying to complete (get all the answers requested by the task-redundancy value) all the tasks as soon as possible allowing new users to participated in completed tasks as well. Breadth First \u00b6 The Breadth First scheduler has the following features: It sends the tasks in the order that were created, first in first out. It sends always first the task with the least number of task runs in the system. In summary, from the point of view of a user (authenticated or anonymous) the system will be sending the project\u2019s tasks that have less answers (in case of not having an answer, the creation time will be used to send them like in a FIFO \u2013first in first out). From the point of view of the project, the scheduler will be trying to obtain as soon as possible an answer for all the available tasks. Note If you use the limit and offset, the tasks will be ordered first by the number of task runs, returning always first the tasks with less number of task runs for the user. Lock \u00b6 The Lock scheduler has the following features: It sends the tasks in the order that were created, first in first out. When a task has been sent, the task will be locked for the user (anonymous or registered) that requested it for 60 minutes. If another user request a task, it will be sent a different task that has not being locked. In summary, from the point of view of a user (authenticated or anonymous) the system will be sending the project\u2019s tasks in order. She will not find any difference from other schedulers. From the point of view of the project, the scheduler will be trying to send different tasks to users, spreading the users within all available tasks of the project. Note This scheduler does not allow you to request more than 2 tasks at a time to avoid people locking many tasks at once. Note This scheduler could be interesting when you hold a workshop and you want everyone participating in a different task at the same time. Task Priority \u00b6 PYBOSSA allows you to prioritize the tasks, or in other words, which tasks should be delivered first to the volunteers. Warning Task Priority is only respected by the default scheduler. The page shows you two input boxes: Task IDs : comma separated Task IDs of your project tasks. Note: not spaces between the values or commas. Priority : the priority that you want to set for the Task IDs. This must be a value between 0.0 and 1.0. A task with a priority 1.0 will be the first Task to be delivered to a given user. In case that two or more tasks have the same priority value, the first task that will be delivered will be the one with the lower Task.ID value. Task Redundancy \u00b6 The Task Redundancy is a feature that will allow you to analyze statistically, the results that your project are getting for each of its tasks. PYBOSSA by default assigns a value of 30 task runs \u2013answers\u2013 per task, as this value is commonly used for analyzing the population statistically. This page will allow you to change the default value, 30, to whatever you like between a minimum of 1 or a maximum of 10000 answers per task. We recommend to have at use at least three answers per task. Otherwise, you will not be able to run a proper analysis on a given task if two users answer differently. For example, imagine that the goal of the task is to answer if you see a human in a picture, and the available answers are Yes and No. If you set up the redundancy value to 2, and two different users answer respectively Yes, and No, you will not know the correct answer for the task. By increasing the redundancy value to 5 (or even bigger), you will be able to run a statistical analysis more accurately. Delete Tasks \u00b6 This section will allow you to complete remove all the Tasks and associated Task Runs (answers) of your project. Note This step cannot be undone, once you delete all the tasks and associated task runs they will be lost forever. Warning Only tasks not associated with a result can be deleted. This feature is useful when you are testing your project, and you are deciding the structure that you are going to build in your answers. Import tasks automatically \u00b6 Both pro users and server administrators can have access to this feature, which allows to schedule a background job that will automatically import tasks every 24 hours. This option is accessible from the Tasks link in the left local navigation bar: Tasks can be imported using any of the PYBOSSA built-in importers, such as csv-import and epicollect-import. To set up an autoimporter, please refer to the instructions for CSV importer , EpiCollect+ importer , as the procedure is the same. The only difference is that the tasks won\u2019t be imported only once, but regularly, as explained. However, the same behavior should be expected, so auto-importing a CSV file that does not change will result in no new tasks being imported. Note The Dropbox, Amazon S3 and Youtube importers are not available for being used as an auto importer. Once an auto importer has been set up, it can also be canceled anytime. Just delete it. And a new one can then be created. Delete the project \u00b6 In case that you want to remove the project and all its tasks, results and task runs, use this section to delete the project. Warning This action cannot be undone. Be sure before proceeding. Info Only projects without results can be deleted. Adding co-owners to your project \u00b6 Job creators have the ability to add co-owners to jobs that they create. The co-owner will be able to view/edit the task presenter code on a job, as well as change the task settings and upload tasks. To do this, go to settings -> manage co-owners Once there, you are able to type in the username of the person that you want to add as a co-owner, click on Search, and then click on \u201cAdd Co-Owner\u201d. The new co-owner will appear in the project co-owners list. Project co-owners (with the exception of the original project creator) can also be removed from here. Transfer project ownership \u00b6 You can transfer the project ownership to another user in the PYBOSSA server. For changing the ownership, just add the email of the user that you want to make the new owner. Note If you are not an admin of PYBOSSA, you cannot undo this action, and you will not be able to modify/change settings of the project as you will not be the owner anymore. Admins, however, can change the ownership always. Generate project report \u00b6 You can generate project report in csv form that provides consolidated status of your project. This report has project and user statistics sections. Project section lists information on project id, project short name, total tasks in project, time when first and last task was submitted and average time spent on each task in minutes. User statistics section lists information on contributors id, name, full name, total tasks completed, percentage of tasks completed and time when first and last task submission were submitted by the contributor. The report can be generated from \u201cExport Project Report\u201d option under project settings page.","title":"Configuring the project"},{"location":"build/project_settings/#configuring-the-project","text":"If you are the owner of a project, you can configure it using the web interface. When you are the owner (or an administrator), a new link in the left local navigation bar of the project will appear with the name Settings . The Settings page will give you the following options: Project details : here you will be able to change the name of the project, the description, icon, etc. Task settings : this button will open the task-settings page where you will be able to configure the tasks\u2019 scheduler, change the tasks\u2019 priority, modify the tasks\u2019 redundancy and delete the tasks and its associated task runs (also known as answers). Project delete : if you click this button you will be able to remove the project from the system entirely. A big warning message will be shown before allowing you to delete the project. Project blog : if you click this button, you will be able to write a new blog post to be shared with the volunteers. Official support If you need help configuring your PYBOSSA server, contact us . We offer official support, and we would love to work with your PYBOSSA server.","title":"Configuring the Project"},{"location":"build/project_settings/#edit-the-project-details","text":"In this section you can change the following parameters of your project: Name : the full name of your project, i.e., Flickr Person Finder Short name : (also known as slug ) the string that will be used to access your project, http://server/project/short_name . Description : A short description of the project, e.g., Image pattern recognition . By default, it will have been autogenerated for you from the Long description you filled in the previous step (but without the Markdown!). Long Description : A long description where you can use Markdown to format the description of your project. This field is usually used to provide information about the project, the developer, the researcher group or institutions involved in the project, etc. Allow Anonymous Contributors : By default anonymous and authenticated users can participate in all the projects. However, you can change it only to allow authenticated volunteers to participate. Password : If you want to control who can contribute or access to your project, you can set a password here to share with those you allow to do it. If you leave it blank, then no password will protect your project! Category : Select a category that fits your project. categories are added and managed by the server administrators. Webhook : Write here the URL of the server that will handle the real-time data analysis of this project\u2019s tasks. Also, you will be able to select and upload a image from your local computer to set it as the project image throughout the server.","title":"Edit the project details"},{"location":"build/project_settings/#task-settings","text":"The Task Settings is only accessible for the project owner and server administrators. The page can be reached via the Settings menu, but also from the Tasks link in the left local navigation bar. The page shows four different blocks: Task Scheduler : this block allows you to specify how the project should send tasks to the volunteers. Task Priority : this block allows you to change the priority of the tasks. Task Redundancy : use this block to change the default number of answers (30 by default) that you want to obtain before marking a task as completed. Delete Tasks : this final block allows you to flush all the tasks and its associated task runs (answers).","title":"Task Settings"},{"location":"build/project_settings/#task-scheduler","text":"PYBOSSA provides different task schedulers that will send tasks to the users in very different ways.","title":"Task Scheduler"},{"location":"build/project_settings/#default-or-depth-first","text":"The Default task scheduler (also known as Depth First) has the following features: It sends the tasks in the order that were created, first in first out. Users (anonymous and authenticated) will only be allowed to participate once in the same task. Once a user has submitted a Task Run (or answer) for a given task, the scheduler will never send that task to the same user. It will send the same task until the task-redundancy is achieved. In other words, if a task has a redundancy value of 3, the task will be always sent until those 3 answers have been submitted. Once the 3 answers have been collected, the task will be marked as completed and it will not be sent again. When a user has submitted a Task Run for a given task, the scheduler will send to the same user the next task. This scheduler allows the usage of orderby and desc arguments via the api/projectID/newtask endpoint. In summary, from the point of view of a user (authenticated or anonymous) the system will be sending the project tasks in the order they were created. If the user tries to reload a task that he or she already participated, the system will detect it, and warn the user giving the option to try with another task (the scheduler will search for the proper task for the given user). From the point of view of the project, the scheduler will be trying to complete (get all the answers requested by the task-redundancy value) all the tasks as soon as possible.","title":"Default or Depth First"},{"location":"build/project_settings/#depth-first-all","text":"The Depth First All scheduler has the following features: It sends the tasks in the order that were created, first in first out. Users (anonymous and authenticated) will only be allowed to participate once in the same task. Once a user has submitted a Task Run (or answer) for a given task, the scheduler will never send that task to the same user. It does not respect the task state. In other words, if a task has a redundancy value of 3, the task will be always sent even when those 3 answers have been submitted. Once the 3 answers have been collected, the task will be marked as completed and it will be sent again to new users. When a user has submitted a Task Run for a given task, the scheduler will send to the same user the next task. This scheduler allows the usage of orderby and desc arguments via the api/projectID/newtask endpoint. In summary, from the point of view of a user (authenticated or anonymous) the system will be sending the project tasks in the order they were created. If the user tries to reload a task that he or she already participated, the system will detect it, and warn the user giving the option to try with another task (the scheduler will search for the proper task for the given user). From the point of view of the project, the scheduler will be trying to complete (get all the answers requested by the task-redundancy value) all the tasks as soon as possible allowing new users to participated in completed tasks as well.","title":"Depth First All"},{"location":"build/project_settings/#breadth-first","text":"The Breadth First scheduler has the following features: It sends the tasks in the order that were created, first in first out. It sends always first the task with the least number of task runs in the system. In summary, from the point of view of a user (authenticated or anonymous) the system will be sending the project\u2019s tasks that have less answers (in case of not having an answer, the creation time will be used to send them like in a FIFO \u2013first in first out). From the point of view of the project, the scheduler will be trying to obtain as soon as possible an answer for all the available tasks. Note If you use the limit and offset, the tasks will be ordered first by the number of task runs, returning always first the tasks with less number of task runs for the user.","title":"Breadth First"},{"location":"build/project_settings/#lock","text":"The Lock scheduler has the following features: It sends the tasks in the order that were created, first in first out. When a task has been sent, the task will be locked for the user (anonymous or registered) that requested it for 60 minutes. If another user request a task, it will be sent a different task that has not being locked. In summary, from the point of view of a user (authenticated or anonymous) the system will be sending the project\u2019s tasks in order. She will not find any difference from other schedulers. From the point of view of the project, the scheduler will be trying to send different tasks to users, spreading the users within all available tasks of the project. Note This scheduler does not allow you to request more than 2 tasks at a time to avoid people locking many tasks at once. Note This scheduler could be interesting when you hold a workshop and you want everyone participating in a different task at the same time.","title":"Lock"},{"location":"build/project_settings/#task-priority","text":"PYBOSSA allows you to prioritize the tasks, or in other words, which tasks should be delivered first to the volunteers. Warning Task Priority is only respected by the default scheduler. The page shows you two input boxes: Task IDs : comma separated Task IDs of your project tasks. Note: not spaces between the values or commas. Priority : the priority that you want to set for the Task IDs. This must be a value between 0.0 and 1.0. A task with a priority 1.0 will be the first Task to be delivered to a given user. In case that two or more tasks have the same priority value, the first task that will be delivered will be the one with the lower Task.ID value.","title":"Task Priority"},{"location":"build/project_settings/#task-redundancy","text":"The Task Redundancy is a feature that will allow you to analyze statistically, the results that your project are getting for each of its tasks. PYBOSSA by default assigns a value of 30 task runs \u2013answers\u2013 per task, as this value is commonly used for analyzing the population statistically. This page will allow you to change the default value, 30, to whatever you like between a minimum of 1 or a maximum of 10000 answers per task. We recommend to have at use at least three answers per task. Otherwise, you will not be able to run a proper analysis on a given task if two users answer differently. For example, imagine that the goal of the task is to answer if you see a human in a picture, and the available answers are Yes and No. If you set up the redundancy value to 2, and two different users answer respectively Yes, and No, you will not know the correct answer for the task. By increasing the redundancy value to 5 (or even bigger), you will be able to run a statistical analysis more accurately.","title":"Task Redundancy"},{"location":"build/project_settings/#delete-tasks","text":"This section will allow you to complete remove all the Tasks and associated Task Runs (answers) of your project. Note This step cannot be undone, once you delete all the tasks and associated task runs they will be lost forever. Warning Only tasks not associated with a result can be deleted. This feature is useful when you are testing your project, and you are deciding the structure that you are going to build in your answers.","title":"Delete Tasks"},{"location":"build/project_settings/#import-tasks-automatically","text":"Both pro users and server administrators can have access to this feature, which allows to schedule a background job that will automatically import tasks every 24 hours. This option is accessible from the Tasks link in the left local navigation bar: Tasks can be imported using any of the PYBOSSA built-in importers, such as csv-import and epicollect-import. To set up an autoimporter, please refer to the instructions for CSV importer , EpiCollect+ importer , as the procedure is the same. The only difference is that the tasks won\u2019t be imported only once, but regularly, as explained. However, the same behavior should be expected, so auto-importing a CSV file that does not change will result in no new tasks being imported. Note The Dropbox, Amazon S3 and Youtube importers are not available for being used as an auto importer. Once an auto importer has been set up, it can also be canceled anytime. Just delete it. And a new one can then be created.","title":"Import tasks automatically"},{"location":"build/project_settings/#delete-the-project","text":"In case that you want to remove the project and all its tasks, results and task runs, use this section to delete the project. Warning This action cannot be undone. Be sure before proceeding. Info Only projects without results can be deleted.","title":"Delete the project"},{"location":"build/project_settings/#adding-co-owners-to-your-project","text":"Job creators have the ability to add co-owners to jobs that they create. The co-owner will be able to view/edit the task presenter code on a job, as well as change the task settings and upload tasks. To do this, go to settings -> manage co-owners Once there, you are able to type in the username of the person that you want to add as a co-owner, click on Search, and then click on \u201cAdd Co-Owner\u201d. The new co-owner will appear in the project co-owners list. Project co-owners (with the exception of the original project creator) can also be removed from here.","title":"Adding co-owners to your project"},{"location":"build/project_settings/#transfer-project-ownership","text":"You can transfer the project ownership to another user in the PYBOSSA server. For changing the ownership, just add the email of the user that you want to make the new owner. Note If you are not an admin of PYBOSSA, you cannot undo this action, and you will not be able to modify/change settings of the project as you will not be the owner anymore. Admins, however, can change the ownership always.","title":"Transfer project ownership"},{"location":"build/project_settings/#generate-project-report","text":"You can generate project report in csv form that provides consolidated status of your project. This report has project and user statistics sections. Project section lists information on project id, project short name, total tasks in project, time when first and last task was submitted and average time spent on each task in minutes. User statistics section lists information on contributors id, name, full name, total tasks completed, percentage of tasks completed and time when first and last task submission were submitted by the contributor. The report can be generated from \u201cExport Project Report\u201d option under project settings page.","title":"Generate project report"},{"location":"build/tutorial/","text":"Project Tutorial \u00b6 This tutorial uses the demo project Flickr Person ( source code ) built by Scifabric for PYBOSSA. This demo is a simple microtasking project where users have to answer the following question: Do you see a human face in this photo? The possible answers are: Yes, No and I don\u2019t know . In other words, this is an example of a simple crowdsourcing project for image classification. The demo project Flickr Person has two main components: A Python script that creates the tasks in PYBOSSA using the Flickr API, and the task-presenter: an HTML + Javascript structure that will show the tasks to the users and save their answers. This tutorial uses the PYBOSSA pbs command line tool as it will show you how you can handle your project from the command line like a pro. Setting Things Up \u00b6 To run the tutorial, you will need to create an account in a PYBOSSA server. The PYBOSSA server could be running on your computer or in a third party server. Once you have a PYBOSSA account, you will have access to your profile by clicking on your name, and then on the My Settings section. There, you will find your API-KEY. This API-KEY will identify and authenticate you via the PYBOSSA API. It will allow you to create a project, add tasks, update the project, etc. As you will be the owner of the project, only you will be able to perform these actions, but anyone will be able to participate in your project. Note This tutorial uses the pbs command line tool . You need to install it in your system before proceeding. Please, check the pbs documentation for more information . Creating the Project \u00b6 There are two possible methods for creating a project: web-interface: click on your username, and you will see a section named projects list. In that section, you will be able to create a project using the web interface. API-interface: using the pbs command line tool. For this tutorial, we are going to use the second option. The reason is that via the API you will have more flexibility than via the web interface. Therefore, for creating the project, you will need two parameters: the URL of the PYBOSSA server, and an API-KEY to authenticate yourself in the PYBOSSA server. Tip If you are running a PYBOSSA server locally, you can omit the URL parameter as by default it uses the URL http://localhost:5000 . Getting the project\u2019s source code \u00b6 Now that we know where are we going to create the project (the server URL) and that we have an API key, we can download the source code of the project. To get the code, we will clone the Flickr Person Finder Repository . This step will download all the code and scripts to your computer. To clone the code, we will use Git. Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. If you are new to Git, we recommend you to take this free and on-line course (it will take you only 15 minutes!) where you will learn the basics, which are the main concepts that you will need for cloning the demo project repository. If you prefer to skip the course and take it in a later stage, the commands that you need to clone the repository are: git clone git://github.com/Scifabric/app-flickrperson.git After running that command, a new folder named app-flickrperson will be created from where you run the command. Configuring the name, short name, thumbnail, etc. \u00b6 The Flickr Person Finder provides a file called project.json that has the following content: { \"name\" : \"Flickr Person Finder\" , \"short_name\" : \"flickrperson\" , \"description\" : \"Image pattern recognition\" , } This file, project.json identifies your project. It has its name, as well as a short description about it. As we are creating a new project, please, modify the name and short_name to make it yours. Warning The name and short_name of the project must be unique ! Otherwise, you will get an error (IntegrityError) when creating the project. Description will be the text shown in the project listing page. It\u2019s important that you try to have a short description that explains what your project does. Now that we have the project.json file ready, we can create the project: pbs --server server --api-key key create_project This command will read the values from the project.json file and use them to create a draft project in the PYBOSSA server of your choice. Note You can save some typing if you create a config file for pbs. Please, check the pbs page for more details. If you want to check if the project exists, just open your web browser, and type in the following URL http://server/project/short_name Where short_name is the value of the key with the same name in the file: project.json . You should get a project page. Now, let\u2019s add some tasks to the project. Providing more details about the project \u00b6 Up to now we have created the project, added some tasks, but the project still lacks a lot of information. For example, a welcome page (or long description) of the project, so the users can know what this project is about. If you check the source code, you will see that there is a file named long_description.md . This file has a lengthy description of the project, explaining different aspects of it. This information is not mandatory. However it will be beneficial for the users as they will get a bit more of information about the project goals. The file can be composed using Markdown or plain text. The long description will be shown on the project home page: 1 https://yourserver/project/flickrperson If you want to modify the description you have two options, edit it via the web interface, or change locally the long_description.md file and run pbs to update it: pbs update_project Adding an icon to the project \u00b6 It is possible also to add a nice icon for the project. By default PYBOSSA will render a 100x100 pixels empty thumbnail for those projects that do not provide it. If you want to add an icon you can do it by using the web interface. Just go to the Settings tab within your project. There, select the image file you want to use and push the Upload button. That\u2019s all! Protecting the project with a password \u00b6 If for any reason, you want to allow only certain people to contribute to your project, you can set a password. Thus, every time a user (either anonymous or authenticated) wants to contribute to the project, it will be asked to introduce the password. The user will then be able to contribute to the project for 30 minutes (this is a value by default, can be changed in every PYBOSSA server). After this time, the user will be asked again to introduce the password if the user wants to continue contributing, and so on. Adding tasks to the project \u00b6 Now that we have the project created, we can add some tasks to it. PYBOSSA will deliver the tasks for the users (authenticated and anonymous ones) and store the submitted answers in the PYBOSSA database so that you can process them in a later stage. A PYBOSSA task is a JSON object with the information that needs to be processed by the volunteers. Usually, it will be a link to a media file (image, video, sound clip, PDF file, etc.) that needs to be processed. PYBOSSA does not store any data; it only links data in the tasks . This feature is really cool as you will always have control of the data. While PYBOSSA internally uses JSON for storing the data, you can add tasks to your project using several formats: CSV: a comma-separated spreadsheet- Excel: xlsx from 2010. It imports the first sheet). JSON: a lightweight data-interchange format. PO (any po file that you want to translate). PROPERTIES (any PROPERTIES file that you want to translate). The demo project comes with a CSV sample file, which has the following structure: question url_m link url_b Do you see a human face in this photo? http://srv/img_m.jpg http://srv/img http://srv/img_b.jpg Additionally there is a script named: get_images.py that will contact Flickr, get the latest published photos to this web service, and save them in JSON format as a file (flickr_tasks.json), with the same structure as the CSV file (the keys are the same): { 'link' : 'http://www.flickr.com/photos/teleyinex/2945647308/' , 'url_m' : 'http://farm4.staticflickr.com/3208/2945647308_f048cc1633_m.jpg' , 'url_b' : 'http://farm4.staticflickr.com/3208/2945647308_f048cc1633_b.jpg' } Note Flickr creates from the original image different cropped versions of the image. It uses a pattern to distinguish them: _m for medium size, and _b for the big ones. There are more options, so if you need more help in this matter, check the official Flickr documentation . As we have a CSV file with some tasks, let\u2019s use it for adding some tasks to your project. For adding tasks using the CSV file, all you have to do is the following: pbs add_tasks --tasks-file flickr_tasks.csv After running this command, you will see a progress bar that will let you know when all the tasks have been added to your project. This has been really easy, right? As you can see, adding tasks to a project is really straightforward if you have a CSV or Excel file. Each row will become a task in PYBOSSA, and you only have to run one command to get all of them into your project. As a bonus, let\u2019s also add some tasks using the get_images.py script. This script will contact Flickr, get the last 20 published photos, and then, save them in JSON format into a file called flickr_tasks.json . By doing this, we are showing you how you can easily extract data from third-party services and import them into a PYBOSSA project. Thus, let\u2019s start by running the command and getting the tasks: python get_images.py That command has created the file: flickr_tasks.json . Now, let\u2019s use it to add the pictures to our project: pbs add_tasks --tasks-file flickr_tasks.json Done! Again, a progress bar will show us how long it takes to add all the tasks. Now that we have all the tasks in the project, we can work on the next step: presenting the tasks to the volunteers. Task\u2019s redundancy \u00b6 PYBOSSA by default will send a task to different users (authenticated and anonymous users) until 30 different task runs are obtained for each task. This is usually known as redundancy , and we will use it to validate the analysis of the task. The whole aim of this value is to avoid trolls to participate several times in the same task, answering wrong on purpose so that we can have a valid statistical analysis of the submitted contributions by the volunteers. PYBOSSA does not allow the same user to submit more than one answer (task runs in PYBOSSA lingo) to the same task. PYBOSSA identifies anonymous users via their IP, while registered users via their PYBOSSA id. Why PYBOSSA uses a default value of 30? Well, because we are getting 30 observations for a task, and if the data is normal, at least 30 samples should be obtained to get that model. In any case, you can easily change this value for each, using the task settings section of your project (or via the API using the pbs tool). If you want to improve the quality of the results for one task and get more confidence in the data when you will analyze it, you can modify the redundancy value with the pbs command. For example, to reduce the number of users that will analyze each task to ten, run the following command: pbs add_tasks --tasks-file file --redundancy 10 In this case, the n_answers field will instruct PYBOSSA to send the task to 10 different users. Tasks\u2019s priority \u00b6 Every task can have its own priority . You can modify it using the web interface, or the API. A task with a higher priority will be delivered first to the volunteers. Hence if you have a project where you need to analyze a task first due to an external event (a new data sample has been obtained), then you can modify the priority of the newly created task and deliver it first. If you have a new batch of tasks, instead of only a task, that needs to be processed before all the available ones, you can do it with pbs as well. Run the following command: pbs add_tasks --tasks-file file --priority 1 The priority is a number between 0.0 and 1.0. The highest priority is 1.0 and the lowest is 0.0. Presenting the Tasks to the user \u00b6 Now that we have the tasks in our project, we have to present them to the user. For achieving this, you will have to create an HTML template. The template is the skeleton that will be used to load the data of the tasks: the question, the photos, user progress, input fields & submit buttons to solve the task. In this tutorial, Flickr Person uses a basic HTML skeleton and the PYBOSSA.JS library to load the data of the tasks into the HTML template and take actions based on the users\u2019 answers. Note When an authenticated user submits a task, the task will save the user ID. For anonymous users, the submitted task will only have the user IP address. The HTML Skeleton \u00b6 The file template.html has the skeleton to show the tasks. The file has three sections: A div for the warnings actions . When the user saves an answer, a success feedback message is shown to the user. There is also an error one for the failures. A div for the Flickr image . This div will be populated with the task photo URL and LINK data. A div for the Questions & Answer buttons . There are three buttons with the possible answers: Yes , No , and I don\u2019t know . By default, PYBOSSA includes the PYBOSSA.JS library, so you don\u2019t have to include it in your template. All you have to do is to add a script section where you will be loading the tasks and saving the answers from the users: . This template file will be used by the pbs command line tool to add the task presenter to the project. You can add it running the following command: pbs update_project Note You can also edit the HTML skeleton using the web interface. Once the project has been created in PYBOSSA you will see a button that allows you to edit the skeleton using a WYSIWYG editor. In PYBOSSA every project has a task presenter endpoint: http://PYBOSSA-SERVER/project/SLUG/newtask Note The slug is the short name for the project, in this case flickrperson . Loading the above endpoint will load the skeleton and trigger the JavaScript functions to get a task from the PYBOSSA server and populate it in the HTML skeleton. The header and footer for the presenter are already provided by PYBOSSA, so the template only has to define the structure to present the data from the tasks to the users and the action buttons, input methods, etc. to retrieve and save the answer from the volunteers. Flickr Person Skeleton \u00b6 For this tutorial, we have a very simple DOM. At the beginning you will find a big div that will be used to show some messages to the user about the success of an action, for instance, that an answer has been saved or that a new task is being loaded. Take a look: < div class = \"row\" > <!-- Success and Error Messages for the user --> < div class = \"span6 offset2\" style = \"height:50px\" > < div id = \"success\" class = \"alert alert-success\" style = \"display:none;\" > < a class = \"close\" > \u00d7 </ a > < strong > Well done! </ strong > Your answer has been saved </ div > < div id = \"loading\" class = \"alert alert-info\" style = \"display:none;\" > < a class = \"close\" > \u00d7 </ a > Loading next task... </ div > < div id = \"taskcompleted\" class = \"alert alert-info\" style = \"display:none;\" > < strong > The task has been completed! </ strong > Thanks a lot! </ div > < div id = \"finish\" class = \"alert alert-success\" style = \"display:none;\" > < strong > Congratulations! </ strong > You have participated in all available tasks! < br /> < div class = \"alert-actions\" > < a class = \"btn small\" href = \"/\" > Go back </ a > < a class = \"btn small\" href = \"/project\" > or, Check other projects </ a > </ div > </ div > < div id = \"error\" class = \"alert alert-error\" style = \"display:none;\" > < a class = \"close\" > \u00d7 </ a > < strong > Error! </ strong > Something went wrong, please contact the site administrators </ div > </ div > <!-- End Success and Error Messages for the user --> </ div > <!-- End of Row --> Then we have the skeleton where we will be loading the Flickr photos, and the submission buttons for the user. First, it creates a row that will have two columns (in Bootstrap a row can have 12 columns), so we will populate a structure like this: < div class = \"row skeleton\" > <!-- First column for showing the question, submission buttons and user progress --> < div class = \"span6\" ></ div > <!-- Second column for showing the Flickr photo --> < div class = \"span6\" ></ div > </ div > The content for the first column where we will be showing the question of the task, the submission buttons with the answers: yes, no, and I don\u2019t know, and obviously the user progress for the user, so he can know how many tasks he has completed and how many are left. The code is the following: < div class = \"span6 \" > <!-- Start of Question and Submission DIV (column) --> < h1 id = \"question\" > Question </ h1 > <!-- The question will be loaded here --> < div id = \"answer\" > <!-- Start DIV for the submission buttons --> <!-- If the user clicks this button, the saved answer will be value=\"yes\"--> < button class = \"btn btn-success btn-answer\" value = 'Yes' >< i class = \"icon icon-white icon-thumbs-up\" ></ i > Yes </ button > <!-- If the user clicks this button, the saved answer will be value=\"no\"--> < button class = \"btn btn-danger btn-answer\" value = 'No' >< i class = \"icon icon-white icon-thumbs-down\" ></ i > No </ button > <!-- If the user clicks this button, the saved answer will be value=\"NotKnown\"--> < button class = \"btn btn-answer\" value = 'NotKnown' >< i class = \"icon icon-white icon-question-sign\" ></ i > I don't know </ button > </ div > <!-- End of DIV for the submission buttons --> <!-- Feedback items for the user --> < p > You are working now on task: < span id = \"task-id\" class = \"label label-warning\" > # </ span ></ p > < p > You have completed: < span id = \"done\" class = \"label label-info\" ></ span > tasks from <!-- Progress bar for the user --> < span id = \"total\" class = \"label label-inverse\" ></ span ></ p > < div class = \"progress progress-striped\" > < div id = \"progress\" rel = \"tooltip\" title = \"#\" class = \"bar\" style = \"width: 0%;\" ></ div > </ div > <!-- This project uses Disqus to allow users to provide some feedback. The next section includes a button that when a user clicks on it will load the comments, if any, for the given task --> < div id = \"disqus_show_btn\" style = \"margin-top:5px;\" > < button class = \"btn btn-primary btn-large btn-disqus\" onclick = \"loadDisqus()\" >< i class = \"icon-comments\" ></ i > Show comments </ button > < button class = \"btn btn-large btn-disqus\" onclick = \"loadDisqus()\" style = \"display:none\" >< i class = \"icon-comments\" ></ i > Hide comments </ button > </ div > <!-- End of Disqus Button section --> <!-- Disqus thread for the given task --> < div id = \"disqus_thread\" style = \"margin-top:5px;display:none\" ></ div > </ div > <!-- End of Question and Submission DIV (column) --> Then we will add the code for showing the photos. This second column will be much simpler: < div class = \"span6\" > <!-- Start of Photo DIV (columnt) --> < a id = \"photo-link\" href = \"#\" > < img id = \"photo\" src = \"http://img339.imageshack.us/img339/9017/loadingo.png\" style = \"max-width=100%\" > </ a > </ div > <!-- End of Photo DIV (column) --> In the above code, we use a placeholder loadingo.png that we have created previously, so we show an image while the first one from the task is getting loaded. The second section of the skeleton, if we join the previous snippets of code will be like this: < div class = \"row skeleton\" > <!-- Start Skeleton Row--> < div class = \"span6 \" > <!-- Start of Question and Submission DIV (column) --> < h1 id = \"question\" > Question </ h1 > <!-- The question will be loaded here --> < div id = \"answer\" > <!-- Start DIV for the submission buttons --> <!-- If the user clicks this button, the saved answer will be value=\"yes\"--> < button class = \"btn btn-success btn-answer\" value = 'Yes' >< i class = \"icon icon-white icon-thumbs-up\" ></ i > Yes </ button > <!-- If the user clicks this button, the saved answer will be value=\"no\"--> < button class = \"btn btn-danger btn-answer\" value = 'No' >< i class = \"icon icon-white icon-thumbs-down\" ></ i > No </ button > <!-- If the user clicks this button, the saved answer will be value=\"NotKnown\"--> < button class = \"btn btn-answer\" value = 'NotKnown' >< i class = \"icon icon-white icon-question-sign\" ></ i > I don't know </ button > </ div > <!-- End of DIV for the submission buttons --> <!-- Feedback items for the user --> < p > You are working now on task: < span id = \"task-id\" class = \"label label-warning\" > # </ span ></ p > < p > You have completed: < span id = \"done\" class = \"label label-info\" ></ span > tasks from <!-- Progress bar for the user --> < span id = \"total\" class = \"label label-inverse\" ></ span ></ p > < div class = \"progress progress-striped\" > < div id = \"progress\" rel = \"tooltip\" title = \"#\" class = \"bar\" style = \"width: 0%;\" ></ div > </ div > <!-- This project uses Disqus to allow users to provide some feedback. The next section includes a button that when a user clicks on it will load the comments, if any, for the given task --> < div id = \"disqus_show_btn\" style = \"margin-top:5px;\" > < button class = \"btn btn-primary btn-large btn-disqus\" onclick = \"loadDisqus()\" >< i class = \"icon-comments\" ></ i > Show comments </ button > < button class = \"btn btn-large btn-disqus\" onclick = \"loadDisqus()\" style = \"display:none\" >< i class = \"icon-comments\" ></ i > Hide comments </ button > </ div > <!-- End of Disqus Button section --> <!-- Disqus thread for the given task --> < div id = \"disqus_thread\" style = \"margin-top:5px;display:none\" ></ div > </ div > <!-- End of Question and Submission DIV (column) --> < div class = \"span6\" > <!-- Start of Photo DIV (column) --> < a id = \"photo-link\" href = \"#\" > < img id = \"photo\" src = \"http://img339.imageshack.us/img339/9017/loadingo.png\" style = \"max-width=100%\" > </ a > </ div > <!-- End of Photo DIV (columnt) --> </ div > <!-- End of Skeleton Row --> Loading the Task data \u00b6 Now that we have set up the skeleton to load the task data, let\u2019s see the JavaScript that we have to write to load the pictures from Flickr and ask the volunteer an answer about them. All the action takes place in the file template.html script section. The script is very simple; it uses the PYBOSSA.JS library to get a new task and to submit and save the answer in the server. PYBOSSA.JS implements two methods that have to be overridden with some logic, as each project will have a different need, i.e., some projects will be loading another type of data in a different skeleton: pybossa.taskLoaded(function(task, deferred){}); pybossa.presentTask(function(task, deferred){}); The pybossa.taskLoaded method will be in charge of adding new objects to the DOM once they have been loaded from Flickr (the URL is provided by the task object in the field task.info.url_b), and resolve the deferred object, so another task for the current user can be pre-loaded. The code is the following: pybossa . taskLoaded ( function ( task , deferred ) { if ( ! $ . isEmptyObject ( task ) ) { // load image from flickr var img = $ ( '<img />' ); img . load ( function () { // continue as soon as the image is loaded deferred . resolve ( task ); }); img . attr ( 'src' , task . info . url_b ). css ( 'height' , 460 ); img . addClass ( 'img-polaroid' ); task . info . image = img ; } else { deferred . resolve ( task ); } }); The pybossa.presentTask method will be called when a task has been obtained from the server: { question : project . description , task : { id : value , ..., info : { url_m : link : } } } That JSON object will be accessible via the task object passed as an argument to the pybossa.presentTask method. First, we will need to check that we are not getting an empty object, as it will mean that there are no more available tasks for the current user. In that case, we should hide the skeleton, and say thanks to the user as he has participated in all the tasks of the project. If the task object is not empty, then we have a task to load into the skeleton . In this demo project, we will update the question, adding the photo to the DOM, refreshing the user progress and add some actions to the submission buttons so we can save the answer of the volunteer. The PYBOSSA.JS library treats the user input as an \u201casync function.\u201d This is why the function gets a deferred object, as this object will be resolved when the user clicks on one of the possible answers. We use this approach to load in the background the next task for the user while the volunteer is solving the current one. Once the answer has been saved in the server, we resolve the deferred: pybossa . presentTask ( function ( task , deferred ) { if ( ! $ . isEmptyObject ( task ) ) { loadUserProgress (); $ ( '#photo-link' ). html ( '' ). append ( task . info . image ); $ ( \"#photo-link\" ). attr ( \"href\" , task . info . link ); $ ( \"#question\" ). html ( task . info . question ); $ ( '#task-id' ). html ( task . id ); $ ( '.btn-answer' ). off ( 'click' ). on ( 'click' , function ( evt ) { var answer = $ ( evt . target ). attr ( \"value\" ); if ( typeof answer != 'undefined' ) { //console.log(answer); pybossa . saveTask ( task . id , answer ). done ( function () { deferred . resolve (); }); $ ( \"#loading\" ). fadeIn ( 500 ); if ( $ ( \"#disqus_thread\" ). is ( \":visible\" )) { $ ( '#disqus_thread' ). toggle (); $ ( '.btn-disqus' ). toggle (); } } else { $ ( \"#error\" ). show (); } }); $ ( \"#loading\" ). hide (); } else { $ ( \".skeleton\" ). hide (); $ ( \"#loading\" ). hide (); $ ( \"#finish\" ). fadeIn ( 500 ); } }); It is important to note that in this method we bind the on-click action for the Yes , No and I don\u2019t know buttons to call the above snippet: $ ( '.btn-answer' ). off ( 'click' ). on ( 'click' , function ( evt ) { var answer = $ ( evt . target ). attr ( \"value\" ); if ( typeof answer != 'undefined' ) { //console.log(answer); pybossa . saveTask ( task . id , answer ). done ( function () { deferred . resolve (); }); $ ( \"#loading\" ). fadeIn ( 500 ); if ( $ ( \"#disqus_thread\" ). is ( \":visible\" )) { $ ( '#disqus_thread' ). toggle (); $ ( '.btn-disqus' ). toggle (); } } else { $ ( \"#error\" ). show (); } }); If your project uses other input methods, you will have to adapt this to fit your project needs. Finally, the pybossa.presentTask calls a method named loadUserProgress . This method is in charge of getting the user the progress of the user and update the progress bar accordingly: function loadUserProgress () { pybossa . userProgress ( 'flickrperson' ). done ( function ( data ){ var pct = Math . round (( data . done * 100 ) / data . total ); $ ( \"#progress\" ). css ( \"width\" , pct . toString () + \"%\" ); $ ( \"#progress\" ). attr ( \"title\" , pct . toString () + \"% completed!\" ); $ ( \"#progress\" ). tooltip ({ 'placement' : 'left' }); $ ( \"#total\" ). text ( data . total ); $ ( \"#done\" ). text ( data . done ); }); } You can update the code only to show the number of answers, or remove it entirely. However, the volunteers will benefit from this type of information as they will be able to know how many tasks they have to do, giving an idea of progress while they contribute to the project. Finally, we only need in our code to tell pybossa.js to run our project: pybossa . run ( 'flickrperson' ) Saving the answer \u00b6 Once the task has been presented, users can click on the answer buttons: Yes , No or I don\u2019t know . Yes and No save the answer in the DB with information about the task and the answer, while the button I don\u2019t know loads another task as sometimes the image is not available. To submit and save the answer from the user, we will use again the PYBOSSA.JS library. In this case: pybossa . saveTask ( taskid , answer ) The pybossa.saveTask method saves an answer for a given task. In the previous section, we show that in the pybossa.presentTask method the task-id can be obtained, as we will be passing the object to saveTask method. The method allows us to give a successful pop-up feedback for the user, so you can use the following structure to warn the user and tell him that his answer has been successfully saved: pybossa . saveTask ( taskid , answer ). done ( function ( data ) { // Show the feedback div $ ( \"#success\" ). fadeIn (); // Fade out the pop-up after a 1000 miliseconds setTimeout ( function () { $ ( \"#success\" ). fadeOut () }, 1000 ); }; ); Keeping track of the time spent by volunteers solving a task \u00b6 Since v1.1.3, PYBOSSA records a timestamp, for every task run, of the contributed task runs. This is stored in the \u201ccreated\u201d attribute of the Task Runs. Now, with the \u201cfinish_time\u201d attribute, we will be able to know how much time the volunteer has spent completing the task: (time spent = finish_time - created) Tip This information is only shown to the owner of the project. Updating the template for all the tasks \u00b6 It is possible to update the template of the project without having to re-create the project and its tasks. To update the template, you only have to modify the file template.html and run the following command: pbs update_project You can also use the web interface to do it, and see the changes in real time before saving the results. Check your project page, go to the tasks section, and look for the Edit the task presenter button. Testing the task presenter \u00b6 To test the project task presenter, go to the following URL http://PYBOSSA-SERVER/project/SLUG/presenter The presenter will load one task, and you will be able to submit and save one answer for the current task. Publishing the project \u00b6 Until now, the project has been in testing mode. This means that you can play with your project as much as you want. You can invite a few friends or colleauges to test it, just to know that everything works. In this mode PYBOSSA will work as a published project, so you can test it, however, it is not published so it\u2019s not visible to users on the server unless you share the link to it. Once you are happy, you can publish the project. When you publish the project, PYBOSSA will clean your tests and leave it clean for your contributors. Thus, don\u2019t be afraid and test as much as you want! Tutorial \u00b6 In general, users will like to have some feedback when accessing for the very first time your project. Usually, the overview page of your project will not be enough, so you can build a tutorial (a web page) that will explain to the volunteer how he can participate in the project. PYBOSSA will detect if the user is accessing for the very first time your project, so in that case, it will load the tutorial , if your project has one. Adding a tutorial is simple: you only have to create a file named tutorial.html and load the content of the file using pbs: pbs update_project The tutorial could have whatever you like: videos, nice animations, etc. PYBOSSA will render for you the header and the footer, so you only have to focus on the content. You can copy the template.html file and use it as a draft of your tutorial or just include a video of yourself explaining why your project is important and how, as a volunteer, you can contribute. If your project has a tutorial, you can access it directly in this endpoint: 1 http://server/project/tutorial Advance tutorial (helping materials) \u00b6 While the previous solution works for most of the projects, your project might need something special: visual clues so users can easily identify sounds, patterns, etc. easily. The default tutorial does not allow you to curate/create a list of helping materials that could be used directly in the presenter to explain how for example you can identify cancer cells, or specific species of animals. For this reason, PYBOSSA now supports an API endpoint for helping materials: api/helpingmaterial. This endpoint allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial. Helping materials allow you to upload images via the endpoint using the multipart/form-data Content-Type. For example, imagine that you want to add a photo of an animal and it\u2019s description, so users can easily identify it (or use it as pre-loaded answer for classifying pictures of animals). In this case, you can do the following (using the popular Python requests library, but you can use any other programming language): import requests url = 'https://server/api/helpingpoint?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID } r = requests . post ( url , data = data , files = files ) # Get the created helping material hp = r . json () # Add the meta-data of the picture url = 'https://server/api/helpingpoint/ %s ?api_key=YOURKEY' % hp [ 'id' ] info = { 'popular_name' : 'elephant' , 'scientific_name' : 'loxodonta' } r = requests . put ( url , json = { 'info' : info }) You can add as many files as you want. Then, from any place you can query the helping material endpoint to retrieve the example/tutorial materials for helping your users. Tip You can use PBS to add helping materials from an Excel or CSV file. Check the documentation . Providing some I18n support \u00b6 Sometimes, you may want to provide the task interface in their language. To support this, you can access their locale via Javascript in an effortless way, as we\u2019ve placed the user locale in a hidden \u2018div\u2019 node: var userLocale = document . getElementById ( 'PYBOSSA_USER_LOCALE' ). textContent . trim (); The way you use it after that is up to you. But let\u2019s see an example of how you can use it to make a tutorial that automatically shows the strings in the locale of the user. Warning Anonymous users will be only shown with en language by default. This feature only works for authenticated users that choose their locale in their account. You can, however, load the translated strings using the browser preferred language. First of all, check the tutorial.html file . You will see it consists on some HTML plus some Javascript inside a script tag to handle the different steps of the tutorial. Here you have a snippet of HTML tutorial file: < div class = \"row\" > < div class = \"col-md-12\" > < div id = \"modal\" class = \"modal hide fade\" > < div class = \"modal-header\" > < h3 > Flickr Person Finder tutorial </ h3 > </ div > < div id = \"0\" class = \"modal-body\" style = \"display:none\" > < p >< strong > Hi! </ strong > This is a < strong > demo project </ strong > that shows how you can do pattern recognition on pictures or images using the PYBOSSA framework. </ p > </ div > < div id = \"1\" class = \"modal-body\" style = \"display:none\" > < p > The project is really simple. It loads a photo from < a href = \"http://flickr.com\" > Flickr </ a > and asks you this question: < strong > Do you see a human in this photo? </ strong ></ p > < img src = \"http://farm7.staticflickr.com/6109/6286728068_2f3c6912b8_q.jpg\" class = \"img-thumbnail\" /> < p > You will have 3 possible answers: < ul > < li > Yes, </ li > < li > No, and </ li > < li > I don't know </ li > </ ul > </ p > < p > </ p > < p > All you have to do is to click in one of the three possible answers and you will be done. This demo project could be adapted for more complex pattern recognition problems. </ p > </ div > < div class = \"modal-footer\" > < a id = \"prevBtn\" href = \"#\" onclick = \"showStep('prev')\" class = \"btn\" > Previous </ a > < a id = \"nextBtn\" href = \"#\" onclick = \"showStep('next')\" class = \"btn btn-success\" > Next </ a > < a id = \"startContrib\" href = \"../flickrperson/newtask\" class = \"btn btn-primary\" style = \"display:none\" >< i class = \"fa fa-thumbs-o-up\" ></ i > Try the demo! </ a > </ div > </ div > </ div > </ div > To add multilingual support, copy and paste it is as many times as languages you\u2019re planning to support. Then, add to each of them an id in the outermost \u2018div\u2019 which corresponds to the name of the locale (\u2018en\u2019 for English, \u2018es\u2019 for Spanish, etc.), and translate the inner text of it, but leave all the HTML the same in every version (tags, ids, classes, etc.) like: < div id = 'es' class = \"row\" > Your translated version of the HTML goes here, but only change the text, NOT the HTML tags, IDs or classes. </ div > Finally, in the Javascript section of the tutorial, you will need to add some extra code to enable multilingual tutorials. Thus, modify the javascript from: var step = - 1 ; function showStep ( action ) { $ ( \"#\" + step ). hide (); if ( action == 'next' ) { step = step + 1 ; } if ( action == 'prev' ) { step = step - 1 ; } if ( step == 0 ) { $ ( \"#prevBtn\" ). hide (); } else { $ ( \"#prevBtn\" ). show (); } if ( step == 1 ) { $ ( \"#nextBtn\" ). hide (); $ ( \"#startContrib\" ). show (); } $ ( \"#\" + step ). show (); } showStep ( 'next' ); $ ( \"#modal\" ). modal ( 'show' ); To: var languages = [ 'en' , 'es' ] $ ( document ). ready ( function (){ var userLocale = document . getElementById ( 'PYBOSSA_USER_LOCALE' ). textContent . trim (); languages . forEach ( function ( lan ){ if ( lan !== userLocale ) { var node = document . getElementById ( lan ); if ( node . parentNode ) { node . parentNode . removeChild ( node ); } } }); var step = - 1 ; function showStep ( action ) { $ ( \"#\" + step ). hide (); if ( action == 'next' ) { step = step + 1 ; } if ( action == 'prev' ) { step = step - 1 ; } if ( step == 0 ) { $ ( \"#prevBtn\" ). hide (); } else { $ ( \"#prevBtn\" ). show (); } if ( step == 1 ) { $ ( \"#nextBtn\" ). hide (); $ ( \"#startContrib\" ). show (); } $ ( \"#\" + step ). show (); } showStep ( 'next' ); $ ( \"#modal\" ). modal ( 'show' ); }); Notice the languages array variable defined at the beginning?. It\u2019s vital that you place there the IDs you\u2019ve given to the different translated versions of your HTML for the tutorial. The rest of the script will only compare the locale of the user that is seeing the tutorial and delete all the HTML that is not in his language, so that only the tutorial that fits his locale settings is shown. Another method to support I18n \u00b6 Another option for translating your project to different languages is using a JSON object like this: messages = { \"en\" : { \"welcome\" : \"Hello World!, \" bye \": \" Good bye ! \" }, \" es : { \"welcome\" : \"Hola mundo!\" , \"bye\" : \"Hasta luego!\" } } This object can be placed in the tutorial.html or template.html file to load the proper strings translated to your users. The logic is very simple. With the following code you grab the language that should be loaded for the current user: var userLocale = document . getElementById ( 'PYBOSSA_USER_LOCALE' ). textContent . trim (); Now, use userLocale to load the strings. For example, for template.html and the Flickrperson demo project, you will find the following code at the start of the script: // Default language var userLocale = \"en\" ; // Translations var messages = { \"en\" : { \"i18n_welldone\" : \"Well done!\" , \"i18n_welldone_text\" : \"Your answer has been saved\" , \"i18n_loading_next_task\" : \"Loading next task...\" , \"i18n_task_completed\" : \"The task has been completed!\" , \"i18n_thanks\" : \"Thanks a lot!\" , \"i18n_congratulations\" : \"Congratulations\" , \"i18n_congratulations_text\" : \"You have participated in all available tasks!\" , \"i18n_yes\" : \"Yes\" , \"i18n_no_photo\" : \"No photo\" , \"i18n_i_dont_know\" : \"I don't know\" , \"i18n_working_task\" : \"You are working now on task:\" , \"i18n_tasks_completed\" : \"You have completed:\" , \"i18n_tasks_from\" : \"tasks from\" , \"i18n_show_comments\" : \"Show comments:\" , \"i18n_hide_comments\" : \"Hide comments:\" , \"i18n_question\" : \"Do you see a human face in this photo?\" , }, \"es\" : { \"i18n_welldone\" : \"Bien hecho!\" , \"i18n_welldone_text\" : \"Tu respuesta ha sido guardada\" , \"i18n_loading_next_task\" : \"Cargando la siguiente tarea...\" , \"i18n_task_completed\" : \"La tarea ha sido completadas!\" , \"i18n_thanks\" : \"Much\u00edsimas gracias!\" , \"i18n_congratulations\" : \"Enhorabuena\" , \"i18n_congratulations_text\" : \"Has participado en todas las tareas disponibles!\" , \"i18n_yes\" : \"S\u00ed\" , \"i18n_no_photo\" : \"No hay foto\" , \"i18n_i_dont_know\" : \"No lo s\u00e9\" , \"i18n_working_task\" : \"Est\u00e1s trabajando en la tarea:\" , \"i18n_tasks_completed\" : \"Has completado:\" , \"i18n_tasks_from\" : \"tareas de\" , \"i18n_show_comments\" : \"Mostrar comentarios\" , \"i18n_hide_comments\" : \"Ocultar comentarios\" , \"i18n_question\" : \"\u00bfVes una cara humana en esta foto?\" , }, }; // Update userLocale with server side information $ ( document ). ready ( function (){ userLocale = document . getElementById ( 'PYBOSSA_USER_LOCALE' ). textContent . trim (); }); function i18n_translate () { var ids = Object . keys ( messages [ userLocale ]) for ( i = 0 ; i < ids . length ; i ++ ) { console . log ( \"Translating: \" + ids [ i ]); document . getElementById ( ids [ i ]). innerHTML = messages [ userLocale ][ ids [ i ]]; } } First, we define the default locale, \u201cen\u201d for English. Then, we create a messages dictionary with all the ids that we want to translate. Finally, we add the languages that we want to support. As you can see, it\u2019s quite simple as you can share the messages object with your volunteers so that you can get many more translations for your project smoothly. Finally, we need actually to load those translated strings into the template. For doing this step, all we\u2019ve to do is adding the following code to our template.html file at the function pybossa.presentTask: pybossa . presentTask ( function ( task , deferred ) { if ( ! $ . isEmptyObject ( task ) ) { loadUserProgress (); i18n_translate (); ... Done! When the task is loaded, the strings are translated and the project will be shown in the user language. Updating project\u2019s status \u00b6 You can share the progress of the project creating a blog. Every PYBOSSA project includes a blog where you will be able to write about your project regularly. You can use Markdown or plain text for the content of the posts. And you will also be able to edit them or delete after creation if you want. To write a post go to the project Settings tab and there you will find an option to write, read or delete your blog posts. You can use the endpoint /api/blogpost to also add blogposts, update them and delete them. The api endpoint allows you as well to upload a picture to your blogpost. This endpoint allows you to add JSON and media files (images, videos or sounds) that you can use with your blogpost. You can use this endpoint for uploading images via the endpoint using the multipart/form-data Content-Type. For example, imagine that you want to add a photo as a cover and then the body of the blogpost. In this case, you can do the following (using the popular Python requests library, but you can use any other programming language): import requests url = 'https://server/api/blogpost?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID , title = 'title' , body = 'body' } r = requests . post ( url , data = data , files = files ) # Get the created blogpost bp = r . json () # Update the body with the meta-data of the picture url = 'https://server/api/blogpost/ %s ?api_key=YOURKEY' % bp [ 'id' ] body = 'hello ![img]( %s )' % bp [ 'media_url' ] r = requests . put ( url , json = { 'body' : body }) Exporting the project\u2019s data \u00b6 You can export all the available data your project in three different ways: JSON , an open standard designed for human-readable data interchange, or CSV , a file that stores tabular data (numbers and text) in plain-text form and that can be opened with almost any spreadsheet software, or CKAN web server, a powerful data management a system that makes data accessible \u2013by providing tools to streamline publishing, sharing, finding and using data. For exporting the data, all you have to do is to visit the following URL in your web-browser: 1 http : // PYBOSSA - SERVER / project / slug / tasks / export You will find an interface that will allow you to export the Tasks, Task Runs and Results to JSON and CSV formats: The previous methods will export all the tasks, results and task runs, even if they are not completed . When a task has been completed, in other words, when a task has collected the number of answers specified by the task ( n_answers = 30 by default), a brown button with the text Download results will pop up, and if you click it all the answers for the given task will be shown in JSON format. You can check which tasks are completed, in the following URL: 1 http://PYBOSSA-SERVER/project/slug And clicking on the Tasks link in the left local navigation , and then click in the Browse box: Then you will see which tasks are completed, and which ones you can download in JSON format: You could download the results also using the API. For example, you could write a small script that gets the list of tasks that have been completed using this URL: 1 GET http://PYBOSSA-SERVER/api/task?state=completed Note If your project has more than 20 tasks, then you will need to use the API pagination , as by default PYBOSSA API only returns the first 20 items. Once you have obtained the list of completed tasks, your script could start requesting the collected answers for the given tasks: 1 GET http://PYBOSSA-SERVER/api/taskrun?task_id=TASK-ID That way you will be able to get all the submitted answers by the volunteers for the given task. Exporting the task, task runs and results in JSON \u00b6 For the JSON format, you will get all the output as a file that your browser will download, named: short_name_tasks.json for the tasks, and short_name_task_runs.json for the task runs. Exporting the task, task runs and results to a CSV file \u00b6 While for the CSV format, you will get a CSV file that will be automatically saved on your computer. Exporting the task, task runs and results to a CKAN server \u00b6 If the server has been configured to allow you to export your project\u2019s data to a CKAN server, the owner of the project will see another box that will give you the option to export the data to the CKAN server. To use this method, you will need to add the CKAN API-KEY associated with your account, otherwise, you will not be able to export the data, and a warning message will let you know it. Adding the CKAN API-KEY is simple. You only need to create an account in the supported CKAN server, check your profile and copy the API-KEY. Then, open your PYBOSSA account page, edit it and paste the key in the section External Services . Then, you will be able to export the data to the CKAN server and host it there. Publishing results of your project \u00b6 Since v1.2.0, PYBOSSA automatically creates \u201cempty\u201d results when a task is completed. For example, imagine your project is asking the following question in a set of images: \u201cDo you see a triangle in this picture?\u201d The possible answers are: yes and no. Your project has configured the task redundancy to 5, so five people will answer that question for a given image (or task). When the 5 th person sends the answer, the server marks the task as completed, and it creates a result for the given task associating the answers, the task and the project: { \"id\" : 1 , \"project_id\" : 1 , \"task_id\" : 1 , \"task_run_ids\" : [ 1 , 2 , 3 , 4 , 5 ], \"info\" : null } As in other PYBOSSA domain objects, a result has a JSON field named info that allows you to store the final result for that task using the task_runs 1, 2, 3, 4, 5. Imagine that the five volunteers answered: yes, then as you are the project owner you could update the info field with that value: { \"id\" : 1 , \"project_id\" : 1 , \"task_id\" : 1 , \"task_run_ids\" : [ 1 , 2 , 3 , 4 , 5 ], \"info\" : { \"triangle\" : \"yes\" }} The benefit of storing that information is that you can access these data via the PYBOSSA API so you will be able to show the results, in your result project section using the API. This will allow you to build beautiful visualizations of your results on maps, WebGL, etc. API Errors \u00b6 If something goes wrong, you should get an error message similar to the following one: ERROR : root : pbclient . create_project { \"action\" : \"POST\" , \"exception_cls\" : \"IntegrityError\" , \"exception_msg\" : \"(IntegrityError) duplicate key value violates unique constraint \\\"project_name_key\\\"\\nDETAIL: Key (name)=(Flickr Person Finder) already exists.\\n\" , \"status\" : \"failed\" , \"status_code\" : 415 , \"target\" : \"project\" } The error message will have the information regarding the problems it has found when using the API. Note Since version 2.0.1 PYBOSSA enforces API Rate Limiting, so you might exceed the number of allowed requests, getting a 429 error. Please see rate-limiting section .","title":"Tutorial"},{"location":"build/tutorial/#project-tutorial","text":"This tutorial uses the demo project Flickr Person ( source code ) built by Scifabric for PYBOSSA. This demo is a simple microtasking project where users have to answer the following question: Do you see a human face in this photo? The possible answers are: Yes, No and I don\u2019t know . In other words, this is an example of a simple crowdsourcing project for image classification. The demo project Flickr Person has two main components: A Python script that creates the tasks in PYBOSSA using the Flickr API, and the task-presenter: an HTML + Javascript structure that will show the tasks to the users and save their answers. This tutorial uses the PYBOSSA pbs command line tool as it will show you how you can handle your project from the command line like a pro.","title":"Project Tutorial"},{"location":"build/tutorial/#setting-things-up","text":"To run the tutorial, you will need to create an account in a PYBOSSA server. The PYBOSSA server could be running on your computer or in a third party server. Once you have a PYBOSSA account, you will have access to your profile by clicking on your name, and then on the My Settings section. There, you will find your API-KEY. This API-KEY will identify and authenticate you via the PYBOSSA API. It will allow you to create a project, add tasks, update the project, etc. As you will be the owner of the project, only you will be able to perform these actions, but anyone will be able to participate in your project. Note This tutorial uses the pbs command line tool . You need to install it in your system before proceeding. Please, check the pbs documentation for more information .","title":"Setting Things Up"},{"location":"build/tutorial/#creating-the-project","text":"There are two possible methods for creating a project: web-interface: click on your username, and you will see a section named projects list. In that section, you will be able to create a project using the web interface. API-interface: using the pbs command line tool. For this tutorial, we are going to use the second option. The reason is that via the API you will have more flexibility than via the web interface. Therefore, for creating the project, you will need two parameters: the URL of the PYBOSSA server, and an API-KEY to authenticate yourself in the PYBOSSA server. Tip If you are running a PYBOSSA server locally, you can omit the URL parameter as by default it uses the URL http://localhost:5000 .","title":"Creating the Project"},{"location":"build/tutorial/#getting-the-projects-source-code","text":"Now that we know where are we going to create the project (the server URL) and that we have an API key, we can download the source code of the project. To get the code, we will clone the Flickr Person Finder Repository . This step will download all the code and scripts to your computer. To clone the code, we will use Git. Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. If you are new to Git, we recommend you to take this free and on-line course (it will take you only 15 minutes!) where you will learn the basics, which are the main concepts that you will need for cloning the demo project repository. If you prefer to skip the course and take it in a later stage, the commands that you need to clone the repository are: git clone git://github.com/Scifabric/app-flickrperson.git After running that command, a new folder named app-flickrperson will be created from where you run the command.","title":"Getting the project's source code"},{"location":"build/tutorial/#configuring-the-name-short-name-thumbnail-etc","text":"The Flickr Person Finder provides a file called project.json that has the following content: { \"name\" : \"Flickr Person Finder\" , \"short_name\" : \"flickrperson\" , \"description\" : \"Image pattern recognition\" , } This file, project.json identifies your project. It has its name, as well as a short description about it. As we are creating a new project, please, modify the name and short_name to make it yours. Warning The name and short_name of the project must be unique ! Otherwise, you will get an error (IntegrityError) when creating the project. Description will be the text shown in the project listing page. It\u2019s important that you try to have a short description that explains what your project does. Now that we have the project.json file ready, we can create the project: pbs --server server --api-key key create_project This command will read the values from the project.json file and use them to create a draft project in the PYBOSSA server of your choice. Note You can save some typing if you create a config file for pbs. Please, check the pbs page for more details. If you want to check if the project exists, just open your web browser, and type in the following URL http://server/project/short_name Where short_name is the value of the key with the same name in the file: project.json . You should get a project page. Now, let\u2019s add some tasks to the project.","title":"Configuring the name, short name, thumbnail, etc."},{"location":"build/tutorial/#providing-more-details-about-the-project","text":"Up to now we have created the project, added some tasks, but the project still lacks a lot of information. For example, a welcome page (or long description) of the project, so the users can know what this project is about. If you check the source code, you will see that there is a file named long_description.md . This file has a lengthy description of the project, explaining different aspects of it. This information is not mandatory. However it will be beneficial for the users as they will get a bit more of information about the project goals. The file can be composed using Markdown or plain text. The long description will be shown on the project home page: 1 https://yourserver/project/flickrperson If you want to modify the description you have two options, edit it via the web interface, or change locally the long_description.md file and run pbs to update it: pbs update_project","title":"Providing more details about the project"},{"location":"build/tutorial/#adding-an-icon-to-the-project","text":"It is possible also to add a nice icon for the project. By default PYBOSSA will render a 100x100 pixels empty thumbnail for those projects that do not provide it. If you want to add an icon you can do it by using the web interface. Just go to the Settings tab within your project. There, select the image file you want to use and push the Upload button. That\u2019s all!","title":"Adding an icon to the project"},{"location":"build/tutorial/#protecting-the-project-with-a-password","text":"If for any reason, you want to allow only certain people to contribute to your project, you can set a password. Thus, every time a user (either anonymous or authenticated) wants to contribute to the project, it will be asked to introduce the password. The user will then be able to contribute to the project for 30 minutes (this is a value by default, can be changed in every PYBOSSA server). After this time, the user will be asked again to introduce the password if the user wants to continue contributing, and so on.","title":"Protecting the project with a password"},{"location":"build/tutorial/#adding-tasks-to-the-project","text":"Now that we have the project created, we can add some tasks to it. PYBOSSA will deliver the tasks for the users (authenticated and anonymous ones) and store the submitted answers in the PYBOSSA database so that you can process them in a later stage. A PYBOSSA task is a JSON object with the information that needs to be processed by the volunteers. Usually, it will be a link to a media file (image, video, sound clip, PDF file, etc.) that needs to be processed. PYBOSSA does not store any data; it only links data in the tasks . This feature is really cool as you will always have control of the data. While PYBOSSA internally uses JSON for storing the data, you can add tasks to your project using several formats: CSV: a comma-separated spreadsheet- Excel: xlsx from 2010. It imports the first sheet). JSON: a lightweight data-interchange format. PO (any po file that you want to translate). PROPERTIES (any PROPERTIES file that you want to translate). The demo project comes with a CSV sample file, which has the following structure: question url_m link url_b Do you see a human face in this photo? http://srv/img_m.jpg http://srv/img http://srv/img_b.jpg Additionally there is a script named: get_images.py that will contact Flickr, get the latest published photos to this web service, and save them in JSON format as a file (flickr_tasks.json), with the same structure as the CSV file (the keys are the same): { 'link' : 'http://www.flickr.com/photos/teleyinex/2945647308/' , 'url_m' : 'http://farm4.staticflickr.com/3208/2945647308_f048cc1633_m.jpg' , 'url_b' : 'http://farm4.staticflickr.com/3208/2945647308_f048cc1633_b.jpg' } Note Flickr creates from the original image different cropped versions of the image. It uses a pattern to distinguish them: _m for medium size, and _b for the big ones. There are more options, so if you need more help in this matter, check the official Flickr documentation . As we have a CSV file with some tasks, let\u2019s use it for adding some tasks to your project. For adding tasks using the CSV file, all you have to do is the following: pbs add_tasks --tasks-file flickr_tasks.csv After running this command, you will see a progress bar that will let you know when all the tasks have been added to your project. This has been really easy, right? As you can see, adding tasks to a project is really straightforward if you have a CSV or Excel file. Each row will become a task in PYBOSSA, and you only have to run one command to get all of them into your project. As a bonus, let\u2019s also add some tasks using the get_images.py script. This script will contact Flickr, get the last 20 published photos, and then, save them in JSON format into a file called flickr_tasks.json . By doing this, we are showing you how you can easily extract data from third-party services and import them into a PYBOSSA project. Thus, let\u2019s start by running the command and getting the tasks: python get_images.py That command has created the file: flickr_tasks.json . Now, let\u2019s use it to add the pictures to our project: pbs add_tasks --tasks-file flickr_tasks.json Done! Again, a progress bar will show us how long it takes to add all the tasks. Now that we have all the tasks in the project, we can work on the next step: presenting the tasks to the volunteers.","title":"Adding tasks to the project"},{"location":"build/tutorial/#tasks-redundancy","text":"PYBOSSA by default will send a task to different users (authenticated and anonymous users) until 30 different task runs are obtained for each task. This is usually known as redundancy , and we will use it to validate the analysis of the task. The whole aim of this value is to avoid trolls to participate several times in the same task, answering wrong on purpose so that we can have a valid statistical analysis of the submitted contributions by the volunteers. PYBOSSA does not allow the same user to submit more than one answer (task runs in PYBOSSA lingo) to the same task. PYBOSSA identifies anonymous users via their IP, while registered users via their PYBOSSA id. Why PYBOSSA uses a default value of 30? Well, because we are getting 30 observations for a task, and if the data is normal, at least 30 samples should be obtained to get that model. In any case, you can easily change this value for each, using the task settings section of your project (or via the API using the pbs tool). If you want to improve the quality of the results for one task and get more confidence in the data when you will analyze it, you can modify the redundancy value with the pbs command. For example, to reduce the number of users that will analyze each task to ten, run the following command: pbs add_tasks --tasks-file file --redundancy 10 In this case, the n_answers field will instruct PYBOSSA to send the task to 10 different users.","title":"Task's redundancy"},{"location":"build/tutorial/#taskss-priority","text":"Every task can have its own priority . You can modify it using the web interface, or the API. A task with a higher priority will be delivered first to the volunteers. Hence if you have a project where you need to analyze a task first due to an external event (a new data sample has been obtained), then you can modify the priority of the newly created task and deliver it first. If you have a new batch of tasks, instead of only a task, that needs to be processed before all the available ones, you can do it with pbs as well. Run the following command: pbs add_tasks --tasks-file file --priority 1 The priority is a number between 0.0 and 1.0. The highest priority is 1.0 and the lowest is 0.0.","title":"Tasks's priority"},{"location":"build/tutorial/#presenting-the-tasks-to-the-user","text":"Now that we have the tasks in our project, we have to present them to the user. For achieving this, you will have to create an HTML template. The template is the skeleton that will be used to load the data of the tasks: the question, the photos, user progress, input fields & submit buttons to solve the task. In this tutorial, Flickr Person uses a basic HTML skeleton and the PYBOSSA.JS library to load the data of the tasks into the HTML template and take actions based on the users\u2019 answers. Note When an authenticated user submits a task, the task will save the user ID. For anonymous users, the submitted task will only have the user IP address.","title":"Presenting the Tasks to the user"},{"location":"build/tutorial/#the-html-skeleton","text":"The file template.html has the skeleton to show the tasks. The file has three sections: A div for the warnings actions . When the user saves an answer, a success feedback message is shown to the user. There is also an error one for the failures. A div for the Flickr image . This div will be populated with the task photo URL and LINK data. A div for the Questions & Answer buttons . There are three buttons with the possible answers: Yes , No , and I don\u2019t know . By default, PYBOSSA includes the PYBOSSA.JS library, so you don\u2019t have to include it in your template. All you have to do is to add a script section where you will be loading the tasks and saving the answers from the users: . This template file will be used by the pbs command line tool to add the task presenter to the project. You can add it running the following command: pbs update_project Note You can also edit the HTML skeleton using the web interface. Once the project has been created in PYBOSSA you will see a button that allows you to edit the skeleton using a WYSIWYG editor. In PYBOSSA every project has a task presenter endpoint: http://PYBOSSA-SERVER/project/SLUG/newtask Note The slug is the short name for the project, in this case flickrperson . Loading the above endpoint will load the skeleton and trigger the JavaScript functions to get a task from the PYBOSSA server and populate it in the HTML skeleton. The header and footer for the presenter are already provided by PYBOSSA, so the template only has to define the structure to present the data from the tasks to the users and the action buttons, input methods, etc. to retrieve and save the answer from the volunteers.","title":"The HTML Skeleton"},{"location":"build/tutorial/#flickr-person-skeleton","text":"For this tutorial, we have a very simple DOM. At the beginning you will find a big div that will be used to show some messages to the user about the success of an action, for instance, that an answer has been saved or that a new task is being loaded. Take a look: < div class = \"row\" > <!-- Success and Error Messages for the user --> < div class = \"span6 offset2\" style = \"height:50px\" > < div id = \"success\" class = \"alert alert-success\" style = \"display:none;\" > < a class = \"close\" > \u00d7 </ a > < strong > Well done! </ strong > Your answer has been saved </ div > < div id = \"loading\" class = \"alert alert-info\" style = \"display:none;\" > < a class = \"close\" > \u00d7 </ a > Loading next task... </ div > < div id = \"taskcompleted\" class = \"alert alert-info\" style = \"display:none;\" > < strong > The task has been completed! </ strong > Thanks a lot! </ div > < div id = \"finish\" class = \"alert alert-success\" style = \"display:none;\" > < strong > Congratulations! </ strong > You have participated in all available tasks! < br /> < div class = \"alert-actions\" > < a class = \"btn small\" href = \"/\" > Go back </ a > < a class = \"btn small\" href = \"/project\" > or, Check other projects </ a > </ div > </ div > < div id = \"error\" class = \"alert alert-error\" style = \"display:none;\" > < a class = \"close\" > \u00d7 </ a > < strong > Error! </ strong > Something went wrong, please contact the site administrators </ div > </ div > <!-- End Success and Error Messages for the user --> </ div > <!-- End of Row --> Then we have the skeleton where we will be loading the Flickr photos, and the submission buttons for the user. First, it creates a row that will have two columns (in Bootstrap a row can have 12 columns), so we will populate a structure like this: < div class = \"row skeleton\" > <!-- First column for showing the question, submission buttons and user progress --> < div class = \"span6\" ></ div > <!-- Second column for showing the Flickr photo --> < div class = \"span6\" ></ div > </ div > The content for the first column where we will be showing the question of the task, the submission buttons with the answers: yes, no, and I don\u2019t know, and obviously the user progress for the user, so he can know how many tasks he has completed and how many are left. The code is the following: < div class = \"span6 \" > <!-- Start of Question and Submission DIV (column) --> < h1 id = \"question\" > Question </ h1 > <!-- The question will be loaded here --> < div id = \"answer\" > <!-- Start DIV for the submission buttons --> <!-- If the user clicks this button, the saved answer will be value=\"yes\"--> < button class = \"btn btn-success btn-answer\" value = 'Yes' >< i class = \"icon icon-white icon-thumbs-up\" ></ i > Yes </ button > <!-- If the user clicks this button, the saved answer will be value=\"no\"--> < button class = \"btn btn-danger btn-answer\" value = 'No' >< i class = \"icon icon-white icon-thumbs-down\" ></ i > No </ button > <!-- If the user clicks this button, the saved answer will be value=\"NotKnown\"--> < button class = \"btn btn-answer\" value = 'NotKnown' >< i class = \"icon icon-white icon-question-sign\" ></ i > I don't know </ button > </ div > <!-- End of DIV for the submission buttons --> <!-- Feedback items for the user --> < p > You are working now on task: < span id = \"task-id\" class = \"label label-warning\" > # </ span ></ p > < p > You have completed: < span id = \"done\" class = \"label label-info\" ></ span > tasks from <!-- Progress bar for the user --> < span id = \"total\" class = \"label label-inverse\" ></ span ></ p > < div class = \"progress progress-striped\" > < div id = \"progress\" rel = \"tooltip\" title = \"#\" class = \"bar\" style = \"width: 0%;\" ></ div > </ div > <!-- This project uses Disqus to allow users to provide some feedback. The next section includes a button that when a user clicks on it will load the comments, if any, for the given task --> < div id = \"disqus_show_btn\" style = \"margin-top:5px;\" > < button class = \"btn btn-primary btn-large btn-disqus\" onclick = \"loadDisqus()\" >< i class = \"icon-comments\" ></ i > Show comments </ button > < button class = \"btn btn-large btn-disqus\" onclick = \"loadDisqus()\" style = \"display:none\" >< i class = \"icon-comments\" ></ i > Hide comments </ button > </ div > <!-- End of Disqus Button section --> <!-- Disqus thread for the given task --> < div id = \"disqus_thread\" style = \"margin-top:5px;display:none\" ></ div > </ div > <!-- End of Question and Submission DIV (column) --> Then we will add the code for showing the photos. This second column will be much simpler: < div class = \"span6\" > <!-- Start of Photo DIV (columnt) --> < a id = \"photo-link\" href = \"#\" > < img id = \"photo\" src = \"http://img339.imageshack.us/img339/9017/loadingo.png\" style = \"max-width=100%\" > </ a > </ div > <!-- End of Photo DIV (column) --> In the above code, we use a placeholder loadingo.png that we have created previously, so we show an image while the first one from the task is getting loaded. The second section of the skeleton, if we join the previous snippets of code will be like this: < div class = \"row skeleton\" > <!-- Start Skeleton Row--> < div class = \"span6 \" > <!-- Start of Question and Submission DIV (column) --> < h1 id = \"question\" > Question </ h1 > <!-- The question will be loaded here --> < div id = \"answer\" > <!-- Start DIV for the submission buttons --> <!-- If the user clicks this button, the saved answer will be value=\"yes\"--> < button class = \"btn btn-success btn-answer\" value = 'Yes' >< i class = \"icon icon-white icon-thumbs-up\" ></ i > Yes </ button > <!-- If the user clicks this button, the saved answer will be value=\"no\"--> < button class = \"btn btn-danger btn-answer\" value = 'No' >< i class = \"icon icon-white icon-thumbs-down\" ></ i > No </ button > <!-- If the user clicks this button, the saved answer will be value=\"NotKnown\"--> < button class = \"btn btn-answer\" value = 'NotKnown' >< i class = \"icon icon-white icon-question-sign\" ></ i > I don't know </ button > </ div > <!-- End of DIV for the submission buttons --> <!-- Feedback items for the user --> < p > You are working now on task: < span id = \"task-id\" class = \"label label-warning\" > # </ span ></ p > < p > You have completed: < span id = \"done\" class = \"label label-info\" ></ span > tasks from <!-- Progress bar for the user --> < span id = \"total\" class = \"label label-inverse\" ></ span ></ p > < div class = \"progress progress-striped\" > < div id = \"progress\" rel = \"tooltip\" title = \"#\" class = \"bar\" style = \"width: 0%;\" ></ div > </ div > <!-- This project uses Disqus to allow users to provide some feedback. The next section includes a button that when a user clicks on it will load the comments, if any, for the given task --> < div id = \"disqus_show_btn\" style = \"margin-top:5px;\" > < button class = \"btn btn-primary btn-large btn-disqus\" onclick = \"loadDisqus()\" >< i class = \"icon-comments\" ></ i > Show comments </ button > < button class = \"btn btn-large btn-disqus\" onclick = \"loadDisqus()\" style = \"display:none\" >< i class = \"icon-comments\" ></ i > Hide comments </ button > </ div > <!-- End of Disqus Button section --> <!-- Disqus thread for the given task --> < div id = \"disqus_thread\" style = \"margin-top:5px;display:none\" ></ div > </ div > <!-- End of Question and Submission DIV (column) --> < div class = \"span6\" > <!-- Start of Photo DIV (column) --> < a id = \"photo-link\" href = \"#\" > < img id = \"photo\" src = \"http://img339.imageshack.us/img339/9017/loadingo.png\" style = \"max-width=100%\" > </ a > </ div > <!-- End of Photo DIV (columnt) --> </ div > <!-- End of Skeleton Row -->","title":"Flickr Person Skeleton"},{"location":"build/tutorial/#loading-the-task-data","text":"Now that we have set up the skeleton to load the task data, let\u2019s see the JavaScript that we have to write to load the pictures from Flickr and ask the volunteer an answer about them. All the action takes place in the file template.html script section. The script is very simple; it uses the PYBOSSA.JS library to get a new task and to submit and save the answer in the server. PYBOSSA.JS implements two methods that have to be overridden with some logic, as each project will have a different need, i.e., some projects will be loading another type of data in a different skeleton: pybossa.taskLoaded(function(task, deferred){}); pybossa.presentTask(function(task, deferred){}); The pybossa.taskLoaded method will be in charge of adding new objects to the DOM once they have been loaded from Flickr (the URL is provided by the task object in the field task.info.url_b), and resolve the deferred object, so another task for the current user can be pre-loaded. The code is the following: pybossa . taskLoaded ( function ( task , deferred ) { if ( ! $ . isEmptyObject ( task ) ) { // load image from flickr var img = $ ( '<img />' ); img . load ( function () { // continue as soon as the image is loaded deferred . resolve ( task ); }); img . attr ( 'src' , task . info . url_b ). css ( 'height' , 460 ); img . addClass ( 'img-polaroid' ); task . info . image = img ; } else { deferred . resolve ( task ); } }); The pybossa.presentTask method will be called when a task has been obtained from the server: { question : project . description , task : { id : value , ..., info : { url_m : link : } } } That JSON object will be accessible via the task object passed as an argument to the pybossa.presentTask method. First, we will need to check that we are not getting an empty object, as it will mean that there are no more available tasks for the current user. In that case, we should hide the skeleton, and say thanks to the user as he has participated in all the tasks of the project. If the task object is not empty, then we have a task to load into the skeleton . In this demo project, we will update the question, adding the photo to the DOM, refreshing the user progress and add some actions to the submission buttons so we can save the answer of the volunteer. The PYBOSSA.JS library treats the user input as an \u201casync function.\u201d This is why the function gets a deferred object, as this object will be resolved when the user clicks on one of the possible answers. We use this approach to load in the background the next task for the user while the volunteer is solving the current one. Once the answer has been saved in the server, we resolve the deferred: pybossa . presentTask ( function ( task , deferred ) { if ( ! $ . isEmptyObject ( task ) ) { loadUserProgress (); $ ( '#photo-link' ). html ( '' ). append ( task . info . image ); $ ( \"#photo-link\" ). attr ( \"href\" , task . info . link ); $ ( \"#question\" ). html ( task . info . question ); $ ( '#task-id' ). html ( task . id ); $ ( '.btn-answer' ). off ( 'click' ). on ( 'click' , function ( evt ) { var answer = $ ( evt . target ). attr ( \"value\" ); if ( typeof answer != 'undefined' ) { //console.log(answer); pybossa . saveTask ( task . id , answer ). done ( function () { deferred . resolve (); }); $ ( \"#loading\" ). fadeIn ( 500 ); if ( $ ( \"#disqus_thread\" ). is ( \":visible\" )) { $ ( '#disqus_thread' ). toggle (); $ ( '.btn-disqus' ). toggle (); } } else { $ ( \"#error\" ). show (); } }); $ ( \"#loading\" ). hide (); } else { $ ( \".skeleton\" ). hide (); $ ( \"#loading\" ). hide (); $ ( \"#finish\" ). fadeIn ( 500 ); } }); It is important to note that in this method we bind the on-click action for the Yes , No and I don\u2019t know buttons to call the above snippet: $ ( '.btn-answer' ). off ( 'click' ). on ( 'click' , function ( evt ) { var answer = $ ( evt . target ). attr ( \"value\" ); if ( typeof answer != 'undefined' ) { //console.log(answer); pybossa . saveTask ( task . id , answer ). done ( function () { deferred . resolve (); }); $ ( \"#loading\" ). fadeIn ( 500 ); if ( $ ( \"#disqus_thread\" ). is ( \":visible\" )) { $ ( '#disqus_thread' ). toggle (); $ ( '.btn-disqus' ). toggle (); } } else { $ ( \"#error\" ). show (); } }); If your project uses other input methods, you will have to adapt this to fit your project needs. Finally, the pybossa.presentTask calls a method named loadUserProgress . This method is in charge of getting the user the progress of the user and update the progress bar accordingly: function loadUserProgress () { pybossa . userProgress ( 'flickrperson' ). done ( function ( data ){ var pct = Math . round (( data . done * 100 ) / data . total ); $ ( \"#progress\" ). css ( \"width\" , pct . toString () + \"%\" ); $ ( \"#progress\" ). attr ( \"title\" , pct . toString () + \"% completed!\" ); $ ( \"#progress\" ). tooltip ({ 'placement' : 'left' }); $ ( \"#total\" ). text ( data . total ); $ ( \"#done\" ). text ( data . done ); }); } You can update the code only to show the number of answers, or remove it entirely. However, the volunteers will benefit from this type of information as they will be able to know how many tasks they have to do, giving an idea of progress while they contribute to the project. Finally, we only need in our code to tell pybossa.js to run our project: pybossa . run ( 'flickrperson' )","title":"Loading the Task data"},{"location":"build/tutorial/#saving-the-answer","text":"Once the task has been presented, users can click on the answer buttons: Yes , No or I don\u2019t know . Yes and No save the answer in the DB with information about the task and the answer, while the button I don\u2019t know loads another task as sometimes the image is not available. To submit and save the answer from the user, we will use again the PYBOSSA.JS library. In this case: pybossa . saveTask ( taskid , answer ) The pybossa.saveTask method saves an answer for a given task. In the previous section, we show that in the pybossa.presentTask method the task-id can be obtained, as we will be passing the object to saveTask method. The method allows us to give a successful pop-up feedback for the user, so you can use the following structure to warn the user and tell him that his answer has been successfully saved: pybossa . saveTask ( taskid , answer ). done ( function ( data ) { // Show the feedback div $ ( \"#success\" ). fadeIn (); // Fade out the pop-up after a 1000 miliseconds setTimeout ( function () { $ ( \"#success\" ). fadeOut () }, 1000 ); }; );","title":"Saving the answer"},{"location":"build/tutorial/#keeping-track-of-the-time-spent-by-volunteers-solving-a-task","text":"Since v1.1.3, PYBOSSA records a timestamp, for every task run, of the contributed task runs. This is stored in the \u201ccreated\u201d attribute of the Task Runs. Now, with the \u201cfinish_time\u201d attribute, we will be able to know how much time the volunteer has spent completing the task: (time spent = finish_time - created) Tip This information is only shown to the owner of the project.","title":"Keeping track of the time spent by volunteers solving a task"},{"location":"build/tutorial/#updating-the-template-for-all-the-tasks","text":"It is possible to update the template of the project without having to re-create the project and its tasks. To update the template, you only have to modify the file template.html and run the following command: pbs update_project You can also use the web interface to do it, and see the changes in real time before saving the results. Check your project page, go to the tasks section, and look for the Edit the task presenter button.","title":"Updating the template for all the tasks"},{"location":"build/tutorial/#testing-the-task-presenter","text":"To test the project task presenter, go to the following URL http://PYBOSSA-SERVER/project/SLUG/presenter The presenter will load one task, and you will be able to submit and save one answer for the current task.","title":"Testing the task presenter"},{"location":"build/tutorial/#publishing-the-project","text":"Until now, the project has been in testing mode. This means that you can play with your project as much as you want. You can invite a few friends or colleauges to test it, just to know that everything works. In this mode PYBOSSA will work as a published project, so you can test it, however, it is not published so it\u2019s not visible to users on the server unless you share the link to it. Once you are happy, you can publish the project. When you publish the project, PYBOSSA will clean your tests and leave it clean for your contributors. Thus, don\u2019t be afraid and test as much as you want!","title":"Publishing the project"},{"location":"build/tutorial/#tutorial","text":"In general, users will like to have some feedback when accessing for the very first time your project. Usually, the overview page of your project will not be enough, so you can build a tutorial (a web page) that will explain to the volunteer how he can participate in the project. PYBOSSA will detect if the user is accessing for the very first time your project, so in that case, it will load the tutorial , if your project has one. Adding a tutorial is simple: you only have to create a file named tutorial.html and load the content of the file using pbs: pbs update_project The tutorial could have whatever you like: videos, nice animations, etc. PYBOSSA will render for you the header and the footer, so you only have to focus on the content. You can copy the template.html file and use it as a draft of your tutorial or just include a video of yourself explaining why your project is important and how, as a volunteer, you can contribute. If your project has a tutorial, you can access it directly in this endpoint: 1 http://server/project/tutorial","title":"Tutorial"},{"location":"build/tutorial/#advance-tutorial-helping-materials","text":"While the previous solution works for most of the projects, your project might need something special: visual clues so users can easily identify sounds, patterns, etc. easily. The default tutorial does not allow you to curate/create a list of helping materials that could be used directly in the presenter to explain how for example you can identify cancer cells, or specific species of animals. For this reason, PYBOSSA now supports an API endpoint for helping materials: api/helpingmaterial. This endpoint allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial. Helping materials allow you to upload images via the endpoint using the multipart/form-data Content-Type. For example, imagine that you want to add a photo of an animal and it\u2019s description, so users can easily identify it (or use it as pre-loaded answer for classifying pictures of animals). In this case, you can do the following (using the popular Python requests library, but you can use any other programming language): import requests url = 'https://server/api/helpingpoint?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID } r = requests . post ( url , data = data , files = files ) # Get the created helping material hp = r . json () # Add the meta-data of the picture url = 'https://server/api/helpingpoint/ %s ?api_key=YOURKEY' % hp [ 'id' ] info = { 'popular_name' : 'elephant' , 'scientific_name' : 'loxodonta' } r = requests . put ( url , json = { 'info' : info }) You can add as many files as you want. Then, from any place you can query the helping material endpoint to retrieve the example/tutorial materials for helping your users. Tip You can use PBS to add helping materials from an Excel or CSV file. Check the documentation .","title":"Advance tutorial (helping materials)"},{"location":"build/tutorial/#providing-some-i18n-support","text":"Sometimes, you may want to provide the task interface in their language. To support this, you can access their locale via Javascript in an effortless way, as we\u2019ve placed the user locale in a hidden \u2018div\u2019 node: var userLocale = document . getElementById ( 'PYBOSSA_USER_LOCALE' ). textContent . trim (); The way you use it after that is up to you. But let\u2019s see an example of how you can use it to make a tutorial that automatically shows the strings in the locale of the user. Warning Anonymous users will be only shown with en language by default. This feature only works for authenticated users that choose their locale in their account. You can, however, load the translated strings using the browser preferred language. First of all, check the tutorial.html file . You will see it consists on some HTML plus some Javascript inside a script tag to handle the different steps of the tutorial. Here you have a snippet of HTML tutorial file: < div class = \"row\" > < div class = \"col-md-12\" > < div id = \"modal\" class = \"modal hide fade\" > < div class = \"modal-header\" > < h3 > Flickr Person Finder tutorial </ h3 > </ div > < div id = \"0\" class = \"modal-body\" style = \"display:none\" > < p >< strong > Hi! </ strong > This is a < strong > demo project </ strong > that shows how you can do pattern recognition on pictures or images using the PYBOSSA framework. </ p > </ div > < div id = \"1\" class = \"modal-body\" style = \"display:none\" > < p > The project is really simple. It loads a photo from < a href = \"http://flickr.com\" > Flickr </ a > and asks you this question: < strong > Do you see a human in this photo? </ strong ></ p > < img src = \"http://farm7.staticflickr.com/6109/6286728068_2f3c6912b8_q.jpg\" class = \"img-thumbnail\" /> < p > You will have 3 possible answers: < ul > < li > Yes, </ li > < li > No, and </ li > < li > I don't know </ li > </ ul > </ p > < p > </ p > < p > All you have to do is to click in one of the three possible answers and you will be done. This demo project could be adapted for more complex pattern recognition problems. </ p > </ div > < div class = \"modal-footer\" > < a id = \"prevBtn\" href = \"#\" onclick = \"showStep('prev')\" class = \"btn\" > Previous </ a > < a id = \"nextBtn\" href = \"#\" onclick = \"showStep('next')\" class = \"btn btn-success\" > Next </ a > < a id = \"startContrib\" href = \"../flickrperson/newtask\" class = \"btn btn-primary\" style = \"display:none\" >< i class = \"fa fa-thumbs-o-up\" ></ i > Try the demo! </ a > </ div > </ div > </ div > </ div > To add multilingual support, copy and paste it is as many times as languages you\u2019re planning to support. Then, add to each of them an id in the outermost \u2018div\u2019 which corresponds to the name of the locale (\u2018en\u2019 for English, \u2018es\u2019 for Spanish, etc.), and translate the inner text of it, but leave all the HTML the same in every version (tags, ids, classes, etc.) like: < div id = 'es' class = \"row\" > Your translated version of the HTML goes here, but only change the text, NOT the HTML tags, IDs or classes. </ div > Finally, in the Javascript section of the tutorial, you will need to add some extra code to enable multilingual tutorials. Thus, modify the javascript from: var step = - 1 ; function showStep ( action ) { $ ( \"#\" + step ). hide (); if ( action == 'next' ) { step = step + 1 ; } if ( action == 'prev' ) { step = step - 1 ; } if ( step == 0 ) { $ ( \"#prevBtn\" ). hide (); } else { $ ( \"#prevBtn\" ). show (); } if ( step == 1 ) { $ ( \"#nextBtn\" ). hide (); $ ( \"#startContrib\" ). show (); } $ ( \"#\" + step ). show (); } showStep ( 'next' ); $ ( \"#modal\" ). modal ( 'show' ); To: var languages = [ 'en' , 'es' ] $ ( document ). ready ( function (){ var userLocale = document . getElementById ( 'PYBOSSA_USER_LOCALE' ). textContent . trim (); languages . forEach ( function ( lan ){ if ( lan !== userLocale ) { var node = document . getElementById ( lan ); if ( node . parentNode ) { node . parentNode . removeChild ( node ); } } }); var step = - 1 ; function showStep ( action ) { $ ( \"#\" + step ). hide (); if ( action == 'next' ) { step = step + 1 ; } if ( action == 'prev' ) { step = step - 1 ; } if ( step == 0 ) { $ ( \"#prevBtn\" ). hide (); } else { $ ( \"#prevBtn\" ). show (); } if ( step == 1 ) { $ ( \"#nextBtn\" ). hide (); $ ( \"#startContrib\" ). show (); } $ ( \"#\" + step ). show (); } showStep ( 'next' ); $ ( \"#modal\" ). modal ( 'show' ); }); Notice the languages array variable defined at the beginning?. It\u2019s vital that you place there the IDs you\u2019ve given to the different translated versions of your HTML for the tutorial. The rest of the script will only compare the locale of the user that is seeing the tutorial and delete all the HTML that is not in his language, so that only the tutorial that fits his locale settings is shown.","title":"Providing some I18n support"},{"location":"build/tutorial/#another-method-to-support-i18n","text":"Another option for translating your project to different languages is using a JSON object like this: messages = { \"en\" : { \"welcome\" : \"Hello World!, \" bye \": \" Good bye ! \" }, \" es : { \"welcome\" : \"Hola mundo!\" , \"bye\" : \"Hasta luego!\" } } This object can be placed in the tutorial.html or template.html file to load the proper strings translated to your users. The logic is very simple. With the following code you grab the language that should be loaded for the current user: var userLocale = document . getElementById ( 'PYBOSSA_USER_LOCALE' ). textContent . trim (); Now, use userLocale to load the strings. For example, for template.html and the Flickrperson demo project, you will find the following code at the start of the script: // Default language var userLocale = \"en\" ; // Translations var messages = { \"en\" : { \"i18n_welldone\" : \"Well done!\" , \"i18n_welldone_text\" : \"Your answer has been saved\" , \"i18n_loading_next_task\" : \"Loading next task...\" , \"i18n_task_completed\" : \"The task has been completed!\" , \"i18n_thanks\" : \"Thanks a lot!\" , \"i18n_congratulations\" : \"Congratulations\" , \"i18n_congratulations_text\" : \"You have participated in all available tasks!\" , \"i18n_yes\" : \"Yes\" , \"i18n_no_photo\" : \"No photo\" , \"i18n_i_dont_know\" : \"I don't know\" , \"i18n_working_task\" : \"You are working now on task:\" , \"i18n_tasks_completed\" : \"You have completed:\" , \"i18n_tasks_from\" : \"tasks from\" , \"i18n_show_comments\" : \"Show comments:\" , \"i18n_hide_comments\" : \"Hide comments:\" , \"i18n_question\" : \"Do you see a human face in this photo?\" , }, \"es\" : { \"i18n_welldone\" : \"Bien hecho!\" , \"i18n_welldone_text\" : \"Tu respuesta ha sido guardada\" , \"i18n_loading_next_task\" : \"Cargando la siguiente tarea...\" , \"i18n_task_completed\" : \"La tarea ha sido completadas!\" , \"i18n_thanks\" : \"Much\u00edsimas gracias!\" , \"i18n_congratulations\" : \"Enhorabuena\" , \"i18n_congratulations_text\" : \"Has participado en todas las tareas disponibles!\" , \"i18n_yes\" : \"S\u00ed\" , \"i18n_no_photo\" : \"No hay foto\" , \"i18n_i_dont_know\" : \"No lo s\u00e9\" , \"i18n_working_task\" : \"Est\u00e1s trabajando en la tarea:\" , \"i18n_tasks_completed\" : \"Has completado:\" , \"i18n_tasks_from\" : \"tareas de\" , \"i18n_show_comments\" : \"Mostrar comentarios\" , \"i18n_hide_comments\" : \"Ocultar comentarios\" , \"i18n_question\" : \"\u00bfVes una cara humana en esta foto?\" , }, }; // Update userLocale with server side information $ ( document ). ready ( function (){ userLocale = document . getElementById ( 'PYBOSSA_USER_LOCALE' ). textContent . trim (); }); function i18n_translate () { var ids = Object . keys ( messages [ userLocale ]) for ( i = 0 ; i < ids . length ; i ++ ) { console . log ( \"Translating: \" + ids [ i ]); document . getElementById ( ids [ i ]). innerHTML = messages [ userLocale ][ ids [ i ]]; } } First, we define the default locale, \u201cen\u201d for English. Then, we create a messages dictionary with all the ids that we want to translate. Finally, we add the languages that we want to support. As you can see, it\u2019s quite simple as you can share the messages object with your volunteers so that you can get many more translations for your project smoothly. Finally, we need actually to load those translated strings into the template. For doing this step, all we\u2019ve to do is adding the following code to our template.html file at the function pybossa.presentTask: pybossa . presentTask ( function ( task , deferred ) { if ( ! $ . isEmptyObject ( task ) ) { loadUserProgress (); i18n_translate (); ... Done! When the task is loaded, the strings are translated and the project will be shown in the user language.","title":"Another method to support I18n"},{"location":"build/tutorial/#updating-projects-status","text":"You can share the progress of the project creating a blog. Every PYBOSSA project includes a blog where you will be able to write about your project regularly. You can use Markdown or plain text for the content of the posts. And you will also be able to edit them or delete after creation if you want. To write a post go to the project Settings tab and there you will find an option to write, read or delete your blog posts. You can use the endpoint /api/blogpost to also add blogposts, update them and delete them. The api endpoint allows you as well to upload a picture to your blogpost. This endpoint allows you to add JSON and media files (images, videos or sounds) that you can use with your blogpost. You can use this endpoint for uploading images via the endpoint using the multipart/form-data Content-Type. For example, imagine that you want to add a photo as a cover and then the body of the blogpost. In this case, you can do the following (using the popular Python requests library, but you can use any other programming language): import requests url = 'https://server/api/blogpost?api_key=YOURKEY' # Upload a picture files = { 'file' : open ( 'test.jpg' , 'rb' )} data = { 'project_id' : YOURPROJECT_ID , title = 'title' , body = 'body' } r = requests . post ( url , data = data , files = files ) # Get the created blogpost bp = r . json () # Update the body with the meta-data of the picture url = 'https://server/api/blogpost/ %s ?api_key=YOURKEY' % bp [ 'id' ] body = 'hello ![img]( %s )' % bp [ 'media_url' ] r = requests . put ( url , json = { 'body' : body })","title":"Updating project's status"},{"location":"build/tutorial/#exporting-the-projects-data","text":"You can export all the available data your project in three different ways: JSON , an open standard designed for human-readable data interchange, or CSV , a file that stores tabular data (numbers and text) in plain-text form and that can be opened with almost any spreadsheet software, or CKAN web server, a powerful data management a system that makes data accessible \u2013by providing tools to streamline publishing, sharing, finding and using data. For exporting the data, all you have to do is to visit the following URL in your web-browser: 1 http : // PYBOSSA - SERVER / project / slug / tasks / export You will find an interface that will allow you to export the Tasks, Task Runs and Results to JSON and CSV formats: The previous methods will export all the tasks, results and task runs, even if they are not completed . When a task has been completed, in other words, when a task has collected the number of answers specified by the task ( n_answers = 30 by default), a brown button with the text Download results will pop up, and if you click it all the answers for the given task will be shown in JSON format. You can check which tasks are completed, in the following URL: 1 http://PYBOSSA-SERVER/project/slug And clicking on the Tasks link in the left local navigation , and then click in the Browse box: Then you will see which tasks are completed, and which ones you can download in JSON format: You could download the results also using the API. For example, you could write a small script that gets the list of tasks that have been completed using this URL: 1 GET http://PYBOSSA-SERVER/api/task?state=completed Note If your project has more than 20 tasks, then you will need to use the API pagination , as by default PYBOSSA API only returns the first 20 items. Once you have obtained the list of completed tasks, your script could start requesting the collected answers for the given tasks: 1 GET http://PYBOSSA-SERVER/api/taskrun?task_id=TASK-ID That way you will be able to get all the submitted answers by the volunteers for the given task.","title":"Exporting the project's data"},{"location":"build/tutorial/#exporting-the-task-task-runs-and-results-in-json","text":"For the JSON format, you will get all the output as a file that your browser will download, named: short_name_tasks.json for the tasks, and short_name_task_runs.json for the task runs.","title":"Exporting the task, task runs and results in JSON"},{"location":"build/tutorial/#exporting-the-task-task-runs-and-results-to-a-csv-file","text":"While for the CSV format, you will get a CSV file that will be automatically saved on your computer.","title":"Exporting the task, task runs and results to a CSV file"},{"location":"build/tutorial/#exporting-the-task-task-runs-and-results-to-a-ckan-server","text":"If the server has been configured to allow you to export your project\u2019s data to a CKAN server, the owner of the project will see another box that will give you the option to export the data to the CKAN server. To use this method, you will need to add the CKAN API-KEY associated with your account, otherwise, you will not be able to export the data, and a warning message will let you know it. Adding the CKAN API-KEY is simple. You only need to create an account in the supported CKAN server, check your profile and copy the API-KEY. Then, open your PYBOSSA account page, edit it and paste the key in the section External Services . Then, you will be able to export the data to the CKAN server and host it there.","title":"Exporting the task, task runs and results to a CKAN server"},{"location":"build/tutorial/#publishing-results-of-your-project","text":"Since v1.2.0, PYBOSSA automatically creates \u201cempty\u201d results when a task is completed. For example, imagine your project is asking the following question in a set of images: \u201cDo you see a triangle in this picture?\u201d The possible answers are: yes and no. Your project has configured the task redundancy to 5, so five people will answer that question for a given image (or task). When the 5 th person sends the answer, the server marks the task as completed, and it creates a result for the given task associating the answers, the task and the project: { \"id\" : 1 , \"project_id\" : 1 , \"task_id\" : 1 , \"task_run_ids\" : [ 1 , 2 , 3 , 4 , 5 ], \"info\" : null } As in other PYBOSSA domain objects, a result has a JSON field named info that allows you to store the final result for that task using the task_runs 1, 2, 3, 4, 5. Imagine that the five volunteers answered: yes, then as you are the project owner you could update the info field with that value: { \"id\" : 1 , \"project_id\" : 1 , \"task_id\" : 1 , \"task_run_ids\" : [ 1 , 2 , 3 , 4 , 5 ], \"info\" : { \"triangle\" : \"yes\" }} The benefit of storing that information is that you can access these data via the PYBOSSA API so you will be able to show the results, in your result project section using the API. This will allow you to build beautiful visualizations of your results on maps, WebGL, etc.","title":"Publishing results of your project"},{"location":"build/tutorial/#api-errors","text":"If something goes wrong, you should get an error message similar to the following one: ERROR : root : pbclient . create_project { \"action\" : \"POST\" , \"exception_cls\" : \"IntegrityError\" , \"exception_msg\" : \"(IntegrityError) duplicate key value violates unique constraint \\\"project_name_key\\\"\\nDETAIL: Key (name)=(Flickr Person Finder) already exists.\\n\" , \"status\" : \"failed\" , \"status_code\" : 415 , \"target\" : \"project\" } The error message will have the information regarding the problems it has found when using the API. Note Since version 2.0.1 PYBOSSA enforces API Rate Limiting, so you might exceed the number of allowed requests, getting a 429 error. Please see rate-limiting section .","title":"API Errors"},{"location":"build/webhooks/","text":"Analyzing your project in real-time \u00b6 When you have your project running, you will want to analyze the contributions sent by the volunteers. For doing this task, you can do it offline, with our Enki software, or take advantage of the PYBOSSA webhooks feature. PYBOSSA webhooks is a notification system, that will send an HTTP POST request to another server of your choice, sending the following data: { ' f ired_a t ' :, 'projec t _shor t _ na me' : 'projec t - slug' , 'projec t _id' : 1 , ' tas k_id' : 1 , 'resul t _id' : 1 , 'eve nt ' : ' tas k_comple te d' } As you can see, the data specifies which task has been completed, when, and which empty result has been created for you. In this way, you can ask Enki to download the task, its associated task runs and do the statistical analysis in real time. Moreover, as PYBOSSA creates an empty result for you, you can use again enki to POST the statistical analysis back to PYBOSSA, so you can then search through the API for example for all the pictures classified as red. In order to simplify your workflow, we have created a small microservice named webhooks , that gives you the basics to start. While the main purpose of this microservice is to do the analysis of the results, you can customize and fork it to do other things like: Post to Twitter that your project has completed a task. Upload the results to your DropBox folder by writing the results in a file. Create a new task in another project, because the statistics met a given criteria. Send an email with the result as an attachment, and in the body of the email the statistical analysis. Give badges to users that correctly answered the task. etc. The template that we provide, only shows how you can easily get the most voted option for an image pattern recognition project. Installation \u00b6 To install the microservice all you need is to run the following command (we recommend you to use a virtual environment): pip install -r requirements.txt Note Clone or download the software before proceed. Now, copy the settings.py.template file to: settings.py and fill in the information. Once you are done with this file, you\u2019ll be ready to run the server. Note Be sure to have a PYBOSSA API-KEY as the analysis will be stored in the PYBOSSA results table. Note It requires a PYBOSSA server >= 1.2.0. Running the microservice \u00b6 Now that you\u2019ve the required libraries installed, running the server is as simple as this: python app.py Then, copy the domain or IP and port where it\u2019s running and save that address in your project\u2019s settings page, in the webhooks field. PYBOSSA will check if the webhooks server is running. If it is not, it will fail and it will not allow you to save the URL. Configuring background jobs \u00b6 By default, this project has disabled the creation of queues in your system. If you expect to have lots of contributions in your project, we recommend you to enable them. To support queues you will need to install in your machine a Redis server. Then, change the flag: enable_background_jobs to True in your settings.py file, and restart the server. Note If you are already running a Redis server and queues, you can customize the name of your queue in the settings file. Check out the config variable: queue_name . Running the background jobs \u00b6 Now that you have the project running background jobs, you need to process them. This is very simple, in another terminal run the following command: rqworker mywebhooks Note If you\u2019ve changed the name of the queue, please, update the previous command with your new queue name. That\u2019s all! Enjoy!!! Debugging your analysis \u00b6 While you are developing the analysis module for your project, you will want to test it. For this reason, PYBOSSA provides a way of re-running all the created webhooks, one specific, or all the failed ones. In this way, you will be able to fix your code, without having to stop your project. Go to your webhooks project section, and check the available options. Note PYBOSSA sends you a rerun argument when doing the POST if you use any of the previous options, so you can handle that specific case in your code. All you have to do is check for that argument in the POST. Creating missing webhooks \u00b6 Sometimes, you might start your project without the webhooks solution in mind. This will lead to a project where you have several completed tasks, without any associated webhooks. This is because you didn\u2019t enabled the webhooks solution, and therefore PYBOSSA didn\u2019t created it for you. For those cases, you can use the cli.py script. It has a specific command that will allow you to create all the missing webhooks in one row. For doing it, all you need is your project ID and then run the following command: python cli.py create_webhooks projectID Then, from your project, enable the webhooks server, and you will only have to hit the button re-run all webhooks. This action, will enqueue all the webhooks and you will get your data analysis done!","title":"Real time data analysis"},{"location":"build/webhooks/#analyzing-your-project-in-real-time","text":"When you have your project running, you will want to analyze the contributions sent by the volunteers. For doing this task, you can do it offline, with our Enki software, or take advantage of the PYBOSSA webhooks feature. PYBOSSA webhooks is a notification system, that will send an HTTP POST request to another server of your choice, sending the following data: { ' f ired_a t ' :, 'projec t _shor t _ na me' : 'projec t - slug' , 'projec t _id' : 1 , ' tas k_id' : 1 , 'resul t _id' : 1 , 'eve nt ' : ' tas k_comple te d' } As you can see, the data specifies which task has been completed, when, and which empty result has been created for you. In this way, you can ask Enki to download the task, its associated task runs and do the statistical analysis in real time. Moreover, as PYBOSSA creates an empty result for you, you can use again enki to POST the statistical analysis back to PYBOSSA, so you can then search through the API for example for all the pictures classified as red. In order to simplify your workflow, we have created a small microservice named webhooks , that gives you the basics to start. While the main purpose of this microservice is to do the analysis of the results, you can customize and fork it to do other things like: Post to Twitter that your project has completed a task. Upload the results to your DropBox folder by writing the results in a file. Create a new task in another project, because the statistics met a given criteria. Send an email with the result as an attachment, and in the body of the email the statistical analysis. Give badges to users that correctly answered the task. etc. The template that we provide, only shows how you can easily get the most voted option for an image pattern recognition project.","title":"Analyzing your project in real-time"},{"location":"build/webhooks/#installation","text":"To install the microservice all you need is to run the following command (we recommend you to use a virtual environment): pip install -r requirements.txt Note Clone or download the software before proceed. Now, copy the settings.py.template file to: settings.py and fill in the information. Once you are done with this file, you\u2019ll be ready to run the server. Note Be sure to have a PYBOSSA API-KEY as the analysis will be stored in the PYBOSSA results table. Note It requires a PYBOSSA server >= 1.2.0.","title":"Installation"},{"location":"build/webhooks/#running-the-microservice","text":"Now that you\u2019ve the required libraries installed, running the server is as simple as this: python app.py Then, copy the domain or IP and port where it\u2019s running and save that address in your project\u2019s settings page, in the webhooks field. PYBOSSA will check if the webhooks server is running. If it is not, it will fail and it will not allow you to save the URL.","title":"Running the microservice"},{"location":"build/webhooks/#configuring-background-jobs","text":"By default, this project has disabled the creation of queues in your system. If you expect to have lots of contributions in your project, we recommend you to enable them. To support queues you will need to install in your machine a Redis server. Then, change the flag: enable_background_jobs to True in your settings.py file, and restart the server. Note If you are already running a Redis server and queues, you can customize the name of your queue in the settings file. Check out the config variable: queue_name .","title":"Configuring background jobs"},{"location":"build/webhooks/#running-the-background-jobs","text":"Now that you have the project running background jobs, you need to process them. This is very simple, in another terminal run the following command: rqworker mywebhooks Note If you\u2019ve changed the name of the queue, please, update the previous command with your new queue name. That\u2019s all! Enjoy!!!","title":"Running the background jobs"},{"location":"build/webhooks/#debugging-your-analysis","text":"While you are developing the analysis module for your project, you will want to test it. For this reason, PYBOSSA provides a way of re-running all the created webhooks, one specific, or all the failed ones. In this way, you will be able to fix your code, without having to stop your project. Go to your webhooks project section, and check the available options. Note PYBOSSA sends you a rerun argument when doing the POST if you use any of the previous options, so you can handle that specific case in your code. All you have to do is check for that argument in the POST.","title":"Debugging your analysis"},{"location":"build/webhooks/#creating-missing-webhooks","text":"Sometimes, you might start your project without the webhooks solution in mind. This will lead to a project where you have several completed tasks, without any associated webhooks. This is because you didn\u2019t enabled the webhooks solution, and therefore PYBOSSA didn\u2019t created it for you. For those cases, you can use the cli.py script. It has a specific command that will allow you to create all the missing webhooks in one row. For doing it, all you need is your project ID and then run the following command: python cli.py create_webhooks projectID Then, from your project, enable the webhooks server, and you will only have to hit the button re-run all webhooks. This action, will enqueue all the webhooks and you will get your data analysis done!","title":"Creating missing webhooks"},{"location":"data/intro/","text":"","title":"Intro"},{"location":"github/intro/","text":"The MicroPasts project is founded on open principles - source, data and access. All code for these projects is released on Github. Our organisation can be found at: https://github.com/micropasts The SciFabric organisation hosts the source code for the Pybossa platform. We are slightly behind their release cycle due to functions being removed that we consider key to our work. https://github.com/SciFabric What will you find on github \u00b6 On our github profile we store code for: The defunct crowdfunding platform we built using Catarse Scripts for manipulating data from the Pybossa api The theme files we serve for MicroPasts The wordpress theme we serve for MicroPasts Data files derived from the projects","title":"Intro"},{"location":"github/intro/#what-will-you-find-on-github","text":"On our github profile we store code for: The defunct crowdfunding platform we built using Catarse Scripts for manipulating data from the Pybossa api The theme files we serve for MicroPasts The wordpress theme we serve for MicroPasts Data files derived from the projects","title":"What will you find on github"},{"location":"installation/admin/","text":"Administrating PYBOSSA \u00b6 PYBOSSA provides an admin section where administrators will be able to see a dashboard with global statistics, manage the background jobs, featured projects, categories, administrators, and users. Roles \u00b6 PYBOSSA has four type of users: anonymous, authenticated, pro and administrators. By default the first created user in a PYBOSSA server will become an administrator and manage the site with full privileges. And admin user will be able to access the admin page by clicking on the username and then in the link Admin site . Administrators have full privileges on the server. They can modify anything within the server. Especially, they will be able to handle the following areas of the server: Background jobs. Featured projects. Categories. Administrators. Users. Admins can also modify all projects. An admin can hide a project, update its task presenter, add new tasks, delete tasks or results. In other words, it can modify any aspect of any project within the server. Adding new administrators \u00b6 In the admin area you will see a specific card for managing the administrators. In this card, you will be able to search by username to add new administrators. Also, you will see the list of current admins. From there, you will be able to remove them by clicking on the remove button below each username. Adding pro users \u00b6 This feature is not available at the moment. However, you can add a pro user within your server by modifying the user field pro via SQL. Dashboard \u00b6 This card provides an overview of the PYBOSSA server within the last seven days. The dashboard is updated every 24 hours via the background jobs. These jobs are scheduled in the low queue. Active users \u00b6 It provides the total number of active users (registered) as well as a graph showing the number of users active per day. Active anonymous users \u00b6 It provides the total number of active anonymous users (registered) as well as a graph showing the number of them active per day. Draft projects \u00b6 It gives you a list of draft projects created within the last seven days. It also provides the total number of this type of projects. PYBOSSA considers a project to be in draft mode when it does not have a task and a task presenter. Published projects \u00b6 It gives you a list of published projects published within the last seven days. It also provides the total number of this type of projects. PYBOSSA considers a project to be published when it does have at least a task and a task presenter. Updated projects \u00b6 It gives you a list of updated projects within the last seven days. It also provides the total number of this type of projects. PYBOSSA considers a project to be updated when anything related to it has been updated: a new blog post, new tasks, new task runs, edits on the task presenter, etc. New tasks \u00b6 It provides the total number of new tasks created in the PYBOSSA server as well as a chart showing how many each day were created. New answers (or task runs) \u00b6 It provides the total number of new answers (task runs) created in the PYBOSSA server as well as a chart showing how many each day were created. New users \u00b6 It provides the total number of new registered users within the last seven days. It also includes a chart showing how many new users each day registered. Returning users \u00b6 This chart shows how many users have contributed at least a task to a project, two, three, four, five, six and seven days in a row. This statistic shows how many users you have in the system that contribute a lot and come back every day to contribute to your projects. Recent activity feed \u00b6 This section shows the action of the PYBOSSA system in real time. You will be able to see the last 20 events of the system regarding new registrations, when a task has been completed, or a new blog post has been published. Background jobs \u00b6 This section allows you to see if any of your jobs and workers are performing well. Just take a look at them from time to time. In recent versions of PYBOSSA when a job fails more than three times in a row, you will get notified. Check this section for more information. Featured Projects \u00b6 In this section, admins can add/remove projects to the front page of the site. You will see an \u201cAdd to Featured\u201d link to add a project to the featured front page or a \u201cRemove from Featured\u201d to remove it. Categories \u00b6 PYBOSSA provides by default two categories: Thinking : for projects where the users can use their skills to solve a problem (i.e., image or sound pattern recognition). Sensing : for projects where the users can help gathering data using tools like EpiCollect and then analyze the data in the PYBOSSA server. Admins can add as many categories as they want, just type then and its description and click on the green button labeled: Add category. Note You cannot delete a category if it has one or more projects associated with it. You can, however, rename the category or remove it when all the associated projects are not linked to the given category. Project\u2019s Audit log \u00b6 When a project is created, deleted or updated, the system registers its actions on the server. Admins will have access to all the logged activities in every project page, in a section named Audit log . The section will let you know the following information: When : when the action was taken. Action : which action was taken: \u2018created\u2019, \u2018updated\u2019, or \u2018deleted.\u2019 Source : if it was done the action via the API or the WEB interface. Attribute : which attributes of the project has been changed. Who : the user who took action. Old value : the previous value before the action. New value : the new value after the action. !!! note: Only admins and users marked as pro can see the audit log.","title":"Administering PYBOSSA"},{"location":"installation/admin/#administrating-pybossa","text":"PYBOSSA provides an admin section where administrators will be able to see a dashboard with global statistics, manage the background jobs, featured projects, categories, administrators, and users.","title":"Administrating PYBOSSA"},{"location":"installation/admin/#roles","text":"PYBOSSA has four type of users: anonymous, authenticated, pro and administrators. By default the first created user in a PYBOSSA server will become an administrator and manage the site with full privileges. And admin user will be able to access the admin page by clicking on the username and then in the link Admin site . Administrators have full privileges on the server. They can modify anything within the server. Especially, they will be able to handle the following areas of the server: Background jobs. Featured projects. Categories. Administrators. Users. Admins can also modify all projects. An admin can hide a project, update its task presenter, add new tasks, delete tasks or results. In other words, it can modify any aspect of any project within the server.","title":"Roles"},{"location":"installation/admin/#adding-new-administrators","text":"In the admin area you will see a specific card for managing the administrators. In this card, you will be able to search by username to add new administrators. Also, you will see the list of current admins. From there, you will be able to remove them by clicking on the remove button below each username.","title":"Adding new administrators"},{"location":"installation/admin/#adding-pro-users","text":"This feature is not available at the moment. However, you can add a pro user within your server by modifying the user field pro via SQL.","title":"Adding pro users"},{"location":"installation/admin/#dashboard","text":"This card provides an overview of the PYBOSSA server within the last seven days. The dashboard is updated every 24 hours via the background jobs. These jobs are scheduled in the low queue.","title":"Dashboard"},{"location":"installation/admin/#active-users","text":"It provides the total number of active users (registered) as well as a graph showing the number of users active per day.","title":"Active users"},{"location":"installation/admin/#active-anonymous-users","text":"It provides the total number of active anonymous users (registered) as well as a graph showing the number of them active per day.","title":"Active anonymous users"},{"location":"installation/admin/#draft-projects","text":"It gives you a list of draft projects created within the last seven days. It also provides the total number of this type of projects. PYBOSSA considers a project to be in draft mode when it does not have a task and a task presenter.","title":"Draft projects"},{"location":"installation/admin/#published-projects","text":"It gives you a list of published projects published within the last seven days. It also provides the total number of this type of projects. PYBOSSA considers a project to be published when it does have at least a task and a task presenter.","title":"Published projects"},{"location":"installation/admin/#updated-projects","text":"It gives you a list of updated projects within the last seven days. It also provides the total number of this type of projects. PYBOSSA considers a project to be updated when anything related to it has been updated: a new blog post, new tasks, new task runs, edits on the task presenter, etc.","title":"Updated projects"},{"location":"installation/admin/#new-tasks","text":"It provides the total number of new tasks created in the PYBOSSA server as well as a chart showing how many each day were created.","title":"New tasks"},{"location":"installation/admin/#new-answers-or-task-runs","text":"It provides the total number of new answers (task runs) created in the PYBOSSA server as well as a chart showing how many each day were created.","title":"New answers (or task runs)"},{"location":"installation/admin/#new-users","text":"It provides the total number of new registered users within the last seven days. It also includes a chart showing how many new users each day registered.","title":"New users"},{"location":"installation/admin/#returning-users","text":"This chart shows how many users have contributed at least a task to a project, two, three, four, five, six and seven days in a row. This statistic shows how many users you have in the system that contribute a lot and come back every day to contribute to your projects.","title":"Returning users"},{"location":"installation/admin/#recent-activity-feed","text":"This section shows the action of the PYBOSSA system in real time. You will be able to see the last 20 events of the system regarding new registrations, when a task has been completed, or a new blog post has been published.","title":"Recent activity feed"},{"location":"installation/admin/#background-jobs","text":"This section allows you to see if any of your jobs and workers are performing well. Just take a look at them from time to time. In recent versions of PYBOSSA when a job fails more than three times in a row, you will get notified. Check this section for more information.","title":"Background jobs"},{"location":"installation/admin/#featured-projects","text":"In this section, admins can add/remove projects to the front page of the site. You will see an \u201cAdd to Featured\u201d link to add a project to the featured front page or a \u201cRemove from Featured\u201d to remove it.","title":"Featured Projects"},{"location":"installation/admin/#categories","text":"PYBOSSA provides by default two categories: Thinking : for projects where the users can use their skills to solve a problem (i.e., image or sound pattern recognition). Sensing : for projects where the users can help gathering data using tools like EpiCollect and then analyze the data in the PYBOSSA server. Admins can add as many categories as they want, just type then and its description and click on the green button labeled: Add category. Note You cannot delete a category if it has one or more projects associated with it. You can, however, rename the category or remove it when all the associated projects are not linked to the given category.","title":"Categories"},{"location":"installation/admin/#projects-audit-log","text":"When a project is created, deleted or updated, the system registers its actions on the server. Admins will have access to all the logged activities in every project page, in a section named Audit log . The section will let you know the following information: When : when the action was taken. Action : which action was taken: \u2018created\u2019, \u2018updated\u2019, or \u2018deleted.\u2019 Source : if it was done the action via the API or the WEB interface. Attribute : which attributes of the project has been changed. Who : the user who took action. Old value : the previous value before the action. New value : the new value after the action. !!! note: Only admins and users marked as pro can see the audit log.","title":"Project's Audit log"},{"location":"installation/configuration/","text":"Configuring PYBOSSA \u00b6 The PYBOSSA settings_local.py.tmpl file has all the available configuration options for your server. This section, explains each of them and how you should/could use them on your server. Official support \u00b6 If you need help configuring your PYBOSSA server, contact us . We offer official support and we would love to work with your PYBOSSA server. Debug mode \u00b6 The DEBUG mode is disabled by default in the configuration file, as this should be only used when you are running the server for development purposes. You should not enable this option unless you need to do some debugging in the PYBOSSA server. Debug Toolbar \u00b6 PYBOSSA includes a flag to enable a debug toolbar that can give you more insights about the performance of PYBOSSA. We strongly recommend keeping the toolbar disabled in production environments, as it will slow down considerably all the execution of the code. However, if you are testing the server, feel free to enable it adding the following variable to the settings file: ENABLE_DEBUG_TOOLBAR = True Profiling \u00b6 PYBOSSA installs Flask-Profiler , an extension that allows you to know which endpoints are being called, and how much time it takes for them to process each request. You can enable it by setting this config variable in the settings_local.py file: FLASK_PROFILER = { \"enabled\" : True , \"storage\" : { \"engine\" : \"sqlite\" }, \"basicAuth\" :{ \"enabled\" : True , \"username\" : \"admin\" , \"password\" : \"admin\" }, \"ignore\" : [ \"^/static/.*\" ] } Now you can access the profiling page: http://server/flask-profiler/ . Warning Be sure to use a strong password to protect this view as well as HTTPS. Host and Port \u00b6 The HOST and PORT config variables can be used to force the server to listen on specific addresses of your server, as well as at a given port. Usually, you will only need to uncomment the HOST variable to listen on all the network interfaces. Securing the server \u00b6 PYBOSSA uses the Flask Sessions feature that signs the cookies cryptographically for storing information. This improves the security of the server, as the user could look at the contents of the cookie but not modify it, unless they know the SECRET and SECRET_KEY . Therefore, it is essential that you create a new SECRET and SECRET_KEY keys for your server and keep them private . Please, check the Flask Sessions documentation for instructions on how to create proper secret keys. Ensuring Anonymous IPs \u00b6 PYBOSSA uses CryptoPAn to anoymize the user\u2019s IPs when they participate as anonymous users. This is a feature that\u2019s mandatory, and you will have to create a KEY for it, specially this one: CRYPTOPAN_KEY = '32-char-str-for-AES-key-and-pad.' Warning Be sure to use a strong key to protect your user IPs. Database username and password \u00b6 PYBOSSA uses the SQLAlchemy SQL toolkit to access the DB. In the settings file, you only need to modify the name of the user, password and database name, so it fits your needs in the field SQLALCHEMY_DATABASE_URI: SQLALCHEMY_DATABASE_URI = 'postgresql://username:userpassword@localhost/databasename' Load balancing SQL Queries \u00b6 If you have a master/slave PostgreSQL setup, you can instruct PYBOSSA to use the slave node for load balancing queries between the master and slave node. For enabling this mode, all you have to do is adding to the settings_local.py config file the following: SQLALCHEMY_BINDS = { 'slave' : 'postgresql://user:password@server/pybossadb' } It\u2019s dangerous, so better sign this \u00b6 PYBOSSA uses the It\u2019s dangerous Python library that allows you to send some data to untrusted environments but signing it. It uses a key that the server only knows and uses it for signing the data. This library is used to send the recovery password e-mails to your PYBOSSA users, posting a link with a signed key that will be verified by the server. Thus, it is vital that you create a secure and private key for it in your configuration file . To do it, just modify the ITSDANGEROUSKEY variable. CORS configuration \u00b6 By default, PYBOSSA has the API endpoints configured with Access-Control-Allow-Origin: *. However, you can change it to whatever you want via the config file. Take a look at the official documentation for Flask-CORS for all the available options. Fine tuning CORS \u00b6 You can fine tune the CORS of PYBOSSA: CORS_RESOURCES = { r \"/api/*\" : { \"origins\" : \"*\" , \"allow_headers\" : [ 'Content-Type' , 'Authorization' ], \"max_age\" : 21600 } } Note You can customize as much as you want CORS. Check the official documentation . Modifying the Brand name \u00b6 You can configure your project with a different name, instead of the default one: PYBOSSA. You only need to change the string BRAND to the name of your organization or project. Adding a Logo \u00b6 By default, PYBOSSA does not provide a logo for the server side, so you will have to copy your logo into the folder: pybossa/pybossa/static/img . If the logo name is, my_brand.png , the LOGO variable should be updated with the name of the file. Multiple languages \u00b6 By default PYBOSSA only speaks English. However, the default theme comes with a few translations (Spanish, French, Italian, Japanese, Greek and German). You can enable those translations (mostly user interface strings and actions) by doing the following: creating a symlink to the translations folders: $ cd pybossa && ln -s themes/default/translations This step will enable the default translations of PYBOSSA for your server. We recommend using these translations with the default theme. If you use your theme, the best thing is to do your translation, (see translating ), as you might want to name things differently on the templates. You can disable/enable different languages in your config file settings_local.py . For example, to remove French you can add this configuration to the settings file: LOCALES = [( 'en' , 'English' ), ( 'es' , u 'Espa\u00f1ol' ), ( 'it' , 'Italiano' ), ( 'ja' , u '\u65e5\u672c\u8a9e' )] Also, you can always specify a different default locale using the following snippet in the same settings file: DEFAULT_LOCALE = 'es' Note PYBOSSA tries first to match the user preferred language from their browser. This will work for anonymous users, while registered ones can specify the language they want using their user preferences. Note As an alternative way to allow anonymous users to force a different language, PYBOSSA looks for a cookie named language where it expects the key of any of the supported languages in the LOCALES list. You can use JavaScript to set it up. Creating a theme \u00b6 PYBOSSA supports themes. By default, it provides its theme that you can use, or if you prefer, you can adapt it to create yours. The default theme for PYBOSSA is available in the pybossa-default-theme repository . To create your theme, all you have to do is to fork the default theme to your account, and then start modifying it. A theme has a simple structure: info.json: this file includes some information about the author, license, and name. static: this folder has all the CSS, JavaScript, images, etc. In other words, the static content. templates: this folder has the templates for PYBOSSA. Therefore, if you want to change the look and feel (i.e., colors of the top bar) all you have to do is to modify the styles.css file of the static folder. Or if you prefer, create your own. However, if you want to modify the structure, let\u2019s say you want to change the order of the elements of the navigation bar: the first item should be the about link, then you will have to modify the files included in the templates folder. As you can see, you will be able to give a full personality to your own PYBOSSA server without problems. Using SASS and minifying JavaScript \u00b6 PYBOSSA supports SASS thanks to Flask-Assets. If you want to compile SASS or SCSS, just add to your theme static folder a new one named: sass. Then, you can request the compiled version from the templates like this: {% assets filters=\"libsass\", output=\"css/gen/yourcss.min.css\", \"sass/yourcss.scss\"%} < link rel = \"stylesheet\" type = \"text/css\" href = \"{{ ASSET_URL }}\" > {% endassets %} The same can be done for Javascript using the filter minjs: {% assets filters=\"jsmin\", output=\"gen/packed.js\", \"common/jquery.js\", \"site/base.js\", \"site/widgets.js\" %} < script type = \"text/javascript\" src = \"{{ ASSET_URL }}\" ></ script > {% endassets %} Results page \u00b6 PYBOSSA allows you to present a results page for your server. Add a file named results.html to the home directory in the templates folder, and you\u2019ll be able to show results about your project from one place: <http://server/results> Adding your Contact Information \u00b6 By default, PYBOSSA provides e-mail, and a Twitter handle to show some contact information. If you want, you can change it to your e-mail and Twitter account. You can do it, modifying the following variables in the settings_local.py file: CONTACT_EMAIL = '<your@email.com>' CONTACT_TWITTER = 'yourtwitterhandle' Terms of Use \u00b6 You can change and modify the TERMSOFUSE for your server, by overriding the provided URL that we use by default. You can also modify the license used for the data, just change the DATAUSE link to the open license that you want to use. Adding Help page \u00b6 By default, PYBOSSA provides a help endpoint where you can have your FAQ or similar information for your users. However, it\u2019s empty, as each project is unique. For adding that information, create in the theme folder: templates/help/ a file named index.html and write your information in there. This will render the information under http://youserver.com/help/ Note PYBOSSA has dropped support for Social Network logins. If you were using social logins in your project, please, before upgrading double-check that your social login users have added their emails. With their emails you can run the cli.py script to migrate the accounts to local ones. This will delete all their info regarding their social login IDs and make them local accounts. Then the users will be able to request a reset password and log in. Receiving e-mails with errors \u00b6 If you want to receive an e-mail when an error occurs in the PYBOSSA server (webhooks, background jobs, etc.), uncomment the ADMINS config variable and add a list of e-mails. Background jobs error notifications \u00b6 You can change the default behavior for receiving emails regarding failed background jobs. The two config variables are the following: FAILED_JOBS_MAILS = 7 FAILED_JOBS_RETRIES = 3 FAILED_JOBS_MAILS instructs the system to send you a reminder after seven days if you have not solved the issue with the background job. FAILED_JOBS_RETRIES instructs the system to retry the job N times. By default is 3. Enabling Logging \u00b6 PYBOSSA can log errors to a file or to a Sentry server. If none of the above configurations are used, you will get the errors in the log file of the web server that you are using (i.e., in nginx the errors will be in /var/log/nginx/error.log). Mail Setup \u00b6 PYBOSSA needs a mail server to validate new accounts, send e-mails for recovering passwords, etc. , so it is critical that you configure a server. Please, check the section Mail setup in the config file for setting it. Global Announcements for the users \u00b6 Sometimes you will need to send a message to all your users while they are browsing the server. For example, a scheduled shutdown for installing new hardware or a database migration. PYBOSSA provides a general solution for these announcements via the settings_local.py.tmpl configuration file. The announcement feature allows you to send messages to the following type of users: Authenticated users , basically all the registered users in the server. Admin users , all the users that are admins/root on the server. Project owners , all the users that have created one or more projects on the server. Therefore, let\u2019s say that you want to warn all your admins that a new configuration will be deployed in your system. In this case, all you have to do is to modify the ANNOUNCEMENT variable to display the message for the given type of users: ANNOUNCEMENT = { 'root' : 'Your secret message' } There is an example of the ANNOUNCEMENT variable in the settings_local.py.tmpl file, so you can quickly adapt it for your server. The announcement variable has a key and an associated message* . The supported keys are: admin : for admin users. user : for all the registered users (even admins). owner : for all registered users that have one or more projects. Note You can use a mix of messages at the same time without problems, so, for example, you can display a message for Admins and Owners at the same time. Disable email notifications \u00b6 When a PYBOSSA project publishes a blog post, users will get an email (and webpush notification if it is enabled) with the update. You can disable this behavior with the following flag: DISABLE_EMAIL_NOTIFICATIONS = True Cache \u00b6 By default PYBOSSA uses Redis to cache a lot of data in order to serve it as fast as possible. PYBOSSA comes with a default set of timeouts for different views that you can change or modify to your own taste. All you have to do is modify the following variables in your settings file: # Project cache APP_TIMEOUT = 15 * 60 REGISTERED_USERS_TIMEOUT = 15 * 60 ANON_USERS_TIMEOUT = 5 * 60 * 60 STATS_FRONTPAGE_TIMEOUT = 12 * 60 * 60 STATS_APP_TIMEOUT = 12 * 60 * 60 STATS_DRAFT_TIMEOUT = 24 * 60 * 60 N_APPS_PER_CATEGORY_TIMEOUT = 60 * 60 BROWSE_TASKS_TIMEOUT = 3 * 60 * 60 # Category cache CATEGORY_TIMEOUT = 24 * 60 * 60 # User cache USER_TIMEOUT = 15 * 60 USER_TOP_TIMEOUT = 24 * 60 * 60 USER_TOTAL_TIMEOUT = 24 * 60 * 60 Note Every value is in seconds, so bear in mind to multiply it by 60 to have minutes in the configuration values. Disabling the Cache \u00b6 If you want to disable the cache, you only have to export the following env variable: PYBOSSA_REDIS_CACHE_DISABLED = '1' Redis configuration \u00b6 You can configure how you connect to Redis via the following config variables. If you can\u2019t use Redis Sentinel, just set REDIS_SENTINEL to [] and use REDIS_HOST , REDIS_PORT and REDIS_PASSWORD instead to specify the connection details for a vanilla Redis server. Redis python prefix \u00b6 REDIS_KEYPREFIX = 'pybossa_cache' Redis Sentinel \u00b6 Specify where the Redis sentinel is listening. REDIS_SENTINEL = [( 'localhost' , 26379 )] Redis host \u00b6 Specify the host where the non-Sentinel Redis server is listening. This option, along with REDIS_PORT and REDIS_PASSWORD , will be ignored if REDIS_SENTINEL is set. REDIS_HOST = 'localhost' Redis port \u00b6 Specify the port where the non-Sentinel Redis server is listening. This option, along with REDIS_HOST and REDIS_PASSWORD , will be ignored if REDIS_SENTINEL is set. REDIS_PORT = 6379 Redis password \u00b6 Specify the password of the non-Sentinel Redis server. This option, along with REDIS_HOST and REDIS_PORT , will be ignored if REDIS_SENTINEL is set. REDIS_PASSWORD = '53cr37' Redis master \u00b6 Specify the name of the master node. REDIS_MASTER = 'mymaster' Redis DB \u00b6 Specify the DB. REDIS_DB = 0 Redis Socket timeout \u00b6 REDIS_SOCKET_TIMEOUT = 0.1 Redis retry on timeout \u00b6 REDIS_RETRY_ON_TIMEOUT = True Rate limit for the API \u00b6 By default, PYBOSSA limits the usage of the API with the following values: LIMIT = 300 PER = 15 * 60 Those values mean that when a user sends a request to an API endpoint, a window of 15 minutes is open, and during those 15 minutes the number of allowed requests to the same endpoint is 300. By adding these values to your settings_local.py file, you can adapt it to your own needs. Note Please, be sure about what you are doing by modifying these values. This is the recommended configuration, so do not change it unless you are sure. Configuring upload method \u00b6 PYBOSSA by default allows you to upload avatars for users, icons for projects, etc. using the local file system of your server. While this is nice for small setups, when you need to add more nodes to serve the same content, this feature could become a problem. For this reason, PYBOSSA also supports cloud solutions to save the files and serve them from there correctly. Local Uploader \u00b6 The local uploader is configured by default. We recommend having a separate folder for the assets, outside the pybossa folder. In any case, for enabling this method use the following the config settings: UPLOAD_METHOD = 'local' UPLOAD_FOLDER = '/absolute/path/to/your/folder/to/store/assets/' Rackspace Cloud Files \u00b6 PYBOSSA comes with support for Rackspace CloudFiles service, allowing you to grow the services horizontally. Supporting cloud-based system is as simple as having an account in Rackspace, and setting up the following config variables: UPLOAD_METHOD = 'rackspace' RACKSPACE_USERNAME = 'username' RACKSPACE_API_KEY = 'api_key' RACKSPACE_REGION = 'region' Once the server is started, it will authenticate against Rackspace and since that moment, your PYBOSSA server will save files in the cloud. Customizing the Layout and FrontPage text \u00b6 PYBOSSA allows you to override two items: - Front Page Text - Footer If you want to override those items, you have to create a folder named custom and place it in the template dir. Then for replacing: The Front Page Text : create a file named. front_page_text.html and write there some HTML. The Footer : create a file named _footer.html , and write some HTML. Tracking the server with Google Analytics \u00b6 PYBOSSA provides an easy way to integrate Google Analytics with your PYBOSSA server. To enable it you only have to create a file with the name: _ga.html in the pybossa/template folder with the Google Tracking code. PYBOSSA will be including your Google Analytics tracking code on every page since that moment. The file _ga.html should contain something like this: < script type = \"text/javascript\" > var _gaq = _gaq || []; _gaq . push ([ '_setAccount' , 'UA-XXXXXXXX-X' ]); _gaq . push ([ '_trackPageview' ]); ( function () { var ga = document . createElement ( 'script' ); ga . type = 'text/javascript' ; ga . async = true ; ga . src = ( 'https:' == document . location . protocol ? 'https://ssl' : 'http://www' ) + '.google-analytics.com/ga.js' ; var s = document . getElementsByTagName ( 'script' )[ 0 ]; s . parentNode . insertBefore ( ga , s ); })(); < /script> Adding a Search box: Google Custom Search \u00b6 PYBOSSA provides a simple way to search within the server pages: Google Custom Search. To enable it you will have to apply for a Google Custom Search API key and then follow the next steps: Copy the Google Custom Search script code Create a new file called _gcs.html in the templates folder Paste the previous snippet of code (be sure to delete the ; line from it. Copy the _gcs_form.html.template as _gcs_form.html and add your key in the input field cx (you will find a text like XXXXX:YYYY where you should paste your key). The _gcs.html file will have something like this: < script > ( function () { var cx = 'XXXXX:YYYY' ; var gcse = document . createElement ( 'script' ); gcse . type = 'text/javascript' ; gcse . async = true ; gcse . src = ( document . location . protocol == 'https:' ? 'https:' : 'http:' ) + '//www.google.com/cse/cse.js?cx=' + cx ; var s = document . getElementsByTagName ( 'script' )[ 0 ]; s . parentNode . insertBefore ( gcse , s ); })(); </ script > And the _gcs_form.html will be like this: < form class = \"navbar-form\" style = \"padding-top:20px;\" action = \"/search\" > < input type = \"hidden\" name = \"cx\" value = \"partner-pub-XXXXX:YYYYY\" /> < input type = \"hidden\" name = \"cof\" value = \"FORID:10\" /> < input type = \"hidden\" name = \"ie\" value = \"ISO-8859-1\" /> < div class = \"input-append\" > < input type = \"text\" name = \"q\" size = \"21\" class = \"input-small\" placeholder = \"Search\" /> < span class = \"add-on\" >< i class = \"icon-search\" style = \"color:black\" ></ i ></ span > </ div > </ form > After these steps, your site will be indexed by Google, and Google Custom Search will be working, providing for your users a search tool. Adding web maps for project statistics (deprecated since v2.9.5) \u00b6 Note PYBOSSA does not support this feature anymore since version v2.9.5 as now it anonymizes the IPs (following GDPR EU law), so these maps don\u2019t make sense anymore. For more info, check the GDPR section. PYBOSSA creates for each project a statistics page, where the creators of the project and the volunteers can check the top 5 anonymous and authenticated users, an estimation of time about when all the tasks will be completed, etc. One exciting feature of the statistics page is that it can generate a web map showing the location of the anonymous volunteers that have been participating in the project. By default, the maps are disabled, because you will need to download the GeoLiteCity DAT file database that will be used for generating the maps. GeoLite is a free geolocalisation database from MaxMind that they release under a Creative Commons Attribution-ShareAlike 3.0 Uported License . You can download the required file: GeoLite City from this page . Once you have downloaded the file, all you have to do is to uncompress it and place it in the folder dat of the pybossa root folder. After copying the file, all you have to do to start creating the maps is to restart the server. Using your Terms of Use \u00b6 PYBOSSA has a default Terms of Service page that you can customize it to fit your institutional needs. In the case that you do not want to use the default one, please, create a _tos.html file in the custom folder. You can re-use the template help/_tos.html and adapt it (it is located in the template/help folder. Using your Cookies Policy \u00b6 PYBOSSA has a default cookies policy page, but you can customize it to fit your institutional needs. In the case that you do not want to use the default one, please, create a _cookies_policy.html file in the custom folder. You can re-use the template help/_cookies_policy.html and adapt it (it is located in the template/help folder. Using your Privacy Policy \u00b6 PYBOSSA has a blank privacy policy page. We recommend you to add one, so your users know how you are using their data. To add it, just create a file named _privacy_policy.html file in the custom folder. Exporting data to a CKAN server \u00b6 CKAN is a powerful data management system that makes data accessible \u2013 by providing tools to streamline publishing, sharing, finding and using data. CKAN is aimed at data publishers (national and regional governments, companies and organizations) wanting to make their data open and available. PYBOSSA can export project\u2019s data to a CKAN server. To use this feature, you will need to add the following config variables to the settings_local.py file: # CKAN URL for API calls CKAN_NAME = \"Demo CKAN server\" CKAN_URL = \"http://demo.ckan.org\" } As CKAN is open source, you can install your own CKAN server and configure it to host the data generated by your PYBOSSA projects quite quickly, making it the data repository for your projects. Another alternative is to use the the Data hub service that it is a free CKAN service for hosting your data. Enforce Privacy mode \u00b6 Some projects sometimes need a way to protect their contributors due to their nature. In these cases, where privacy is critical, PYBOSSA allows you to lock all the public pages related to the users and statistics about the site and projects. Specifically, by enabling this mode, only administrators will be able to see the following pages: http://server/stats http://server/account/ http://server/account/user/ http://server/project/stats Anonymous and authenticated will see a warning message like this: Additionally, the footer and front page top users will be removed with links to all these pages. If your project needs this type of protection you can enable it by changing the following config variable in your settings_local.py file from: ENFORCE_PRIVACY = False To: ENFORCE_PRIVACY = True Note This feature is disabled by default. Making extra key/value pairs in info field public \u00b6 By default, PYBOSSA protects all the information the info field except for those values that are public like the URL of the image of the project, the container where that picture is stored and a few extra. While this will be more than enough for most projects, sometimes, a server will need to expose more information publicly via the info field for the User and Project Domain Objects. Imagine that you want to give badges to users. You can store that information in the User domain object, within the info field in a field named badges . While this will work, the API will hide all that information except for the owner. Thus, it will be impossible to show user\u2019s badges to anonymous people. With projects, it could be the same. You want to highlight some info to anyone, but hide everything else. As PYBOSSA hides everything by default, you can always turn on which other fields from the info field can be shown to anonymous users, making them public. Warning Be very careful. If you expose your private data via this field, it\u2019s your responsibility as this is disabled by default in PYBOSSA. If you want to make some key/values public, all you have to do is add them to the settings_local.py file the following config variables: PROJECT_INFO_PUBLIC_FIELDS = [ 'key1' , 'key2' ] USER_INFO_PUBLIC_FIELDS = [ 'badges' , 'key2' , ... ] CATEGORY_INFO_PUBLIC_FIELDS = [ 'key1' , 'key2' ] Add as many as you want/need. But please, be careful about which information you disclose. Adding custom project templates \u00b6 PYBOSSA supports different types of templates that you can offer for every project. By default, PYBOSSA comes with the following templates: Basic : the most basic template. It only has the necessary structure to develop your project. Image : this template is for image pattern recognition. Sound : similar to the image template, but for sound clips hosted on SoundCloud. Video : similar to the image template, but for video clips hosted on Vimeo or Youtube. Map : this template is for geocoding projects. PDF : this template is for transcribing documents. If you want to add your templates or remove one, just create in the settings_local.py file a variable named PRESENTERS and add remove the ones you want: PRESENTERS = [ \"basic\" , \"image\" , \"sound\" , \"video\" , \"map\" , \"pdf\" , \"yourtemplate\" ] yourtemplate should be a template that you have to save in the theme folder: /templates/projects/snippets/ with the same name. Check the other templates to use them as a base layer for your template. After adding the template, the server will start offering this new template to your users. In addition to the project templates themselves, you can add some test tasks for those projects so that the users can import them into their projects and start \u201cplaying\u201d with them or taking their format as a starting point to create their own. These tasks can be imported from Google Docs spreadsheets, and you can add them, remove them, or modify the URLs of the spreadsheets changing the value of the variable TEMPLATE_TASKS in settings_local.py: TEMPLATE_TASKS = { 'image' : \"<https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdHFEN29mZUF0czJWMUhIejF6dWZXdkE&usp=sharing>\" , 'sound' : \"<https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEczcWduOXRUb1JUc1VGMmJtc2xXaXc&usp=sharing>\" , 'video' : \"<https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZ2UGhxSTJjQl9YNVhfUVhGRUdoRWc&usp=sharing>\" , 'map' : \"<https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZnbjdwcnhKRVNlN1dGXy0tTnNWWXc&usp=sharing>\" , 'pdf' : \"<https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEVVamc0R0hrcjlGdXRaUXlqRXlJMEE&usp=sharing>\" } Setting an expiration time for project passwords \u00b6 PYBOSSA allows the owner of a project to set a password so that only people (both anonymous or authenticated) that know it can contribute. By entering this password, the user will have access to the project for a time specified by: PASSWD_COOKIE_TIMEOUT = 60 * 30 This variable is configured by default to 30 minutes. Validation of new user accounts \u00b6 Whenever a new user wants to sign up, PYBOSSA allows you to add some extra security steps to the process by asking the users to validate a real email account. However, if you don\u2019t need this feature, it can be disabled (as it is enabled by default) with this configuration parameter: ACCOUNT_CONFIRMATION_DISABLED = True Two-factor authentication on login \u00b6 If you need an extra layer of security for user authentication, PYBOSSA allows you to enable two-factor authentication by setting this configuration value: ENABLE_TWO_FACTOR_AUTH = True With this parameter set, after password verification users will receive a one-time code in their email, and will be redirected to a page where they can insert the code to complete the login process. Sending weekly email stats to project owners \u00b6 Project owners that have the pro-flag set to True can receive every week an update with the latest statistics about their projects in their email box. By default, this email is sent every Sunday. You can modify it in the settings file by changing it to another day: WEEKLY_UPDATE_STATS = 'Tuesday' Note For the moment the only way to toggle the pro-flag is via the database. It will be fixed in the future. Newsletters with Mailchimp \u00b6 PYBOSSA can show a subscription page to users when they create an account. By default is disabled. You can enable it, revealing a page to recently registered users, to check if they want to subscribe or not. To support newsletters, you\u2019ll have to create an account in Mailchimp and get an API_KEY as well as a LIST_ID to add the users. Once you have those two items you can enable the newsletter subscription adding them to your settings_local.py file: MAILCHIMP_API_KEY = \"your-key\" MAILCHIMP_LIST_ID = \"your-list-id\" Restart the server, and you will be done. Now in your MailChimp account, you will be able to create campaigns and communicate with your registered and interested users. Enabling the Dropbox Task importer \u00b6 PYBOSSA also offers the Dropbox importer, which allows importing all kind of files from a Dropbox account directly. To use it, you\u2019ll need to register your PYBOSSA server as a Dropbox app, as explained here . Don\u2019t worry about the Javascript snippet part; we\u2019ve already handled that for you. Instead, get the App key you will be given and add it to your settings_local.py: DROPBOX_APP_KEY = 'your-key' Enabling the Youtube\u2019s Task importer \u00b6 The Youtube\u2019s task importer needs a Youtube server key which you need to create in the Google API Console in YouTube Data API. Once you have an API key, you\u2019ll have to add it to your settings_local.py file: YOUTUBE_API_SERVER_KEY = \"your-key\" For more information on how to get a Youtube server key, please refer to the official documentation . Enabling Server-Sent Events \u00b6 Since PYBOSSA v1.1.0, PYBOSSA supports Server-Sent Events (SSE) in some views. This feature is powerful. However, it brings some issues with it: it needs to run PYBOSSA in asynchronous mode. As this is not a necessity, by default PYBOSSA has this feature disabled. PYBOSSA uses SSE to notify users about specific actions (i.e., the result of a webhook in real time). If you want to enable it, you will have to add to your settings_local.py: SSE = True Also, you will need to configure uwsgi and nginx to support SSE events. This is not trivial, as there are several different scenarios, libraries, and options, so instead of recommending one solution, we invite you to read the uwsgi documentation about it , so you can take a decision based on your infrastructure and preferences. Latest news from PYBOSSA \u00b6 Since v1.2.1 PYBOSSA gets the latest news of its new releases, as well as anything related to what Scifabric blogs about regarding the crowdsourcing world. You can add more items if you want, by just adding to your settings_local.py file new ATOM URLs: NEWS_URL = [ 'http:/http:///atomurl1' , 'http://atomurl2' , ... ] Enabling pro user features \u00b6 Since version v1.2.2 PYBOSSA, you can specify which features can be only available to pro users or everyone. To modify them, just locate them in the settings_local.py file. By default, they look like: PRO_FEATURES = { 'auditlog' : True , 'webhooks' : True , 'updated_exports' : True , 'notify_blog_updates' : True , 'project_weekly_report' : True , 'autoimporter' : True , 'better_stats' : True } By choosing \u201cTrue\u201d on each of them, you are making that specific feature available only to pro users. On the other hand, selecting \u201cFalse\u201d makes them available to regular users as well. Strict Slashes \u00b6 By default, PYBOSSA distinguishes between two types of URLs for its endpoints: with and without a trailing slash. In other words, if an endpoint is not declared within the code as accepting both options, accessing the same endpoint with a trailing slash will return a 404. For example, the about endpoint: 1 GET /about Will return the page, but with the default configuration it will return a 404 if you add a trailing slash to it: 1 GET /about/ To disable this behavior, enable the STRICT_SLASHES option and set it to False. That option will ensure that both endpoints work with and without the trailing slash. Forums \u00b6 PYBOSSA does not provide its own forum. However, you can use Disqus and integrate it in your PYBOSSA server. Background jobs timeout \u00b6 By default PYBOSSA timeout for every job is 10 minutes. In principle, it should be fine, but each project and server is unique, so if you start seeing too many jobs failing because the job timed out, then, increase the value using these config variables: MINUTE = 60 TIMEOUT = 20 * 60 Web Push notifications \u00b6 Note You need to have HTTPS enabled for your site. Otherwise, you will need to use a subdomain from onesignal.com to support this feature. If you cannot use HTTPS, we recommend to disable it. PYBOSSA can send web push notifications to Google Chrome, Mozilla Firefox and Safari browsers. For supporting this feature, PYBOSSA uses the Onesignal.com service. You will need an account and create an app for your PYBOSSA server. Then follow their documentation to download the WebPush SDK and configure your PYBOSSA theme. For more info regarding Onesignal, check their documentation. Note You can host the SDK files in the static folder of your theme. However, you will need to modify your web server (Apache or Nginx) to serve those files as from the root of your server. If this is not done correctly, it will not work. Once you have created the app in Onesignal, get the API KEY and APP ID. Then copy them and put it in your settings_local.py file: ONESIGNAL_APP_ID = 'app-id' ONESIGNAL_API_KEY = 'app-key' Restart the server, and add one background worker for the webpush queue. This queue will handle the creation of the apps, as well as sending the push notifications. Then you will need to update your PYBOSSA theme to allow your users to subscribe. As this could vary a lot from one project to another, we do not provide a template but some guidelines: Use the JS SDK to subscribe a user to a given project using the tags option of Onesignal. PYBOSSA sends notifications using those tags thanks to the filters option that allows us to segment traffic. PYBOSSA is expecting the project.id as the tag key for segmenting. The JS SDK allows you to subscribe/unsubscribe a user to a given project (not only the whole server) with unique methods for adding tags and deleting them. This works independently if the user is authenticated or not. For more info regarding Onesignal JS SDK, check their documentation. Ignore specific keys when exporting data in CSV format \u00b6 Sometimes your PYBOSSA project saves information like GeoJSON within the tasks or task_runs. This is a bad thing for the exporter, as it will try to flatten it. In such scenarios, you want to instruct PYBOSSA to ignore those keys, as they will be included in the JSON export files, and reduce all the overhead (as well as destroying the format due to the normalization). For ignoring a key (or a list of keys), just add the following config variable to your settings_local.py file: IGNORE_FLAT_KEYS = [ 'geojson' , 'key1' , ... ] Specify a new root key instead of info for CSV exporter \u00b6 Sometimes you need to change the root key for the CSV exporter. This usually happens, when you have to store one ore more answers within the same info object. For this reason, you can instruct PYBOSSA to use that key instead of info for flattening the data: TASK_CSV_EXPORT_INFO_KEY = 'key' TASK_RUN_CSV_EXPORT_INFO_KEY = 'key2' RESULT_CSV_EXPORT_INFO_KEY = 'key3' In this way, if key, key2 or key3 have an array or list of dictionaries, PYBOSSA will iterate over them, flat them, and then generate the CSV for you. Disable task presenter check for pure JavaScript apps \u00b6 When you are using PYBOSSA native JSON support, you will not be building your project presenter within the PYBOSSA structure, but within the JS framework of your choice. In such a case, you would like to disable the check for the task_presenter when publishing a project. If you need this, just add this flag to your settings_local.py file: DISABLE_TASK_PRESENTER = True Consent field for users \u00b6 Sometimes you will need the users to click on a checkbox before creating an account to get the agreement for sending them email notifications or of any other type. By default, PYBOSSA provides this flag, and it\u2019s set to False. Change in the theme (or your frontend) the label of the field to whatever you prefer: Terms of Service, Communications, etc. so you will be able to keep track of who has accepted/declined to get notifications from you. Custom Leaderboards \u00b6 By default, PYBOSSA provides a unique leaderboard. This leaderboard is based on the number of task runs that a user has submitted. However, you may want more flexibility. For this reason, you can use use the \u201cuser\u201d.info field to store any other \u201cbadges\u201d or values that you want to score your users. If your users have identified very complicated stuff, and you want to give points to them based on that, just use the info field and instruct PYBOSSA to create a leaderboard for you. Note It is essential that this key, projectsvalue pair is computed by you. You can use the API to update these values, so this will not be handled by PYBOSSA but by yourself. Imagine the score is named: foo, then, PYBOSSA will create for you a leaderboard using that key like this: edit the settings_local.py file and add the following config variable: LEADERBOARDS = [ 'foo' ] Then, you can access the specific leaderboard using the endpoint: /leaderboard/?info=foo As simple as that. Note This feature relies on background jobs. Be sure that you are running them. Default number of users for the leaderboard \u00b6 You can specify the default number of users shown in the leaderboard. By default we show the top 20 users. LEADERBOARD = 20 Unpublish inactive projects \u00b6 PYBOSSA by default unpublishes projects that have not been active in the last three months. You can disable this feature by changing this config variable in your settings_local.py file: UNPUBLISH_PROJECTS = False LDAP integration \u00b6 PYBOSSA can use LDAP for authenticating users. You will need to add a few config variables to the settings_local.py file to make it work. PYBOSSA supports LDAP and OpenLDAP protocols, so you should be able to use any of them. Note By enabling PYBOSSA LDAP integration, all other means for creating accounts and sign in will be disabled. LDAP_HOST \u00b6 This variable should have the IP or domain name of your LDAP server. LDAP_BASE_DN \u00b6 This is the LDAP Base DN for your organization. LDAP_USERNAME \u00b6 This variable should have the admin account so that PYBOSSA can access the LDAP server and search for users. LDAP_PASSWORD \u00b6 The admin account password. LDAP_OBJECTS_DN \u00b6 The DN. LDAP_OPENLDAP \u00b6 Set it to True if you are using it. LDAP_USER_OBJECT_FILTER \u00b6 This is important. The filter that you write in here needs to be adapted to your institution, otherwise, it will not work when authenticating and validating your users. Don\u2019t use the default configuration in the settings template. You will need to adapt it to your needs. LDAP_USER_FILTER_FIELD \u00b6 If you use a different field in the previous configuration, update the LDAP_USER_FILTER_FIELD. It\u2019s important to reflect which key are you using within your LDAP server to identify your users uniquely. LDAP_PYBOSSA_FIELDS \u00b6 Use this configuration variable to match/link PYBOSSA fields to LDAP fields. Uploading files to PYBOSSA \u00b6 PYBOSSA has a generic uploader that will check for valid extensions, avoiding for example that a user could upload a video, as only images are allowed. ALLOWED_EXTENSIONS \u00b6 Use this configuration variable, to specify which types of files will you allow in your server to be uploaded via the API. By default, the following extensions are enabled: ALLOWED_EXTENSIONS = [ 'js' , 'css' , 'png' , 'jpg' , 'jpeg' , 'gif' , 'zip' ] SPAM protection \u00b6 You can blacklist disposable email accounts by listing them in the SPAM config. Just add them like this: SPAM = [ 'spam.com' , 'fake.es' ] Failed Jobs \u00b6 Sometimes background jobs fail. For example, an email is rejected. By default PYBOSSA retries 3 times, before marking them as failed. You can customize it. FAILED_JOBS_RETRIES = 3 Fulltext search language \u00b6 PYBOSSA uses PostgreSQL fulltex search support. Thus, you can instruct PYBOSSA to use only a given language to do it properly: FULLTEXTSEARCH_LANGUAGE = 'english' Absolute links to Avatars \u00b6 If you are building a Single Page Application or a Universal App, you will need to get absolute paths to the avatars. Use the following config: AVATAR_ABSOLUTE = True Delete inactive accounts \u00b6 PYBOSSA will delete inactive accounts after a period of time. For this purpose, PYBOSSA uses two different background jobs, one for warning users about the action, and another one to delete them. The warning job is run on a monthly basis, while the deletion is done on a bi-monthly basis. You can customize the the time period that you consider to warn users as well as to delete them. For these purposes you can use the following two variables: USER_INACTIVE_NOTIFICATION = 5 USER_DELETE_AFTER_NOTIFICATION = '1 month' Thus, after 5 months of not contributing a single task run, the user will get an email warning her about the deletion. Then, the next month if the user has not sent a task run, the account will be deleted. For deleting the accounts, PYBOSSA uses the the same method as if the user requested it herself. The action anonymizes the user\u2019s contributions, and deletes all her personal data. Note PYBOSSA will not delete users with the restrict flag set to true (to respect GDPR) as well as if they have projects.","title":"Configuring PYBOSSA"},{"location":"installation/configuration/#configuring-pybossa","text":"The PYBOSSA settings_local.py.tmpl file has all the available configuration options for your server. This section, explains each of them and how you should/could use them on your server.","title":"Configuring PYBOSSA"},{"location":"installation/configuration/#official-support","text":"If you need help configuring your PYBOSSA server, contact us . We offer official support and we would love to work with your PYBOSSA server.","title":"Official support"},{"location":"installation/configuration/#debug-mode","text":"The DEBUG mode is disabled by default in the configuration file, as this should be only used when you are running the server for development purposes. You should not enable this option unless you need to do some debugging in the PYBOSSA server.","title":"Debug mode"},{"location":"installation/configuration/#debug-toolbar","text":"PYBOSSA includes a flag to enable a debug toolbar that can give you more insights about the performance of PYBOSSA. We strongly recommend keeping the toolbar disabled in production environments, as it will slow down considerably all the execution of the code. However, if you are testing the server, feel free to enable it adding the following variable to the settings file: ENABLE_DEBUG_TOOLBAR = True","title":"Debug Toolbar"},{"location":"installation/configuration/#profiling","text":"PYBOSSA installs Flask-Profiler , an extension that allows you to know which endpoints are being called, and how much time it takes for them to process each request. You can enable it by setting this config variable in the settings_local.py file: FLASK_PROFILER = { \"enabled\" : True , \"storage\" : { \"engine\" : \"sqlite\" }, \"basicAuth\" :{ \"enabled\" : True , \"username\" : \"admin\" , \"password\" : \"admin\" }, \"ignore\" : [ \"^/static/.*\" ] } Now you can access the profiling page: http://server/flask-profiler/ . Warning Be sure to use a strong password to protect this view as well as HTTPS.","title":"Profiling"},{"location":"installation/configuration/#host-and-port","text":"The HOST and PORT config variables can be used to force the server to listen on specific addresses of your server, as well as at a given port. Usually, you will only need to uncomment the HOST variable to listen on all the network interfaces.","title":"Host and Port"},{"location":"installation/configuration/#securing-the-server","text":"PYBOSSA uses the Flask Sessions feature that signs the cookies cryptographically for storing information. This improves the security of the server, as the user could look at the contents of the cookie but not modify it, unless they know the SECRET and SECRET_KEY . Therefore, it is essential that you create a new SECRET and SECRET_KEY keys for your server and keep them private . Please, check the Flask Sessions documentation for instructions on how to create proper secret keys.","title":"Securing the server"},{"location":"installation/configuration/#ensuring-anonymous-ips","text":"PYBOSSA uses CryptoPAn to anoymize the user\u2019s IPs when they participate as anonymous users. This is a feature that\u2019s mandatory, and you will have to create a KEY for it, specially this one: CRYPTOPAN_KEY = '32-char-str-for-AES-key-and-pad.' Warning Be sure to use a strong key to protect your user IPs.","title":"Ensuring Anonymous IPs"},{"location":"installation/configuration/#database-username-and-password","text":"PYBOSSA uses the SQLAlchemy SQL toolkit to access the DB. In the settings file, you only need to modify the name of the user, password and database name, so it fits your needs in the field SQLALCHEMY_DATABASE_URI: SQLALCHEMY_DATABASE_URI = 'postgresql://username:userpassword@localhost/databasename'","title":"Database username and password"},{"location":"installation/configuration/#load-balancing-sql-queries","text":"If you have a master/slave PostgreSQL setup, you can instruct PYBOSSA to use the slave node for load balancing queries between the master and slave node. For enabling this mode, all you have to do is adding to the settings_local.py config file the following: SQLALCHEMY_BINDS = { 'slave' : 'postgresql://user:password@server/pybossadb' }","title":"Load balancing SQL Queries"},{"location":"installation/configuration/#its-dangerous-so-better-sign-this","text":"PYBOSSA uses the It\u2019s dangerous Python library that allows you to send some data to untrusted environments but signing it. It uses a key that the server only knows and uses it for signing the data. This library is used to send the recovery password e-mails to your PYBOSSA users, posting a link with a signed key that will be verified by the server. Thus, it is vital that you create a secure and private key for it in your configuration file . To do it, just modify the ITSDANGEROUSKEY variable.","title":"It's dangerous, so better sign this"},{"location":"installation/configuration/#cors-configuration","text":"By default, PYBOSSA has the API endpoints configured with Access-Control-Allow-Origin: *. However, you can change it to whatever you want via the config file. Take a look at the official documentation for Flask-CORS for all the available options.","title":"CORS configuration"},{"location":"installation/configuration/#fine-tuning-cors","text":"You can fine tune the CORS of PYBOSSA: CORS_RESOURCES = { r \"/api/*\" : { \"origins\" : \"*\" , \"allow_headers\" : [ 'Content-Type' , 'Authorization' ], \"max_age\" : 21600 } } Note You can customize as much as you want CORS. Check the official documentation .","title":"Fine tuning CORS"},{"location":"installation/configuration/#modifying-the-brand-name","text":"You can configure your project with a different name, instead of the default one: PYBOSSA. You only need to change the string BRAND to the name of your organization or project.","title":"Modifying the Brand name"},{"location":"installation/configuration/#adding-a-logo","text":"By default, PYBOSSA does not provide a logo for the server side, so you will have to copy your logo into the folder: pybossa/pybossa/static/img . If the logo name is, my_brand.png , the LOGO variable should be updated with the name of the file.","title":"Adding a Logo"},{"location":"installation/configuration/#multiple-languages","text":"By default PYBOSSA only speaks English. However, the default theme comes with a few translations (Spanish, French, Italian, Japanese, Greek and German). You can enable those translations (mostly user interface strings and actions) by doing the following: creating a symlink to the translations folders: $ cd pybossa && ln -s themes/default/translations This step will enable the default translations of PYBOSSA for your server. We recommend using these translations with the default theme. If you use your theme, the best thing is to do your translation, (see translating ), as you might want to name things differently on the templates. You can disable/enable different languages in your config file settings_local.py . For example, to remove French you can add this configuration to the settings file: LOCALES = [( 'en' , 'English' ), ( 'es' , u 'Espa\u00f1ol' ), ( 'it' , 'Italiano' ), ( 'ja' , u '\u65e5\u672c\u8a9e' )] Also, you can always specify a different default locale using the following snippet in the same settings file: DEFAULT_LOCALE = 'es' Note PYBOSSA tries first to match the user preferred language from their browser. This will work for anonymous users, while registered ones can specify the language they want using their user preferences. Note As an alternative way to allow anonymous users to force a different language, PYBOSSA looks for a cookie named language where it expects the key of any of the supported languages in the LOCALES list. You can use JavaScript to set it up.","title":"Multiple languages"},{"location":"installation/configuration/#creating-a-theme","text":"PYBOSSA supports themes. By default, it provides its theme that you can use, or if you prefer, you can adapt it to create yours. The default theme for PYBOSSA is available in the pybossa-default-theme repository . To create your theme, all you have to do is to fork the default theme to your account, and then start modifying it. A theme has a simple structure: info.json: this file includes some information about the author, license, and name. static: this folder has all the CSS, JavaScript, images, etc. In other words, the static content. templates: this folder has the templates for PYBOSSA. Therefore, if you want to change the look and feel (i.e., colors of the top bar) all you have to do is to modify the styles.css file of the static folder. Or if you prefer, create your own. However, if you want to modify the structure, let\u2019s say you want to change the order of the elements of the navigation bar: the first item should be the about link, then you will have to modify the files included in the templates folder. As you can see, you will be able to give a full personality to your own PYBOSSA server without problems.","title":"Creating a theme"},{"location":"installation/configuration/#using-sass-and-minifying-javascript","text":"PYBOSSA supports SASS thanks to Flask-Assets. If you want to compile SASS or SCSS, just add to your theme static folder a new one named: sass. Then, you can request the compiled version from the templates like this: {% assets filters=\"libsass\", output=\"css/gen/yourcss.min.css\", \"sass/yourcss.scss\"%} < link rel = \"stylesheet\" type = \"text/css\" href = \"{{ ASSET_URL }}\" > {% endassets %} The same can be done for Javascript using the filter minjs: {% assets filters=\"jsmin\", output=\"gen/packed.js\", \"common/jquery.js\", \"site/base.js\", \"site/widgets.js\" %} < script type = \"text/javascript\" src = \"{{ ASSET_URL }}\" ></ script > {% endassets %}","title":"Using SASS and minifying JavaScript"},{"location":"installation/configuration/#results-page","text":"PYBOSSA allows you to present a results page for your server. Add a file named results.html to the home directory in the templates folder, and you\u2019ll be able to show results about your project from one place: <http://server/results>","title":"Results page"},{"location":"installation/configuration/#adding-your-contact-information","text":"By default, PYBOSSA provides e-mail, and a Twitter handle to show some contact information. If you want, you can change it to your e-mail and Twitter account. You can do it, modifying the following variables in the settings_local.py file: CONTACT_EMAIL = '<your@email.com>' CONTACT_TWITTER = 'yourtwitterhandle'","title":"Adding your Contact Information"},{"location":"installation/configuration/#terms-of-use","text":"You can change and modify the TERMSOFUSE for your server, by overriding the provided URL that we use by default. You can also modify the license used for the data, just change the DATAUSE link to the open license that you want to use.","title":"Terms of Use"},{"location":"installation/configuration/#adding-help-page","text":"By default, PYBOSSA provides a help endpoint where you can have your FAQ or similar information for your users. However, it\u2019s empty, as each project is unique. For adding that information, create in the theme folder: templates/help/ a file named index.html and write your information in there. This will render the information under http://youserver.com/help/ Note PYBOSSA has dropped support for Social Network logins. If you were using social logins in your project, please, before upgrading double-check that your social login users have added their emails. With their emails you can run the cli.py script to migrate the accounts to local ones. This will delete all their info regarding their social login IDs and make them local accounts. Then the users will be able to request a reset password and log in.","title":"Adding Help page"},{"location":"installation/configuration/#receiving-e-mails-with-errors","text":"If you want to receive an e-mail when an error occurs in the PYBOSSA server (webhooks, background jobs, etc.), uncomment the ADMINS config variable and add a list of e-mails.","title":"Receiving e-mails with errors"},{"location":"installation/configuration/#background-jobs-error-notifications","text":"You can change the default behavior for receiving emails regarding failed background jobs. The two config variables are the following: FAILED_JOBS_MAILS = 7 FAILED_JOBS_RETRIES = 3 FAILED_JOBS_MAILS instructs the system to send you a reminder after seven days if you have not solved the issue with the background job. FAILED_JOBS_RETRIES instructs the system to retry the job N times. By default is 3.","title":"Background jobs error notifications"},{"location":"installation/configuration/#enabling-logging","text":"PYBOSSA can log errors to a file or to a Sentry server. If none of the above configurations are used, you will get the errors in the log file of the web server that you are using (i.e., in nginx the errors will be in /var/log/nginx/error.log).","title":"Enabling Logging"},{"location":"installation/configuration/#mail-setup","text":"PYBOSSA needs a mail server to validate new accounts, send e-mails for recovering passwords, etc. , so it is critical that you configure a server. Please, check the section Mail setup in the config file for setting it.","title":"Mail Setup"},{"location":"installation/configuration/#global-announcements-for-the-users","text":"Sometimes you will need to send a message to all your users while they are browsing the server. For example, a scheduled shutdown for installing new hardware or a database migration. PYBOSSA provides a general solution for these announcements via the settings_local.py.tmpl configuration file. The announcement feature allows you to send messages to the following type of users: Authenticated users , basically all the registered users in the server. Admin users , all the users that are admins/root on the server. Project owners , all the users that have created one or more projects on the server. Therefore, let\u2019s say that you want to warn all your admins that a new configuration will be deployed in your system. In this case, all you have to do is to modify the ANNOUNCEMENT variable to display the message for the given type of users: ANNOUNCEMENT = { 'root' : 'Your secret message' } There is an example of the ANNOUNCEMENT variable in the settings_local.py.tmpl file, so you can quickly adapt it for your server. The announcement variable has a key and an associated message* . The supported keys are: admin : for admin users. user : for all the registered users (even admins). owner : for all registered users that have one or more projects. Note You can use a mix of messages at the same time without problems, so, for example, you can display a message for Admins and Owners at the same time.","title":"Global Announcements for the users"},{"location":"installation/configuration/#disable-email-notifications","text":"When a PYBOSSA project publishes a blog post, users will get an email (and webpush notification if it is enabled) with the update. You can disable this behavior with the following flag: DISABLE_EMAIL_NOTIFICATIONS = True","title":"Disable email notifications"},{"location":"installation/configuration/#cache","text":"By default PYBOSSA uses Redis to cache a lot of data in order to serve it as fast as possible. PYBOSSA comes with a default set of timeouts for different views that you can change or modify to your own taste. All you have to do is modify the following variables in your settings file: # Project cache APP_TIMEOUT = 15 * 60 REGISTERED_USERS_TIMEOUT = 15 * 60 ANON_USERS_TIMEOUT = 5 * 60 * 60 STATS_FRONTPAGE_TIMEOUT = 12 * 60 * 60 STATS_APP_TIMEOUT = 12 * 60 * 60 STATS_DRAFT_TIMEOUT = 24 * 60 * 60 N_APPS_PER_CATEGORY_TIMEOUT = 60 * 60 BROWSE_TASKS_TIMEOUT = 3 * 60 * 60 # Category cache CATEGORY_TIMEOUT = 24 * 60 * 60 # User cache USER_TIMEOUT = 15 * 60 USER_TOP_TIMEOUT = 24 * 60 * 60 USER_TOTAL_TIMEOUT = 24 * 60 * 60 Note Every value is in seconds, so bear in mind to multiply it by 60 to have minutes in the configuration values.","title":"Cache"},{"location":"installation/configuration/#disabling-the-cache","text":"If you want to disable the cache, you only have to export the following env variable: PYBOSSA_REDIS_CACHE_DISABLED = '1'","title":"Disabling the Cache"},{"location":"installation/configuration/#redis-configuration","text":"You can configure how you connect to Redis via the following config variables. If you can\u2019t use Redis Sentinel, just set REDIS_SENTINEL to [] and use REDIS_HOST , REDIS_PORT and REDIS_PASSWORD instead to specify the connection details for a vanilla Redis server.","title":"Redis configuration"},{"location":"installation/configuration/#redis-python-prefix","text":"REDIS_KEYPREFIX = 'pybossa_cache'","title":"Redis python prefix"},{"location":"installation/configuration/#redis-sentinel","text":"Specify where the Redis sentinel is listening. REDIS_SENTINEL = [( 'localhost' , 26379 )]","title":"Redis Sentinel"},{"location":"installation/configuration/#redis-host","text":"Specify the host where the non-Sentinel Redis server is listening. This option, along with REDIS_PORT and REDIS_PASSWORD , will be ignored if REDIS_SENTINEL is set. REDIS_HOST = 'localhost'","title":"Redis host"},{"location":"installation/configuration/#redis-port","text":"Specify the port where the non-Sentinel Redis server is listening. This option, along with REDIS_HOST and REDIS_PASSWORD , will be ignored if REDIS_SENTINEL is set. REDIS_PORT = 6379","title":"Redis port"},{"location":"installation/configuration/#redis-password","text":"Specify the password of the non-Sentinel Redis server. This option, along with REDIS_HOST and REDIS_PORT , will be ignored if REDIS_SENTINEL is set. REDIS_PASSWORD = '53cr37'","title":"Redis password"},{"location":"installation/configuration/#redis-master","text":"Specify the name of the master node. REDIS_MASTER = 'mymaster'","title":"Redis master"},{"location":"installation/configuration/#redis-db","text":"Specify the DB. REDIS_DB = 0","title":"Redis DB"},{"location":"installation/configuration/#redis-socket-timeout","text":"REDIS_SOCKET_TIMEOUT = 0.1","title":"Redis Socket timeout"},{"location":"installation/configuration/#redis-retry-on-timeout","text":"REDIS_RETRY_ON_TIMEOUT = True","title":"Redis retry on timeout"},{"location":"installation/configuration/#rate-limit-for-the-api","text":"By default, PYBOSSA limits the usage of the API with the following values: LIMIT = 300 PER = 15 * 60 Those values mean that when a user sends a request to an API endpoint, a window of 15 minutes is open, and during those 15 minutes the number of allowed requests to the same endpoint is 300. By adding these values to your settings_local.py file, you can adapt it to your own needs. Note Please, be sure about what you are doing by modifying these values. This is the recommended configuration, so do not change it unless you are sure.","title":"Rate limit for the API"},{"location":"installation/configuration/#configuring-upload-method","text":"PYBOSSA by default allows you to upload avatars for users, icons for projects, etc. using the local file system of your server. While this is nice for small setups, when you need to add more nodes to serve the same content, this feature could become a problem. For this reason, PYBOSSA also supports cloud solutions to save the files and serve them from there correctly.","title":"Configuring upload method"},{"location":"installation/configuration/#local-uploader","text":"The local uploader is configured by default. We recommend having a separate folder for the assets, outside the pybossa folder. In any case, for enabling this method use the following the config settings: UPLOAD_METHOD = 'local' UPLOAD_FOLDER = '/absolute/path/to/your/folder/to/store/assets/'","title":"Local Uploader"},{"location":"installation/configuration/#rackspace-cloud-files","text":"PYBOSSA comes with support for Rackspace CloudFiles service, allowing you to grow the services horizontally. Supporting cloud-based system is as simple as having an account in Rackspace, and setting up the following config variables: UPLOAD_METHOD = 'rackspace' RACKSPACE_USERNAME = 'username' RACKSPACE_API_KEY = 'api_key' RACKSPACE_REGION = 'region' Once the server is started, it will authenticate against Rackspace and since that moment, your PYBOSSA server will save files in the cloud.","title":"Rackspace Cloud Files"},{"location":"installation/configuration/#customizing-the-layout-and-frontpage-text","text":"PYBOSSA allows you to override two items: - Front Page Text - Footer If you want to override those items, you have to create a folder named custom and place it in the template dir. Then for replacing: The Front Page Text : create a file named. front_page_text.html and write there some HTML. The Footer : create a file named _footer.html , and write some HTML.","title":"Customizing the Layout and FrontPage text"},{"location":"installation/configuration/#tracking-the-server-with-google-analytics","text":"PYBOSSA provides an easy way to integrate Google Analytics with your PYBOSSA server. To enable it you only have to create a file with the name: _ga.html in the pybossa/template folder with the Google Tracking code. PYBOSSA will be including your Google Analytics tracking code on every page since that moment. The file _ga.html should contain something like this: < script type = \"text/javascript\" > var _gaq = _gaq || []; _gaq . push ([ '_setAccount' , 'UA-XXXXXXXX-X' ]); _gaq . push ([ '_trackPageview' ]); ( function () { var ga = document . createElement ( 'script' ); ga . type = 'text/javascript' ; ga . async = true ; ga . src = ( 'https:' == document . location . protocol ? 'https://ssl' : 'http://www' ) + '.google-analytics.com/ga.js' ; var s = document . getElementsByTagName ( 'script' )[ 0 ]; s . parentNode . insertBefore ( ga , s ); })(); < /script>","title":"Tracking the server with Google Analytics"},{"location":"installation/configuration/#adding-a-search-box-google-custom-search","text":"PYBOSSA provides a simple way to search within the server pages: Google Custom Search. To enable it you will have to apply for a Google Custom Search API key and then follow the next steps: Copy the Google Custom Search script code Create a new file called _gcs.html in the templates folder Paste the previous snippet of code (be sure to delete the ; line from it. Copy the _gcs_form.html.template as _gcs_form.html and add your key in the input field cx (you will find a text like XXXXX:YYYY where you should paste your key). The _gcs.html file will have something like this: < script > ( function () { var cx = 'XXXXX:YYYY' ; var gcse = document . createElement ( 'script' ); gcse . type = 'text/javascript' ; gcse . async = true ; gcse . src = ( document . location . protocol == 'https:' ? 'https:' : 'http:' ) + '//www.google.com/cse/cse.js?cx=' + cx ; var s = document . getElementsByTagName ( 'script' )[ 0 ]; s . parentNode . insertBefore ( gcse , s ); })(); </ script > And the _gcs_form.html will be like this: < form class = \"navbar-form\" style = \"padding-top:20px;\" action = \"/search\" > < input type = \"hidden\" name = \"cx\" value = \"partner-pub-XXXXX:YYYYY\" /> < input type = \"hidden\" name = \"cof\" value = \"FORID:10\" /> < input type = \"hidden\" name = \"ie\" value = \"ISO-8859-1\" /> < div class = \"input-append\" > < input type = \"text\" name = \"q\" size = \"21\" class = \"input-small\" placeholder = \"Search\" /> < span class = \"add-on\" >< i class = \"icon-search\" style = \"color:black\" ></ i ></ span > </ div > </ form > After these steps, your site will be indexed by Google, and Google Custom Search will be working, providing for your users a search tool.","title":"Adding a Search box: Google Custom Search"},{"location":"installation/configuration/#adding-web-maps-for-project-statistics-deprecated-since-v295","text":"Note PYBOSSA does not support this feature anymore since version v2.9.5 as now it anonymizes the IPs (following GDPR EU law), so these maps don\u2019t make sense anymore. For more info, check the GDPR section. PYBOSSA creates for each project a statistics page, where the creators of the project and the volunteers can check the top 5 anonymous and authenticated users, an estimation of time about when all the tasks will be completed, etc. One exciting feature of the statistics page is that it can generate a web map showing the location of the anonymous volunteers that have been participating in the project. By default, the maps are disabled, because you will need to download the GeoLiteCity DAT file database that will be used for generating the maps. GeoLite is a free geolocalisation database from MaxMind that they release under a Creative Commons Attribution-ShareAlike 3.0 Uported License . You can download the required file: GeoLite City from this page . Once you have downloaded the file, all you have to do is to uncompress it and place it in the folder dat of the pybossa root folder. After copying the file, all you have to do to start creating the maps is to restart the server.","title":"Adding web maps for project statistics (deprecated since v2.9.5)"},{"location":"installation/configuration/#using-your-terms-of-use","text":"PYBOSSA has a default Terms of Service page that you can customize it to fit your institutional needs. In the case that you do not want to use the default one, please, create a _tos.html file in the custom folder. You can re-use the template help/_tos.html and adapt it (it is located in the template/help folder.","title":"Using your Terms of Use"},{"location":"installation/configuration/#using-your-cookies-policy","text":"PYBOSSA has a default cookies policy page, but you can customize it to fit your institutional needs. In the case that you do not want to use the default one, please, create a _cookies_policy.html file in the custom folder. You can re-use the template help/_cookies_policy.html and adapt it (it is located in the template/help folder.","title":"Using your Cookies Policy"},{"location":"installation/configuration/#using-your-privacy-policy","text":"PYBOSSA has a blank privacy policy page. We recommend you to add one, so your users know how you are using their data. To add it, just create a file named _privacy_policy.html file in the custom folder.","title":"Using your Privacy Policy"},{"location":"installation/configuration/#exporting-data-to-a-ckan-server","text":"CKAN is a powerful data management system that makes data accessible \u2013 by providing tools to streamline publishing, sharing, finding and using data. CKAN is aimed at data publishers (national and regional governments, companies and organizations) wanting to make their data open and available. PYBOSSA can export project\u2019s data to a CKAN server. To use this feature, you will need to add the following config variables to the settings_local.py file: # CKAN URL for API calls CKAN_NAME = \"Demo CKAN server\" CKAN_URL = \"http://demo.ckan.org\" } As CKAN is open source, you can install your own CKAN server and configure it to host the data generated by your PYBOSSA projects quite quickly, making it the data repository for your projects. Another alternative is to use the the Data hub service that it is a free CKAN service for hosting your data.","title":"Exporting data to a CKAN server"},{"location":"installation/configuration/#enforce-privacy-mode","text":"Some projects sometimes need a way to protect their contributors due to their nature. In these cases, where privacy is critical, PYBOSSA allows you to lock all the public pages related to the users and statistics about the site and projects. Specifically, by enabling this mode, only administrators will be able to see the following pages: http://server/stats http://server/account/ http://server/account/user/ http://server/project/stats Anonymous and authenticated will see a warning message like this: Additionally, the footer and front page top users will be removed with links to all these pages. If your project needs this type of protection you can enable it by changing the following config variable in your settings_local.py file from: ENFORCE_PRIVACY = False To: ENFORCE_PRIVACY = True Note This feature is disabled by default.","title":"Enforce Privacy mode"},{"location":"installation/configuration/#making-extra-keyvalue-pairs-in-info-field-public","text":"By default, PYBOSSA protects all the information the info field except for those values that are public like the URL of the image of the project, the container where that picture is stored and a few extra. While this will be more than enough for most projects, sometimes, a server will need to expose more information publicly via the info field for the User and Project Domain Objects. Imagine that you want to give badges to users. You can store that information in the User domain object, within the info field in a field named badges . While this will work, the API will hide all that information except for the owner. Thus, it will be impossible to show user\u2019s badges to anonymous people. With projects, it could be the same. You want to highlight some info to anyone, but hide everything else. As PYBOSSA hides everything by default, you can always turn on which other fields from the info field can be shown to anonymous users, making them public. Warning Be very careful. If you expose your private data via this field, it\u2019s your responsibility as this is disabled by default in PYBOSSA. If you want to make some key/values public, all you have to do is add them to the settings_local.py file the following config variables: PROJECT_INFO_PUBLIC_FIELDS = [ 'key1' , 'key2' ] USER_INFO_PUBLIC_FIELDS = [ 'badges' , 'key2' , ... ] CATEGORY_INFO_PUBLIC_FIELDS = [ 'key1' , 'key2' ] Add as many as you want/need. But please, be careful about which information you disclose.","title":"Making extra key/value pairs in info field public"},{"location":"installation/configuration/#adding-custom-project-templates","text":"PYBOSSA supports different types of templates that you can offer for every project. By default, PYBOSSA comes with the following templates: Basic : the most basic template. It only has the necessary structure to develop your project. Image : this template is for image pattern recognition. Sound : similar to the image template, but for sound clips hosted on SoundCloud. Video : similar to the image template, but for video clips hosted on Vimeo or Youtube. Map : this template is for geocoding projects. PDF : this template is for transcribing documents. If you want to add your templates or remove one, just create in the settings_local.py file a variable named PRESENTERS and add remove the ones you want: PRESENTERS = [ \"basic\" , \"image\" , \"sound\" , \"video\" , \"map\" , \"pdf\" , \"yourtemplate\" ] yourtemplate should be a template that you have to save in the theme folder: /templates/projects/snippets/ with the same name. Check the other templates to use them as a base layer for your template. After adding the template, the server will start offering this new template to your users. In addition to the project templates themselves, you can add some test tasks for those projects so that the users can import them into their projects and start \u201cplaying\u201d with them or taking their format as a starting point to create their own. These tasks can be imported from Google Docs spreadsheets, and you can add them, remove them, or modify the URLs of the spreadsheets changing the value of the variable TEMPLATE_TASKS in settings_local.py: TEMPLATE_TASKS = { 'image' : \"<https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdHFEN29mZUF0czJWMUhIejF6dWZXdkE&usp=sharing>\" , 'sound' : \"<https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEczcWduOXRUb1JUc1VGMmJtc2xXaXc&usp=sharing>\" , 'video' : \"<https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZ2UGhxSTJjQl9YNVhfUVhGRUdoRWc&usp=sharing>\" , 'map' : \"<https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZnbjdwcnhKRVNlN1dGXy0tTnNWWXc&usp=sharing>\" , 'pdf' : \"<https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEVVamc0R0hrcjlGdXRaUXlqRXlJMEE&usp=sharing>\" }","title":"Adding custom project templates"},{"location":"installation/configuration/#setting-an-expiration-time-for-project-passwords","text":"PYBOSSA allows the owner of a project to set a password so that only people (both anonymous or authenticated) that know it can contribute. By entering this password, the user will have access to the project for a time specified by: PASSWD_COOKIE_TIMEOUT = 60 * 30 This variable is configured by default to 30 minutes.","title":"Setting an expiration time for project passwords"},{"location":"installation/configuration/#validation-of-new-user-accounts","text":"Whenever a new user wants to sign up, PYBOSSA allows you to add some extra security steps to the process by asking the users to validate a real email account. However, if you don\u2019t need this feature, it can be disabled (as it is enabled by default) with this configuration parameter: ACCOUNT_CONFIRMATION_DISABLED = True","title":"Validation of new user accounts"},{"location":"installation/configuration/#two-factor-authentication-on-login","text":"If you need an extra layer of security for user authentication, PYBOSSA allows you to enable two-factor authentication by setting this configuration value: ENABLE_TWO_FACTOR_AUTH = True With this parameter set, after password verification users will receive a one-time code in their email, and will be redirected to a page where they can insert the code to complete the login process.","title":"Two-factor authentication on login"},{"location":"installation/configuration/#sending-weekly-email-stats-to-project-owners","text":"Project owners that have the pro-flag set to True can receive every week an update with the latest statistics about their projects in their email box. By default, this email is sent every Sunday. You can modify it in the settings file by changing it to another day: WEEKLY_UPDATE_STATS = 'Tuesday' Note For the moment the only way to toggle the pro-flag is via the database. It will be fixed in the future.","title":"Sending weekly email stats to project owners"},{"location":"installation/configuration/#newsletters-with-mailchimp","text":"PYBOSSA can show a subscription page to users when they create an account. By default is disabled. You can enable it, revealing a page to recently registered users, to check if they want to subscribe or not. To support newsletters, you\u2019ll have to create an account in Mailchimp and get an API_KEY as well as a LIST_ID to add the users. Once you have those two items you can enable the newsletter subscription adding them to your settings_local.py file: MAILCHIMP_API_KEY = \"your-key\" MAILCHIMP_LIST_ID = \"your-list-id\" Restart the server, and you will be done. Now in your MailChimp account, you will be able to create campaigns and communicate with your registered and interested users.","title":"Newsletters with Mailchimp"},{"location":"installation/configuration/#enabling-the-dropbox-task-importer","text":"PYBOSSA also offers the Dropbox importer, which allows importing all kind of files from a Dropbox account directly. To use it, you\u2019ll need to register your PYBOSSA server as a Dropbox app, as explained here . Don\u2019t worry about the Javascript snippet part; we\u2019ve already handled that for you. Instead, get the App key you will be given and add it to your settings_local.py: DROPBOX_APP_KEY = 'your-key'","title":"Enabling the Dropbox Task importer"},{"location":"installation/configuration/#enabling-the-youtubes-task-importer","text":"The Youtube\u2019s task importer needs a Youtube server key which you need to create in the Google API Console in YouTube Data API. Once you have an API key, you\u2019ll have to add it to your settings_local.py file: YOUTUBE_API_SERVER_KEY = \"your-key\" For more information on how to get a Youtube server key, please refer to the official documentation .","title":"Enabling the Youtube's Task importer"},{"location":"installation/configuration/#enabling-server-sent-events","text":"Since PYBOSSA v1.1.0, PYBOSSA supports Server-Sent Events (SSE) in some views. This feature is powerful. However, it brings some issues with it: it needs to run PYBOSSA in asynchronous mode. As this is not a necessity, by default PYBOSSA has this feature disabled. PYBOSSA uses SSE to notify users about specific actions (i.e., the result of a webhook in real time). If you want to enable it, you will have to add to your settings_local.py: SSE = True Also, you will need to configure uwsgi and nginx to support SSE events. This is not trivial, as there are several different scenarios, libraries, and options, so instead of recommending one solution, we invite you to read the uwsgi documentation about it , so you can take a decision based on your infrastructure and preferences.","title":"Enabling Server-Sent Events"},{"location":"installation/configuration/#latest-news-from-pybossa","text":"Since v1.2.1 PYBOSSA gets the latest news of its new releases, as well as anything related to what Scifabric blogs about regarding the crowdsourcing world. You can add more items if you want, by just adding to your settings_local.py file new ATOM URLs: NEWS_URL = [ 'http:/http:///atomurl1' , 'http://atomurl2' , ... ]","title":"Latest news from PYBOSSA"},{"location":"installation/configuration/#enabling-pro-user-features","text":"Since version v1.2.2 PYBOSSA, you can specify which features can be only available to pro users or everyone. To modify them, just locate them in the settings_local.py file. By default, they look like: PRO_FEATURES = { 'auditlog' : True , 'webhooks' : True , 'updated_exports' : True , 'notify_blog_updates' : True , 'project_weekly_report' : True , 'autoimporter' : True , 'better_stats' : True } By choosing \u201cTrue\u201d on each of them, you are making that specific feature available only to pro users. On the other hand, selecting \u201cFalse\u201d makes them available to regular users as well.","title":"Enabling pro user features"},{"location":"installation/configuration/#strict-slashes","text":"By default, PYBOSSA distinguishes between two types of URLs for its endpoints: with and without a trailing slash. In other words, if an endpoint is not declared within the code as accepting both options, accessing the same endpoint with a trailing slash will return a 404. For example, the about endpoint: 1 GET /about Will return the page, but with the default configuration it will return a 404 if you add a trailing slash to it: 1 GET /about/ To disable this behavior, enable the STRICT_SLASHES option and set it to False. That option will ensure that both endpoints work with and without the trailing slash.","title":"Strict Slashes"},{"location":"installation/configuration/#forums","text":"PYBOSSA does not provide its own forum. However, you can use Disqus and integrate it in your PYBOSSA server.","title":"Forums"},{"location":"installation/configuration/#background-jobs-timeout","text":"By default PYBOSSA timeout for every job is 10 minutes. In principle, it should be fine, but each project and server is unique, so if you start seeing too many jobs failing because the job timed out, then, increase the value using these config variables: MINUTE = 60 TIMEOUT = 20 * 60","title":"Background jobs timeout"},{"location":"installation/configuration/#web-push-notifications","text":"Note You need to have HTTPS enabled for your site. Otherwise, you will need to use a subdomain from onesignal.com to support this feature. If you cannot use HTTPS, we recommend to disable it. PYBOSSA can send web push notifications to Google Chrome, Mozilla Firefox and Safari browsers. For supporting this feature, PYBOSSA uses the Onesignal.com service. You will need an account and create an app for your PYBOSSA server. Then follow their documentation to download the WebPush SDK and configure your PYBOSSA theme. For more info regarding Onesignal, check their documentation. Note You can host the SDK files in the static folder of your theme. However, you will need to modify your web server (Apache or Nginx) to serve those files as from the root of your server. If this is not done correctly, it will not work. Once you have created the app in Onesignal, get the API KEY and APP ID. Then copy them and put it in your settings_local.py file: ONESIGNAL_APP_ID = 'app-id' ONESIGNAL_API_KEY = 'app-key' Restart the server, and add one background worker for the webpush queue. This queue will handle the creation of the apps, as well as sending the push notifications. Then you will need to update your PYBOSSA theme to allow your users to subscribe. As this could vary a lot from one project to another, we do not provide a template but some guidelines: Use the JS SDK to subscribe a user to a given project using the tags option of Onesignal. PYBOSSA sends notifications using those tags thanks to the filters option that allows us to segment traffic. PYBOSSA is expecting the project.id as the tag key for segmenting. The JS SDK allows you to subscribe/unsubscribe a user to a given project (not only the whole server) with unique methods for adding tags and deleting them. This works independently if the user is authenticated or not. For more info regarding Onesignal JS SDK, check their documentation.","title":"Web Push notifications"},{"location":"installation/configuration/#ignore-specific-keys-when-exporting-data-in-csv-format","text":"Sometimes your PYBOSSA project saves information like GeoJSON within the tasks or task_runs. This is a bad thing for the exporter, as it will try to flatten it. In such scenarios, you want to instruct PYBOSSA to ignore those keys, as they will be included in the JSON export files, and reduce all the overhead (as well as destroying the format due to the normalization). For ignoring a key (or a list of keys), just add the following config variable to your settings_local.py file: IGNORE_FLAT_KEYS = [ 'geojson' , 'key1' , ... ]","title":"Ignore specific keys when exporting data in CSV format"},{"location":"installation/configuration/#specify-a-new-root-key-instead-of-info-for-csv-exporter","text":"Sometimes you need to change the root key for the CSV exporter. This usually happens, when you have to store one ore more answers within the same info object. For this reason, you can instruct PYBOSSA to use that key instead of info for flattening the data: TASK_CSV_EXPORT_INFO_KEY = 'key' TASK_RUN_CSV_EXPORT_INFO_KEY = 'key2' RESULT_CSV_EXPORT_INFO_KEY = 'key3' In this way, if key, key2 or key3 have an array or list of dictionaries, PYBOSSA will iterate over them, flat them, and then generate the CSV for you.","title":"Specify a new root key instead of info for CSV exporter"},{"location":"installation/configuration/#disable-task-presenter-check-for-pure-javascript-apps","text":"When you are using PYBOSSA native JSON support, you will not be building your project presenter within the PYBOSSA structure, but within the JS framework of your choice. In such a case, you would like to disable the check for the task_presenter when publishing a project. If you need this, just add this flag to your settings_local.py file: DISABLE_TASK_PRESENTER = True","title":"Disable task presenter check for pure JavaScript apps"},{"location":"installation/configuration/#consent-field-for-users","text":"Sometimes you will need the users to click on a checkbox before creating an account to get the agreement for sending them email notifications or of any other type. By default, PYBOSSA provides this flag, and it\u2019s set to False. Change in the theme (or your frontend) the label of the field to whatever you prefer: Terms of Service, Communications, etc. so you will be able to keep track of who has accepted/declined to get notifications from you.","title":"Consent field for users"},{"location":"installation/configuration/#custom-leaderboards","text":"By default, PYBOSSA provides a unique leaderboard. This leaderboard is based on the number of task runs that a user has submitted. However, you may want more flexibility. For this reason, you can use use the \u201cuser\u201d.info field to store any other \u201cbadges\u201d or values that you want to score your users. If your users have identified very complicated stuff, and you want to give points to them based on that, just use the info field and instruct PYBOSSA to create a leaderboard for you. Note It is essential that this key, projectsvalue pair is computed by you. You can use the API to update these values, so this will not be handled by PYBOSSA but by yourself. Imagine the score is named: foo, then, PYBOSSA will create for you a leaderboard using that key like this: edit the settings_local.py file and add the following config variable: LEADERBOARDS = [ 'foo' ] Then, you can access the specific leaderboard using the endpoint: /leaderboard/?info=foo As simple as that. Note This feature relies on background jobs. Be sure that you are running them.","title":"Custom Leaderboards"},{"location":"installation/configuration/#default-number-of-users-for-the-leaderboard","text":"You can specify the default number of users shown in the leaderboard. By default we show the top 20 users. LEADERBOARD = 20","title":"Default number of users for the leaderboard"},{"location":"installation/configuration/#unpublish-inactive-projects","text":"PYBOSSA by default unpublishes projects that have not been active in the last three months. You can disable this feature by changing this config variable in your settings_local.py file: UNPUBLISH_PROJECTS = False","title":"Unpublish inactive projects"},{"location":"installation/configuration/#ldap-integration","text":"PYBOSSA can use LDAP for authenticating users. You will need to add a few config variables to the settings_local.py file to make it work. PYBOSSA supports LDAP and OpenLDAP protocols, so you should be able to use any of them. Note By enabling PYBOSSA LDAP integration, all other means for creating accounts and sign in will be disabled.","title":"LDAP integration"},{"location":"installation/configuration/#ldap_host","text":"This variable should have the IP or domain name of your LDAP server.","title":"LDAP_HOST"},{"location":"installation/configuration/#ldap_base_dn","text":"This is the LDAP Base DN for your organization.","title":"LDAP_BASE_DN"},{"location":"installation/configuration/#ldap_username","text":"This variable should have the admin account so that PYBOSSA can access the LDAP server and search for users.","title":"LDAP_USERNAME"},{"location":"installation/configuration/#ldap_password","text":"The admin account password.","title":"LDAP_PASSWORD"},{"location":"installation/configuration/#ldap_objects_dn","text":"The DN.","title":"LDAP_OBJECTS_DN"},{"location":"installation/configuration/#ldap_openldap","text":"Set it to True if you are using it.","title":"LDAP_OPENLDAP"},{"location":"installation/configuration/#ldap_user_object_filter","text":"This is important. The filter that you write in here needs to be adapted to your institution, otherwise, it will not work when authenticating and validating your users. Don\u2019t use the default configuration in the settings template. You will need to adapt it to your needs.","title":"LDAP_USER_OBJECT_FILTER"},{"location":"installation/configuration/#ldap_user_filter_field","text":"If you use a different field in the previous configuration, update the LDAP_USER_FILTER_FIELD. It\u2019s important to reflect which key are you using within your LDAP server to identify your users uniquely.","title":"LDAP_USER_FILTER_FIELD"},{"location":"installation/configuration/#ldap_pybossa_fields","text":"Use this configuration variable to match/link PYBOSSA fields to LDAP fields.","title":"LDAP_PYBOSSA_FIELDS"},{"location":"installation/configuration/#uploading-files-to-pybossa","text":"PYBOSSA has a generic uploader that will check for valid extensions, avoiding for example that a user could upload a video, as only images are allowed.","title":"Uploading files to PYBOSSA"},{"location":"installation/configuration/#allowed_extensions","text":"Use this configuration variable, to specify which types of files will you allow in your server to be uploaded via the API. By default, the following extensions are enabled: ALLOWED_EXTENSIONS = [ 'js' , 'css' , 'png' , 'jpg' , 'jpeg' , 'gif' , 'zip' ]","title":"ALLOWED_EXTENSIONS"},{"location":"installation/configuration/#spam-protection","text":"You can blacklist disposable email accounts by listing them in the SPAM config. Just add them like this: SPAM = [ 'spam.com' , 'fake.es' ]","title":"SPAM protection"},{"location":"installation/configuration/#failed-jobs","text":"Sometimes background jobs fail. For example, an email is rejected. By default PYBOSSA retries 3 times, before marking them as failed. You can customize it. FAILED_JOBS_RETRIES = 3","title":"Failed Jobs"},{"location":"installation/configuration/#fulltext-search-language","text":"PYBOSSA uses PostgreSQL fulltex search support. Thus, you can instruct PYBOSSA to use only a given language to do it properly: FULLTEXTSEARCH_LANGUAGE = 'english'","title":"Fulltext search language"},{"location":"installation/configuration/#absolute-links-to-avatars","text":"If you are building a Single Page Application or a Universal App, you will need to get absolute paths to the avatars. Use the following config: AVATAR_ABSOLUTE = True","title":"Absolute links to Avatars"},{"location":"installation/configuration/#delete-inactive-accounts","text":"PYBOSSA will delete inactive accounts after a period of time. For this purpose, PYBOSSA uses two different background jobs, one for warning users about the action, and another one to delete them. The warning job is run on a monthly basis, while the deletion is done on a bi-monthly basis. You can customize the the time period that you consider to warn users as well as to delete them. For these purposes you can use the following two variables: USER_INACTIVE_NOTIFICATION = 5 USER_DELETE_AFTER_NOTIFICATION = '1 month' Thus, after 5 months of not contributing a single task run, the user will get an email warning her about the deletion. Then, the next month if the user has not sent a task run, the account will be deleted. For deleting the accounts, PYBOSSA uses the the same method as if the user requested it herself. The action anonymizes the user\u2019s contributions, and deletes all her personal data. Note PYBOSSA will not delete users with the restrict flag set to true (to respect GDPR) as well as if they have projects.","title":"Delete inactive accounts"},{"location":"installation/deployment/","text":"Deploying PYBOSSA with nginx and uwsgi \u00b6 This section describes how to make PYBOSSA run as a service or daemon permanently in the background. This is useful if you want to run a production-ready single PYBOSSA web server. PYBOSSA hosted servers. Checkout Scifabric\u2019s hosted PYBOSSA servers . Pre-requisites: nginx uwsgi supervisord Redis and sentinel as service (with supervisord) RQ-Scheduler and RQ-Worker as service (with supervisord) PYBOSSA as service (with supervisord) First steps \u00b6 First things first, be sure that you have followed the installation guide before starting the deployment. We highly recommend installing PYBOSSA under a regular user (without any privileges) to run the PYBOSSA technology. We will refer to this user as pybossa . Installing nginx and uwsgi \u00b6 You have to install nginx and uwsgi on your server machine. In a Debian/Ubuntu machine you can install them running the following commands: sudo apt-get install nginx In the (virtualenv-)installation directory of pybossa, you need to install uwsgi: pip install -U uwsgi Configuring nginx and uwsgi for PYBOSSA \u00b6 We assume you only want to run PYBOSSA on your nginx web server. If you need to run also other services on the same server, you need to modify the nginx config files! You have to copy and adapt the following files from your local PYBOSSA installation: contrib/nginx/pybossa contrib/pybossa.ini The PYBOSSA virtual host file ( contrib/nginx/pybossa ) has the following directives: location / { try_files $uri @pybossa; } location @pybossa { include uwsgi_params; uwsgi_pass unix:/tmp/pybossa.sock; } location /static { # change that to your pybossa static directory alias /home/Scifabric/pybossa/pybossa/themes/default/static; autoindex on; expires max; } You can specify a user and group from your machine with lower privileges to improve the security of the site. You can also use the www-data user and group name. Once you have adapted the PATH in the alias in that file, copy it into the folder: sudo cp contrib/nginx/pybossa /etc/nginx/sites-available/. Please delete the default config in sites-enabled (do not worry there is a backup): sudo rm /etc/nginx/sites-enabled/default Enable the PYBOSSA site: sudo ln -s /etc/nginx/sites-available/pybossa /etc/nginx/sites-enabled/pybossa And restart the server: sudo service nginx restart Creating the pybossa.ini file for uwsgi \u00b6 You have to copy the pybossa.ini.template file to pybossa.ini in your PYBOSSA installation and adapt the paths to match your configuration! The content of this file is the following: [ uwsgi ] socket = / tmp / pybossa . sock chmod - socket = 666 chdir = / home / pybossa / pybossa pythonpath = .. virtualenv = / home / pybossa / pybossa / env module = run : app cpu - affinity = 1 processes = 2 threads = 2 stats = / tmp / pybossa - stats . sock buffer - size = 65535 Install supervisord \u00b6 Supervisord is used to let PYBOSSA and its RQ system run as Daemon in the background. It shares some of the same goals of programs like launchd, daemontools, and runit. Install it: sudo apt-get install supervisor Configure Redis and sentinel as a service with supervisord \u00b6 First stop Redis service and all running Redis instances with: sudo service redis-server stop killall redis-server We want to run redis and sentinel with supervisord because supervisord is more reliable when redis crashes (which can happen when you do not have enough RAM). So we disable redis-server daemon service with: sudo rm /etc/init.d/redis-server Go to your pybossa installation directory and copy following files: sudo cp contrib/supervisor/redis-server.conf /etc/supervisor/conf.d/ sudo cp contrib/supervisor/redis-sentinel.conf /etc/supervisor/conf.d/ sudo cp contrib/redis-supervisor/redis.conf /etc/redis/ sudo cp contrib/redis-supervisor/sentinel.conf /etc/redis/ sudo chown redis:redis /etc/redis/redis.conf sudo chown redis:redis /etc/redis/sentinel.conf Now we restart supervisord (please do a full stop and start as described): sudo service supervisor stop sudo service supervisor start To verify the installation, you can list all redis processes, and you should see a redis-server at port 6379 and redis-sentinel at port 26379: ps aux | grep redis These two services will now run whenever the server is running (even after reboot). Configure RQ-Scheduler and RQ-Worker to run with supervisord \u00b6 You need to adjust the paths and user account in this two config files according to your installation. Then copy them to supervisor (do not forget to edit them): sudo cp contrib/supervisor/rq-scheduler.conf.template /etc/supervisor/conf.d/rq-scheduler.conf sudo cp contrib/supervisor/rq-worker.conf.template /etc/supervisor/conf.d/rq-worker.conf Restart supervisor: sudo service supervisor stop sudo service supervisor start Verify that the service is running. You should see a rqworker and rqscheduler instance in the console: ps aux | grep rq Setup PYBOSSA itself \u00b6 As we are going to run PYBOSSA via nginx, we have to remove from the settings file the HOST and PORT sections. You can also comment them: # HOST = '0.0.0.0' # PORT = 12000 After modifying the settings file, add the full server URL where your PYBOSSA is reachable: SERVER_NAME = mypybossa . com PORT = 80 Let PYBOSSA run as service \u00b6 Finally, we need to let pybossa run as service. Adjust the paths and username again in this file and copy it to the supervisor config directory: sudo cp contrib/supervisor/pybossa.conf.template /etc/supervisor/conf.d/pybossa.conf Edit now the file and adjust the paths & username. Restart supervisor: sudo service supervisor stop sudo service supervisor start You should have now a running PYBOSSA production web server on your nginx installation. Open your browser and check your configured domain: http://example.com . Congratulations! How to update the PYBOSSA service \u00b6 Upgrading and updating PYBOSSA as service works the same as for the standalone version. Please follow instructions on the installation instructions . Once you have upgraded the code, you will need to restart all supervisor controlled services to get the changes: sudo supervisorctl restart rq-scheduler sudo supervisorctl restart rq-worker sudo supervisorctl restart pybossa Logs of PYBOSSA services \u00b6 You can find logs of all PYBOSSA services in this directory: cd /var/log/supervisor Last words about Security and Scaling \u00b6 This guide does not cover how to secure your PYBOSSA installation. As every web server, you have to make it secure (like, e.g., strong passwords, automatic Ubuntu security updates, firewall, access restrictions). Please use guides on the Internet to do so. PYBOSSA can also be scaled horizontally to run with redundant servers and with zero downtime over many redis, DB and web servers with load balancers in between. If you need a secure and scalable PYBOSSA installation, please contact us. We offer hosted PYBOSSA servers, and we will handle all the hosting, customization, administration and setup for you. Check our pricing page and get in touch.","title":"Deploying PYBOSSA with Nginx and uWsgi"},{"location":"installation/deployment/#deploying-pybossa-with-nginx-and-uwsgi","text":"This section describes how to make PYBOSSA run as a service or daemon permanently in the background. This is useful if you want to run a production-ready single PYBOSSA web server. PYBOSSA hosted servers. Checkout Scifabric\u2019s hosted PYBOSSA servers . Pre-requisites: nginx uwsgi supervisord Redis and sentinel as service (with supervisord) RQ-Scheduler and RQ-Worker as service (with supervisord) PYBOSSA as service (with supervisord)","title":"Deploying PYBOSSA with nginx and uwsgi"},{"location":"installation/deployment/#first-steps","text":"First things first, be sure that you have followed the installation guide before starting the deployment. We highly recommend installing PYBOSSA under a regular user (without any privileges) to run the PYBOSSA technology. We will refer to this user as pybossa .","title":"First steps"},{"location":"installation/deployment/#installing-nginx-and-uwsgi","text":"You have to install nginx and uwsgi on your server machine. In a Debian/Ubuntu machine you can install them running the following commands: sudo apt-get install nginx In the (virtualenv-)installation directory of pybossa, you need to install uwsgi: pip install -U uwsgi","title":"Installing nginx and uwsgi"},{"location":"installation/deployment/#configuring-nginx-and-uwsgi-for-pybossa","text":"We assume you only want to run PYBOSSA on your nginx web server. If you need to run also other services on the same server, you need to modify the nginx config files! You have to copy and adapt the following files from your local PYBOSSA installation: contrib/nginx/pybossa contrib/pybossa.ini The PYBOSSA virtual host file ( contrib/nginx/pybossa ) has the following directives: location / { try_files $uri @pybossa; } location @pybossa { include uwsgi_params; uwsgi_pass unix:/tmp/pybossa.sock; } location /static { # change that to your pybossa static directory alias /home/Scifabric/pybossa/pybossa/themes/default/static; autoindex on; expires max; } You can specify a user and group from your machine with lower privileges to improve the security of the site. You can also use the www-data user and group name. Once you have adapted the PATH in the alias in that file, copy it into the folder: sudo cp contrib/nginx/pybossa /etc/nginx/sites-available/. Please delete the default config in sites-enabled (do not worry there is a backup): sudo rm /etc/nginx/sites-enabled/default Enable the PYBOSSA site: sudo ln -s /etc/nginx/sites-available/pybossa /etc/nginx/sites-enabled/pybossa And restart the server: sudo service nginx restart","title":"Configuring nginx and uwsgi for PYBOSSA"},{"location":"installation/deployment/#creating-the-pybossaini-file-for-uwsgi","text":"You have to copy the pybossa.ini.template file to pybossa.ini in your PYBOSSA installation and adapt the paths to match your configuration! The content of this file is the following: [ uwsgi ] socket = / tmp / pybossa . sock chmod - socket = 666 chdir = / home / pybossa / pybossa pythonpath = .. virtualenv = / home / pybossa / pybossa / env module = run : app cpu - affinity = 1 processes = 2 threads = 2 stats = / tmp / pybossa - stats . sock buffer - size = 65535","title":"Creating the pybossa.ini file for uwsgi"},{"location":"installation/deployment/#install-supervisord","text":"Supervisord is used to let PYBOSSA and its RQ system run as Daemon in the background. It shares some of the same goals of programs like launchd, daemontools, and runit. Install it: sudo apt-get install supervisor","title":"Install supervisord"},{"location":"installation/deployment/#configure-redis-and-sentinel-as-a-service-with-supervisord","text":"First stop Redis service and all running Redis instances with: sudo service redis-server stop killall redis-server We want to run redis and sentinel with supervisord because supervisord is more reliable when redis crashes (which can happen when you do not have enough RAM). So we disable redis-server daemon service with: sudo rm /etc/init.d/redis-server Go to your pybossa installation directory and copy following files: sudo cp contrib/supervisor/redis-server.conf /etc/supervisor/conf.d/ sudo cp contrib/supervisor/redis-sentinel.conf /etc/supervisor/conf.d/ sudo cp contrib/redis-supervisor/redis.conf /etc/redis/ sudo cp contrib/redis-supervisor/sentinel.conf /etc/redis/ sudo chown redis:redis /etc/redis/redis.conf sudo chown redis:redis /etc/redis/sentinel.conf Now we restart supervisord (please do a full stop and start as described): sudo service supervisor stop sudo service supervisor start To verify the installation, you can list all redis processes, and you should see a redis-server at port 6379 and redis-sentinel at port 26379: ps aux | grep redis These two services will now run whenever the server is running (even after reboot).","title":"Configure Redis and sentinel as a service with supervisord"},{"location":"installation/deployment/#configure-rq-scheduler-and-rq-worker-to-run-with-supervisord","text":"You need to adjust the paths and user account in this two config files according to your installation. Then copy them to supervisor (do not forget to edit them): sudo cp contrib/supervisor/rq-scheduler.conf.template /etc/supervisor/conf.d/rq-scheduler.conf sudo cp contrib/supervisor/rq-worker.conf.template /etc/supervisor/conf.d/rq-worker.conf Restart supervisor: sudo service supervisor stop sudo service supervisor start Verify that the service is running. You should see a rqworker and rqscheduler instance in the console: ps aux | grep rq","title":"Configure RQ-Scheduler and RQ-Worker to run with supervisord"},{"location":"installation/deployment/#setup-pybossa-itself","text":"As we are going to run PYBOSSA via nginx, we have to remove from the settings file the HOST and PORT sections. You can also comment them: # HOST = '0.0.0.0' # PORT = 12000 After modifying the settings file, add the full server URL where your PYBOSSA is reachable: SERVER_NAME = mypybossa . com PORT = 80","title":"Setup PYBOSSA itself"},{"location":"installation/deployment/#let-pybossa-run-as-service","text":"Finally, we need to let pybossa run as service. Adjust the paths and username again in this file and copy it to the supervisor config directory: sudo cp contrib/supervisor/pybossa.conf.template /etc/supervisor/conf.d/pybossa.conf Edit now the file and adjust the paths & username. Restart supervisor: sudo service supervisor stop sudo service supervisor start You should have now a running PYBOSSA production web server on your nginx installation. Open your browser and check your configured domain: http://example.com . Congratulations!","title":"Let PYBOSSA run as service"},{"location":"installation/deployment/#how-to-update-the-pybossa-service","text":"Upgrading and updating PYBOSSA as service works the same as for the standalone version. Please follow instructions on the installation instructions . Once you have upgraded the code, you will need to restart all supervisor controlled services to get the changes: sudo supervisorctl restart rq-scheduler sudo supervisorctl restart rq-worker sudo supervisorctl restart pybossa","title":"How to update the PYBOSSA service"},{"location":"installation/deployment/#logs-of-pybossa-services","text":"You can find logs of all PYBOSSA services in this directory: cd /var/log/supervisor","title":"Logs of PYBOSSA services"},{"location":"installation/deployment/#last-words-about-security-and-scaling","text":"This guide does not cover how to secure your PYBOSSA installation. As every web server, you have to make it secure (like, e.g., strong passwords, automatic Ubuntu security updates, firewall, access restrictions). Please use guides on the Internet to do so. PYBOSSA can also be scaled horizontally to run with redundant servers and with zero downtime over many redis, DB and web servers with load balancers in between. If you need a secure and scalable PYBOSSA installation, please contact us. We offer hosted PYBOSSA servers, and we will handle all the hosting, customization, administration and setup for you. Check our pricing page and get in touch.","title":"Last words about Security and Scaling"},{"location":"installation/faq/","text":"Frequently Asked Questions \u00b6 Info If you do not find your question in this section, please send it to us directly to info AT scifabric DOT com . We will try to help you and add your question to the FAQ. Users \u00b6 Do I need to create an account to participate in the project? \u00b6 It depends. The owners of the projects can disable anonymous contributions (usually due to privacy issues with the data), forcing you to create an account if you want to contribute to that specific project. Projects \u00b6 How can I create a project? \u00b6 You can create a project using web forms, or if you prefer it using the API. We recommend you to read the user/overview and user/tutorial sections. Can I disable anonymous contributions? \u00b6 Yes, you can. Check your project settings and toggle the drop down menu: Allow Anonymous Contributors from Yes to No. Check the project-details for further information. Can I create golden tasks ? \u00b6 Yes, you can. PYBOSSA has a field for every Task named: calibration that will identify the task as a golden task or as we call them as a calibration task . Calibration tasks can be used to weight the answers of the volunteers (authenticated and anonymous) as you know the answer for those given tasks. For example, if a user has answered all the calibration tasks correctly you can give a weight of 1 point to all his/her answers, while if the user only answered 50% of them correctly, the answers for the rest of the tasks could be given a weight of 0.5 points. Can I delete my project and all the task and task runs? \u00b6 Yes, you can. If you are the owner of the project you can delete the project, and automatically all the task and associated task runs will be deleted ( note : this cannot be undone!). Check the project-delete section for further details. If I\u2019ve installed the server, can I run a script to reset a project? \u00b6 Yes, you can. You will have to access the server, and then run the command python cli . py clean_project ProjectID SkipTasks .. note: By default, if you run this command it will return all the tasks, task_runs, results and reset all the statistics for that project. BE CAREFUL. Pass ProjectID to delete everything, or tell the command to skip deleting the tasks, so you can keep them, and update the stats accordingly. Do you provide any statistics about the users for my project? \u00b6 Yes, every project has its own statistics page that shows information about the distribution of answers per type of user, an estimation about how long it will take to complete all your tasks, the top 5 authenticated and anonymous users, etc. Check the Statistics link in the left local sidebar of your project. My project is not getting too much attention, how can it be a featured project? \u00b6 Featured projects are managed by the administrators of the site. Contact them about this issue, and they will decide about your project. I have all my data in a CSV file, can I import it? \u00b6 Yes, you can. PYBOSSA supports the CSV format, so all you have to do is upload your file to a file server like DropBox, copy the public link and paste it in the importer section. PYBOSSA also supports Google Drive Spreadsheets, see csv-import section for further details. My data is in a Google Doc Spreadsheet, can I import the data into my project? \u00b6 Yes, you can. PYBOSSA supports the Google Drive Spreadsheets, so make it public, copy the link and use that link to import it the Google Drive importer section. See csv-import section for further details. All my tasks have been completed, how do I download the results to analyze them? \u00b6 You can export all the data of your project whenever you want. The data can be exported directly from the Tasks section (check the Tasks link in the left sidebar of your project and click in the export box). PYBOSSA can export your tasks and task runs (or answers) to a CSV file, JSON format or to a CKAN server. See the export-results section for further details. What is a Task Run? \u00b6 A Task Run is a submitted answer sent by one user (authenticated or anonymous) to one of the tasks of your project. In other words, it is the work done by one volunteer for one task. What is the Task Presenter? \u00b6 The task presenter is the web project that will load the tasks of your project and present them to the user. It is an HTML + JavaScript project. See the task-presenter section for further details. PYBOSSA \u00b6 Does PYBOSSA have an API? \u00b6 Yes, it does. PYBOSSA has a api that allows you to create projects, download results, import tasks, etc. Please see the api section for more details and the user/tutorial for a full example about how you can use it. Is PYBOSSA open-source? \u00b6 Yes, it is. PYBOSSA is licensed under the GNU Affero general public license version 3.0 . Do you provide project templates or examples projects? \u00b6 Yes, we do. You can find several open source project examples that can be re-used for image/sound pattern recognition problems, geo-coding, PDF transcription, etc. Check the official Git repository for all the available projects. Did you get inspired by BOSSA? \u00b6 PYBOSSA derives from the original BOSSA implementation. The following are some useful references to that original implementation: http://boinc.berkeley.edu/trac/wiki/BossaImplementation BOSSA Reference: http://boinc.berkeley.edu/trac/wiki/BossaReference Support \u00b6 PYBOSSA is free and open source, that means that anyone can create a project and benefit from the endless features that PYBOSSA has to offer, so that you can reach your ultimate goal. And the best part? That it is free of charge! As well as the FAQs and all the available documentation to help you create and develop your PYBOSSA project, we will be happy to answer your questions related to the running of PYBOSSA in general. Scifabric offers different options for support. Check them and use the one that fits your needs: http://pybossa.com/support/","title":"FAQ"},{"location":"installation/faq/#frequently-asked-questions","text":"Info If you do not find your question in this section, please send it to us directly to info AT scifabric DOT com . We will try to help you and add your question to the FAQ.","title":"Frequently Asked Questions"},{"location":"installation/faq/#users","text":"","title":"Users"},{"location":"installation/faq/#do-i-need-to-create-an-account-to-participate-in-the-project","text":"It depends. The owners of the projects can disable anonymous contributions (usually due to privacy issues with the data), forcing you to create an account if you want to contribute to that specific project.","title":"Do I need to create an account to participate in the project?"},{"location":"installation/faq/#projects","text":"","title":"Projects"},{"location":"installation/faq/#how-can-i-create-a-project","text":"You can create a project using web forms, or if you prefer it using the API. We recommend you to read the user/overview and user/tutorial sections.","title":"How can I create a project?"},{"location":"installation/faq/#can-i-disable-anonymous-contributions","text":"Yes, you can. Check your project settings and toggle the drop down menu: Allow Anonymous Contributors from Yes to No. Check the project-details for further information.","title":"Can I disable anonymous contributions?"},{"location":"installation/faq/#can-i-create-golden-tasks","text":"Yes, you can. PYBOSSA has a field for every Task named: calibration that will identify the task as a golden task or as we call them as a calibration task . Calibration tasks can be used to weight the answers of the volunteers (authenticated and anonymous) as you know the answer for those given tasks. For example, if a user has answered all the calibration tasks correctly you can give a weight of 1 point to all his/her answers, while if the user only answered 50% of them correctly, the answers for the rest of the tasks could be given a weight of 0.5 points.","title":"Can I create golden tasks?"},{"location":"installation/faq/#can-i-delete-my-project-and-all-the-task-and-task-runs","text":"Yes, you can. If you are the owner of the project you can delete the project, and automatically all the task and associated task runs will be deleted ( note : this cannot be undone!). Check the project-delete section for further details.","title":"Can I delete my project and all the task and task runs?"},{"location":"installation/faq/#if-ive-installed-the-server-can-i-run-a-script-to-reset-a-project","text":"Yes, you can. You will have to access the server, and then run the command python cli . py clean_project ProjectID SkipTasks .. note: By default, if you run this command it will return all the tasks, task_runs, results and reset all the statistics for that project. BE CAREFUL. Pass ProjectID to delete everything, or tell the command to skip deleting the tasks, so you can keep them, and update the stats accordingly.","title":"If I've installed the server, can I run a script to reset a project?"},{"location":"installation/faq/#do-you-provide-any-statistics-about-the-users-for-my-project","text":"Yes, every project has its own statistics page that shows information about the distribution of answers per type of user, an estimation about how long it will take to complete all your tasks, the top 5 authenticated and anonymous users, etc. Check the Statistics link in the left local sidebar of your project.","title":"Do you provide any statistics about the users for my project?"},{"location":"installation/faq/#my-project-is-not-getting-too-much-attention-how-can-it-be-a-featured-project","text":"Featured projects are managed by the administrators of the site. Contact them about this issue, and they will decide about your project.","title":"My project is not getting too much attention, how can it be a featured project?"},{"location":"installation/faq/#i-have-all-my-data-in-a-csv-file-can-i-import-it","text":"Yes, you can. PYBOSSA supports the CSV format, so all you have to do is upload your file to a file server like DropBox, copy the public link and paste it in the importer section. PYBOSSA also supports Google Drive Spreadsheets, see csv-import section for further details.","title":"I have all my data in a CSV file, can I import it?"},{"location":"installation/faq/#my-data-is-in-a-google-doc-spreadsheet-can-i-import-the-data-into-my-project","text":"Yes, you can. PYBOSSA supports the Google Drive Spreadsheets, so make it public, copy the link and use that link to import it the Google Drive importer section. See csv-import section for further details.","title":"My data is in a Google Doc Spreadsheet, can I import the data into my project?"},{"location":"installation/faq/#all-my-tasks-have-been-completed-how-do-i-download-the-results-to-analyze-them","text":"You can export all the data of your project whenever you want. The data can be exported directly from the Tasks section (check the Tasks link in the left sidebar of your project and click in the export box). PYBOSSA can export your tasks and task runs (or answers) to a CSV file, JSON format or to a CKAN server. See the export-results section for further details.","title":"All my tasks have been completed, how do I download the results to analyze them?"},{"location":"installation/faq/#what-is-a-task-run","text":"A Task Run is a submitted answer sent by one user (authenticated or anonymous) to one of the tasks of your project. In other words, it is the work done by one volunteer for one task.","title":"What is a Task Run?"},{"location":"installation/faq/#what-is-the-task-presenter","text":"The task presenter is the web project that will load the tasks of your project and present them to the user. It is an HTML + JavaScript project. See the task-presenter section for further details.","title":"What is the Task Presenter?"},{"location":"installation/faq/#pybossa","text":"","title":"PYBOSSA"},{"location":"installation/faq/#does-pybossa-have-an-api","text":"Yes, it does. PYBOSSA has a api that allows you to create projects, download results, import tasks, etc. Please see the api section for more details and the user/tutorial for a full example about how you can use it.","title":"Does PYBOSSA have an API?"},{"location":"installation/faq/#is-pybossa-open-source","text":"Yes, it is. PYBOSSA is licensed under the GNU Affero general public license version 3.0 .","title":"Is PYBOSSA open-source?"},{"location":"installation/faq/#do-you-provide-project-templates-or-examples-projects","text":"Yes, we do. You can find several open source project examples that can be re-used for image/sound pattern recognition problems, geo-coding, PDF transcription, etc. Check the official Git repository for all the available projects.","title":"Do you provide project templates or examples projects?"},{"location":"installation/faq/#did-you-get-inspired-by-bossa","text":"PYBOSSA derives from the original BOSSA implementation. The following are some useful references to that original implementation: http://boinc.berkeley.edu/trac/wiki/BossaImplementation BOSSA Reference: http://boinc.berkeley.edu/trac/wiki/BossaReference","title":"Did you get inspired by BOSSA?"},{"location":"installation/faq/#support","text":"PYBOSSA is free and open source, that means that anyone can create a project and benefit from the endless features that PYBOSSA has to offer, so that you can reach your ultimate goal. And the best part? That it is free of charge! As well as the FAQs and all the available documentation to help you create and develop your PYBOSSA project, we will be happy to answer your questions related to the running of PYBOSSA in general. Scifabric offers different options for support. Check them and use the one that fits your needs: http://pybossa.com/support/","title":"Support"},{"location":"installation/gettingstarted/","text":"Getting started \u00b6 PYBOSSA is a python web server built using the Flask micro-framework. You will need the following officially supported requirements : Ubuntu 20.04 LTS Python >= 3.6 PostgreSQL >= 9.5 Redis >= 2.6 pip >= 6.1 In general, all those dependencies are available within the Ubuntu distribution, so you should be able to install all of them without problems. PYBOSSA hosted servers If you want to have a hosting solution for your PYBOSSA servers, checkout Scifabric solutions . Dependencies not officially supported It may also run with older software but we do not officially support it: Python < 3.6 PostgreSQL <= 9.3","title":"Getting started"},{"location":"installation/gettingstarted/#getting-started","text":"PYBOSSA is a python web server built using the Flask micro-framework. You will need the following officially supported requirements : Ubuntu 20.04 LTS Python >= 3.6 PostgreSQL >= 9.5 Redis >= 2.6 pip >= 6.1 In general, all those dependencies are available within the Ubuntu distribution, so you should be able to install all of them without problems. PYBOSSA hosted servers If you want to have a hosting solution for your PYBOSSA servers, checkout Scifabric solutions . Dependencies not officially supported It may also run with older software but we do not officially support it: Python < 3.6 PostgreSQL <= 9.3","title":"Getting started"},{"location":"installation/guide/","text":"Setting things up \u00b6 Before proceeding to install PYBOSSA, you will need to configure some other applications and libraries in your system. In this page, you will get a step by step guide on how to install all the required packages and libraries for PYBOSSA using the latest Ubuntu Server Long Term Support version available at the moment: Ubuntu 20.04 LTS PYBOSSA hosted servers Checkout Scifabric\u2019s hosted PYBOSSA servers . Installing git - a distributed version control system \u00b6 PYBOSSA uses the git distributed version control system for handling the PYBOSSA server source code as well as the template projects. Git is a free and open source distributed version control system designed to handle everything from small to extensive projects with speed and efficiency. To install the software, all you have to do is: sudo apt-get install git Installing the PostgreSQL database \u00b6 PostgreSQL is a powerful, open source object-relational database system. It has more than 15 years of active development and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness. PYBOSSA uses PostgreSQL as the main database for storing all the data. To install it follow the next steps: sudo apt-get install postgresql postgresql-server-dev-all libpq-dev python3-psycopg2 libsasl2-dev libldap2-dev libssl-dev python3-dev Installing virtualenv (optional, but recommended) \u00b6 We recommend installing PYBOSSA using a virtualenv as it will create a an isolated Python environment, helping you to manage different dependencies and versions without having to deal with root permissions in your server machine. virtualenv creates an environment that has its installation directories that doesn\u2019t share libraries with other virtualenv environments (and optionally doesn\u2019t access the globally installed libraries either). You can install the software if you want at the system level if you have root privileges; however, this may lead to broken dependencies in the OS for all your Python packages, so if possible, avoid this solution and use the [virtualenv] http://pypi.python.org/pypi/virtualenv ) solution. Installing virtualenv in the Ubuntu server: sudo apt-get install python3-venv After installing the software you will be able to create independent virtual environments for the PYBOSSA installation as well as for the template projects. Installing the PYBOSSA Python requirements \u00b6 Installing the required libraries for PYBOSSA is a step that will need to use some compilers and dev libraries to work. Thus, you will need to install the following packages: sudo apt-get install python-dev build-essential libjpeg-dev libssl-dev libffi-dev sudo apt-get install dbus libdbus-1-dev libdbus-glib-1-dev libldap2-dev libsasl2-dev Then, you are ready to download the code and install the required libraries for running PYBOSSA. Note We recommend you to install the required libraries using a virtual environment with the command virtualenv (you can install the package python-virtualenv). This will allow having all the libraries for PYBOSSA in one folder of your choice, so cleaning the installation would be as simple as deleting that folder without affecting your system. Note You might need to use pyenv to install a python 3.6 version in order to run the right version. Please check the official documentation of pyenv. If you decide to use a virtualenv then, follow these steps (lines starting with # are comments): # get the source code git clone --recursive https://github.com/Scifabric/pybossa # Access the source code folder cd pybossa python3 -mvenv env # Activate the virtual environment source env/bin/activate # Upgrade pip to latest version pip install -U pip # Install the required libraries pip install -r requirements.txt Otherwise, you should be able to install the libraries in your system like this: # get the source git clone --recursive https://github.com/Scifabric/pybossa # Access the source code folder cd pybossa # Upgrade pip to latest version pip install -U pip # Install the required libraries pip install -r requirements.txt Note Vim editor is a very popular text editor for GNU/Linux systems, however, it may be difficult for some people if you have never used it before. Thus, if you want to try another and much simpler editor for editing the configuration files you can use the GNU Nano editor. Create a settings file and enter your SQLAlchemy DB URI (you can also override default settings as needed): cp settings_local.py.tmpl settings_local.py # now edit ... vim settings_local.py Note Alternatively, if you want your config elsewhere or with different name: cp settings_local.py.tmpl /my/config/file/somewhere export PYBOSSA_SETTINGS=/my/config/file/somewhere. Create the alembic config file and set the sqlalchemy url to point to your database: cp alembic.ini.template alembic.ini # now set the sqlalchemy.url ... Installing Redis \u00b6 PYBOSSA uses Redis not only for caching objects and speed up the site, but also for limiting the usage of the API requests. You can install the latest Redis version downloading the package directly from its official site site. Since Ubuntu 14.04 you can also, use the internal package: sudo apt-get install redis-server Once you have downloaded it and installed it, you will need to run two instances: Redis-server : as a master node, accepting read and write operations. Redis-sentinel : as a sentinel node, to configure the master and slave Redis nodes. Server \u00b6 If you have installed the server via your distribution package system, then, the server will be running already. If this is not the case, check the official documentation of Redis to configure it and run it. The default values should be OK. Warning Please, make sure that you are running version >= 2.6 Tip If you have installed the software using the source code, then, check the contrib folder, as there is a specific folder for Redis with init.d start scripts. You only have to copy that file to /etc/init.d/ and adapt it to your needs. Sentinel \u00b6 You can run Redis in sentinel mode with the \u2013sentinel arg, or by its command named: redis-sentinel. This will vary from your distribution and version of Redis, so check its help page to know how you can run it. In any case, you will need to run a sentinel node, as PYBOSSA uses it to load-balance the queries, and also to autoconfigure the master and slaves automagically. To run PYBOSSA, you will need first to configure a Sentinel node. Create a config file named sentinel.conf with something like this: sentinel monitor mymaster 127.0.0.1 6379 2 sentinel down-after-milliseconds mymaster 60000 sentinel failover-timeout mymaster 180000 sentinel parallel-syncs mymaster 1 In the contrib folder, you will find a file named sentinel.conf that should be enough to run the sentinel node. Thus, for running it: redis-server contrib/sentinel.conf --sentinel Warning Please, make sure that you are running version >= 2.6 Tip If you have installed the software using the source code, then, check the contrib folder, as there is a specific folder for Redis with init.d start scripts. You only have to copy that file to /etc/init.d/ and adapt it to your needs. Speeding up the site \u00b6 PYBOSSA comes with a cache system that is disabled by default . PYBOSSA uses the Redis server to cache some objects like projects, statistics, etc. The system uses the Sentinel feature of Redis , so you can have several master/slave nodes configured with Sentinel , and your PYBOSSA server will use them \u201cautomagically.\u201d Enabling the cache \u00b6 Once you have started your master Redis-server to accept connections, Sentinel will manage it and its slaves. If you add a slave, Sentinel will find it and start using it for load-balancing queries in PYBOSSA Cache system. For more details about Redis and Sentinel , please, read the official documentation . If you want to disable it, you can do it with an environment variable: export PYBOSSA_REDIS_CACHE_DISABLED = '1' Then start the server, and nothing will be cached. Warning We highly recommend you not to disable the cache, as it will boost the performance of the server caching SQL queries as well as page views. If you have lots of projects with hundreds of tasks, you should enable it. Running asynchronous tasks in the background \u00b6 PYBOSSA uses the Python libraries RQ and RQScheduler to allow slow or computationally-heavy tasks to be run in the background in an asynchronous way. Some of the tasks are run on a periodic, scheduled, basis, like the refreshment of the cache and notifications sent to users, while others, like the sending of emails, are created in real time, responding to events that may happen inside the PYBOSSA server (i.e. sending an email with a recovery password). To allow all this, you will need two additional Python processes to run in the background: the worker and the scheduler . The scheduler will create the periodic tasks while other tasks will be generated dynamically. The worker will process each of them. To run the scheduler, just run the following command in a terminal: rqscheduler --host IP-of-your-redis-master-node Similarly, to get the tasks done by the worker, run: python app_context_rqworker.py scheduled_jobs super high medium low email maintenance We also recommend using supervisor for simply running these processes with a single command. Note PYBOSSA relies on the scheduler and the worker for the normal functioning of the server, so make sure you run both services. Configuring the DataBase \u00b6 You need first to add a user to your PostgreSQL database: sudo su postgres createuser -d -P pybossa Use password tester when prompted. Note You should use the same username that you have used in the settings_local.py and alembic.ini files. After running the last command, you may also have to answer to these questions: Shall the new role be a super user? Answer n (press the n key). Shall the new role be allowed to create databases? Answer y (press the y key). Shall the new role be allowed to create more new roles? Answer n (press the n key). And now, you can create the database: createdb pybossa -O pybossa Finally, exit the postgresql user: exit Then, populate the database with its tables: python cli.py db_create Run the web server: python run.py Open in your web browser the following URL: http://localhost:5000 Updating PYBOSSA \u00b6 PYBOSSA v2.9.0 starts using JSONB data type format within the PostgreSQL database. The upgrade should not break anything, but be aware that all the materalized views will need to be dropped. This is required because some of these views use the info field and we cannot migrate to JSONB without recreating them. Thus, be sure to take a full backup before upgrading of your database. Then, delete all your materialized views that create a conflict (by default PYBOSSA handles the basic ones, but if you have created your own leaderboards, this will not be handled by the script). Run the migration (see next section) and re-create your materialized views. Most of these views are automatically handled by the background jobs, so all of them should be recreated by the system without your intervention. Updating PYBOSSA core and migrating the database table structure \u00b6 Sometimes, the PYBOSSA developers add a new column or table to the PYBOSSA server, forcing you to carry out a migration of the database. PYBOSSA uses Alembic for performing the migrations, so in case that your production server needs to upgrade the DB structure to a new version, all you have to do is to: git pull origin master pip install -U pip pip install -U -r requirements.txt alembic upgrade head The first command will get you the latest source code. The second command updates the libraries. Finally, Alembic upgrades the database structure. Very occasionally, updates to the core system will also be required. For example, updating pybossa.js in your PYBOSSA theme. To update the default theme, you can do this: cd home/pybossa/pybossa/themes/default git pull origin master Note If you are using the virtualenv be sure to activate it before running the Alembic upgrade command. Migrating Your Old DB Records \u00b6 In versions before v0.2.3, the default supported option for the \u2018long_description\u2019 field in projects was HTML. In new versions of PYBOSSA, the default option is Markdown. However, you can use HTML instead of Markdown by modifying the default PYBOSSA theme or using your own forked from the default one. If you were have been using PYBOSSA for a while you might have projects in your database whose \u2018long_description\u2019 is in HTML format. Hence, if you are using the default theme for PYBOSSA, you will no longer see them rendered as HTML and may have some issues. To avoid this, you can run a simple script to convert all the DB project\u2019s \u2018long_description\u2019 field from HTML to Markdown, just by running the following commands: pip install -U pip pip install -U -r requirements.txt python cli.py markdown_db_migrate The first command will install a Python package that will handle the HTML to Markdown conversion, while the second one will convert your DB entries. Note As always, if you are using the virtualenv be sure to activate it before running the pip install command. Note The latest version of PYBOSSA requires PostgreSQL >= 9.3 as it is using materialized views for the dashboard. This feature is only available from PostgreSQL 9.3, so please upgrade the DB as soon as possible. For more information about upgrading the PostgreSQL database check this page .","title":"Installing the server"},{"location":"installation/guide/#setting-things-up","text":"Before proceeding to install PYBOSSA, you will need to configure some other applications and libraries in your system. In this page, you will get a step by step guide on how to install all the required packages and libraries for PYBOSSA using the latest Ubuntu Server Long Term Support version available at the moment: Ubuntu 20.04 LTS PYBOSSA hosted servers Checkout Scifabric\u2019s hosted PYBOSSA servers .","title":"Setting things up"},{"location":"installation/guide/#installing-git-a-distributed-version-control-system","text":"PYBOSSA uses the git distributed version control system for handling the PYBOSSA server source code as well as the template projects. Git is a free and open source distributed version control system designed to handle everything from small to extensive projects with speed and efficiency. To install the software, all you have to do is: sudo apt-get install git","title":"Installing git - a distributed version control system"},{"location":"installation/guide/#installing-the-postgresql-database","text":"PostgreSQL is a powerful, open source object-relational database system. It has more than 15 years of active development and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness. PYBOSSA uses PostgreSQL as the main database for storing all the data. To install it follow the next steps: sudo apt-get install postgresql postgresql-server-dev-all libpq-dev python3-psycopg2 libsasl2-dev libldap2-dev libssl-dev python3-dev","title":"Installing the PostgreSQL database"},{"location":"installation/guide/#installing-virtualenv-optional-but-recommended","text":"We recommend installing PYBOSSA using a virtualenv as it will create a an isolated Python environment, helping you to manage different dependencies and versions without having to deal with root permissions in your server machine. virtualenv creates an environment that has its installation directories that doesn\u2019t share libraries with other virtualenv environments (and optionally doesn\u2019t access the globally installed libraries either). You can install the software if you want at the system level if you have root privileges; however, this may lead to broken dependencies in the OS for all your Python packages, so if possible, avoid this solution and use the [virtualenv] http://pypi.python.org/pypi/virtualenv ) solution. Installing virtualenv in the Ubuntu server: sudo apt-get install python3-venv After installing the software you will be able to create independent virtual environments for the PYBOSSA installation as well as for the template projects.","title":"Installing virtualenv (optional, but recommended)"},{"location":"installation/guide/#installing-the-pybossa-python-requirements","text":"Installing the required libraries for PYBOSSA is a step that will need to use some compilers and dev libraries to work. Thus, you will need to install the following packages: sudo apt-get install python-dev build-essential libjpeg-dev libssl-dev libffi-dev sudo apt-get install dbus libdbus-1-dev libdbus-glib-1-dev libldap2-dev libsasl2-dev Then, you are ready to download the code and install the required libraries for running PYBOSSA. Note We recommend you to install the required libraries using a virtual environment with the command virtualenv (you can install the package python-virtualenv). This will allow having all the libraries for PYBOSSA in one folder of your choice, so cleaning the installation would be as simple as deleting that folder without affecting your system. Note You might need to use pyenv to install a python 3.6 version in order to run the right version. Please check the official documentation of pyenv. If you decide to use a virtualenv then, follow these steps (lines starting with # are comments): # get the source code git clone --recursive https://github.com/Scifabric/pybossa # Access the source code folder cd pybossa python3 -mvenv env # Activate the virtual environment source env/bin/activate # Upgrade pip to latest version pip install -U pip # Install the required libraries pip install -r requirements.txt Otherwise, you should be able to install the libraries in your system like this: # get the source git clone --recursive https://github.com/Scifabric/pybossa # Access the source code folder cd pybossa # Upgrade pip to latest version pip install -U pip # Install the required libraries pip install -r requirements.txt Note Vim editor is a very popular text editor for GNU/Linux systems, however, it may be difficult for some people if you have never used it before. Thus, if you want to try another and much simpler editor for editing the configuration files you can use the GNU Nano editor. Create a settings file and enter your SQLAlchemy DB URI (you can also override default settings as needed): cp settings_local.py.tmpl settings_local.py # now edit ... vim settings_local.py Note Alternatively, if you want your config elsewhere or with different name: cp settings_local.py.tmpl /my/config/file/somewhere export PYBOSSA_SETTINGS=/my/config/file/somewhere. Create the alembic config file and set the sqlalchemy url to point to your database: cp alembic.ini.template alembic.ini # now set the sqlalchemy.url ...","title":"Installing the PYBOSSA Python requirements"},{"location":"installation/guide/#installing-redis","text":"PYBOSSA uses Redis not only for caching objects and speed up the site, but also for limiting the usage of the API requests. You can install the latest Redis version downloading the package directly from its official site site. Since Ubuntu 14.04 you can also, use the internal package: sudo apt-get install redis-server Once you have downloaded it and installed it, you will need to run two instances: Redis-server : as a master node, accepting read and write operations. Redis-sentinel : as a sentinel node, to configure the master and slave Redis nodes.","title":"Installing Redis"},{"location":"installation/guide/#server","text":"If you have installed the server via your distribution package system, then, the server will be running already. If this is not the case, check the official documentation of Redis to configure it and run it. The default values should be OK. Warning Please, make sure that you are running version >= 2.6 Tip If you have installed the software using the source code, then, check the contrib folder, as there is a specific folder for Redis with init.d start scripts. You only have to copy that file to /etc/init.d/ and adapt it to your needs.","title":"Server"},{"location":"installation/guide/#sentinel","text":"You can run Redis in sentinel mode with the \u2013sentinel arg, or by its command named: redis-sentinel. This will vary from your distribution and version of Redis, so check its help page to know how you can run it. In any case, you will need to run a sentinel node, as PYBOSSA uses it to load-balance the queries, and also to autoconfigure the master and slaves automagically. To run PYBOSSA, you will need first to configure a Sentinel node. Create a config file named sentinel.conf with something like this: sentinel monitor mymaster 127.0.0.1 6379 2 sentinel down-after-milliseconds mymaster 60000 sentinel failover-timeout mymaster 180000 sentinel parallel-syncs mymaster 1 In the contrib folder, you will find a file named sentinel.conf that should be enough to run the sentinel node. Thus, for running it: redis-server contrib/sentinel.conf --sentinel Warning Please, make sure that you are running version >= 2.6 Tip If you have installed the software using the source code, then, check the contrib folder, as there is a specific folder for Redis with init.d start scripts. You only have to copy that file to /etc/init.d/ and adapt it to your needs.","title":"Sentinel"},{"location":"installation/guide/#speeding-up-the-site","text":"PYBOSSA comes with a cache system that is disabled by default . PYBOSSA uses the Redis server to cache some objects like projects, statistics, etc. The system uses the Sentinel feature of Redis , so you can have several master/slave nodes configured with Sentinel , and your PYBOSSA server will use them \u201cautomagically.\u201d","title":"Speeding up the site"},{"location":"installation/guide/#enabling-the-cache","text":"Once you have started your master Redis-server to accept connections, Sentinel will manage it and its slaves. If you add a slave, Sentinel will find it and start using it for load-balancing queries in PYBOSSA Cache system. For more details about Redis and Sentinel , please, read the official documentation . If you want to disable it, you can do it with an environment variable: export PYBOSSA_REDIS_CACHE_DISABLED = '1' Then start the server, and nothing will be cached. Warning We highly recommend you not to disable the cache, as it will boost the performance of the server caching SQL queries as well as page views. If you have lots of projects with hundreds of tasks, you should enable it.","title":"Enabling the cache"},{"location":"installation/guide/#running-asynchronous-tasks-in-the-background","text":"PYBOSSA uses the Python libraries RQ and RQScheduler to allow slow or computationally-heavy tasks to be run in the background in an asynchronous way. Some of the tasks are run on a periodic, scheduled, basis, like the refreshment of the cache and notifications sent to users, while others, like the sending of emails, are created in real time, responding to events that may happen inside the PYBOSSA server (i.e. sending an email with a recovery password). To allow all this, you will need two additional Python processes to run in the background: the worker and the scheduler . The scheduler will create the periodic tasks while other tasks will be generated dynamically. The worker will process each of them. To run the scheduler, just run the following command in a terminal: rqscheduler --host IP-of-your-redis-master-node Similarly, to get the tasks done by the worker, run: python app_context_rqworker.py scheduled_jobs super high medium low email maintenance We also recommend using supervisor for simply running these processes with a single command. Note PYBOSSA relies on the scheduler and the worker for the normal functioning of the server, so make sure you run both services.","title":"Running asynchronous tasks in the background"},{"location":"installation/guide/#configuring-the-database","text":"You need first to add a user to your PostgreSQL database: sudo su postgres createuser -d -P pybossa Use password tester when prompted. Note You should use the same username that you have used in the settings_local.py and alembic.ini files. After running the last command, you may also have to answer to these questions: Shall the new role be a super user? Answer n (press the n key). Shall the new role be allowed to create databases? Answer y (press the y key). Shall the new role be allowed to create more new roles? Answer n (press the n key). And now, you can create the database: createdb pybossa -O pybossa Finally, exit the postgresql user: exit Then, populate the database with its tables: python cli.py db_create Run the web server: python run.py Open in your web browser the following URL: http://localhost:5000","title":"Configuring the DataBase"},{"location":"installation/guide/#updating-pybossa","text":"PYBOSSA v2.9.0 starts using JSONB data type format within the PostgreSQL database. The upgrade should not break anything, but be aware that all the materalized views will need to be dropped. This is required because some of these views use the info field and we cannot migrate to JSONB without recreating them. Thus, be sure to take a full backup before upgrading of your database. Then, delete all your materialized views that create a conflict (by default PYBOSSA handles the basic ones, but if you have created your own leaderboards, this will not be handled by the script). Run the migration (see next section) and re-create your materialized views. Most of these views are automatically handled by the background jobs, so all of them should be recreated by the system without your intervention.","title":"Updating PYBOSSA"},{"location":"installation/guide/#updating-pybossa-core-and-migrating-the-database-table-structure","text":"Sometimes, the PYBOSSA developers add a new column or table to the PYBOSSA server, forcing you to carry out a migration of the database. PYBOSSA uses Alembic for performing the migrations, so in case that your production server needs to upgrade the DB structure to a new version, all you have to do is to: git pull origin master pip install -U pip pip install -U -r requirements.txt alembic upgrade head The first command will get you the latest source code. The second command updates the libraries. Finally, Alembic upgrades the database structure. Very occasionally, updates to the core system will also be required. For example, updating pybossa.js in your PYBOSSA theme. To update the default theme, you can do this: cd home/pybossa/pybossa/themes/default git pull origin master Note If you are using the virtualenv be sure to activate it before running the Alembic upgrade command.","title":"Updating PYBOSSA core and migrating the database table structure"},{"location":"installation/guide/#migrating-your-old-db-records","text":"In versions before v0.2.3, the default supported option for the \u2018long_description\u2019 field in projects was HTML. In new versions of PYBOSSA, the default option is Markdown. However, you can use HTML instead of Markdown by modifying the default PYBOSSA theme or using your own forked from the default one. If you were have been using PYBOSSA for a while you might have projects in your database whose \u2018long_description\u2019 is in HTML format. Hence, if you are using the default theme for PYBOSSA, you will no longer see them rendered as HTML and may have some issues. To avoid this, you can run a simple script to convert all the DB project\u2019s \u2018long_description\u2019 field from HTML to Markdown, just by running the following commands: pip install -U pip pip install -U -r requirements.txt python cli.py markdown_db_migrate The first command will install a Python package that will handle the HTML to Markdown conversion, while the second one will convert your DB entries. Note As always, if you are using the virtualenv be sure to activate it before running the pip install command. Note The latest version of PYBOSSA requires PostgreSQL >= 9.3 as it is using materialized views for the dashboard. This feature is only available from PostgreSQL 9.3, so please upgrade the DB as soon as possible. For more information about upgrading the PostgreSQL database check this page .","title":"Migrating Your Old DB Records"},{"location":"installation/importers/","text":"Importer interface \u00b6 Task importers are currently located in importers.py; each gets a class, which should inherit from BulkTaskImport and provide the following public interface: importer_id tasks() count_tasks() import_metadata() importer_id is the name of the importer; any of the supported importers: \u2018csv\u2019, \u2018gdocs\u2019, \u2018epicollect\u2019, \u2018flickr\u2019, \u2018dropbox\u2019, \u2018twitter\u2019, \u2018s3\u2019, \u2018youtube\u2019 and \u2018iiif. tasks () should generate a list of tasks. count_tasks () should return the number of tasks that will be created. This is because trying to import a large number of tasks (200 or more) will be done as a background job. `#!python import_metadata()``` may return any information about the tasks that are going to be imported. This is used for the autoimporters, and the information returned by this method is stored and available to be used by the next autoimport execution. These classes are intended for private use within the importers.py module. New ones can be created here to handle different kind of importing mechanisms. The module exposes the public class Importer, which will be the one resposible for actually do the job of importing tasks, by using their public methods: create_tasks count_tasks_to_import get_all_importer_names get_autoimporter_names create_importer takes as arguments task_repo, project_id, importer_id, and form_data. task_repo is a TaskRepository object that will handle the store of the created Tasks. project_id, the id of the project to which the tasks belong. importer_id being the name of the importer, like described above. Finally, form_data will be a dictionary with the importer-specific form data (e.g. the googledocs_url for a gdocs importer). count_tasks_to_import takes as arguments the importer_id and **form_data, and will return, before creating any task, the number of tasks that will be imported from the source. This is used for instance for deciding whether to import the tasks in a synchronous or an asynchronous way, depending on the amount of them. get_all_importer_names returns a list of all the available importers. This list may vary depending on the configuration of the server (e.g. if no API key for integration with the Flickr service is found, then the Flickr importer won\u2019t be available). get_autoimporter_names returns a list of the available importers for using as autoimport background jobs. Again, this list may vary depending on the server configuration.","title":"Importer interface"},{"location":"installation/importers/#importer-interface","text":"Task importers are currently located in importers.py; each gets a class, which should inherit from BulkTaskImport and provide the following public interface: importer_id tasks() count_tasks() import_metadata() importer_id is the name of the importer; any of the supported importers: \u2018csv\u2019, \u2018gdocs\u2019, \u2018epicollect\u2019, \u2018flickr\u2019, \u2018dropbox\u2019, \u2018twitter\u2019, \u2018s3\u2019, \u2018youtube\u2019 and \u2018iiif. tasks () should generate a list of tasks. count_tasks () should return the number of tasks that will be created. This is because trying to import a large number of tasks (200 or more) will be done as a background job. `#!python import_metadata()``` may return any information about the tasks that are going to be imported. This is used for the autoimporters, and the information returned by this method is stored and available to be used by the next autoimport execution. These classes are intended for private use within the importers.py module. New ones can be created here to handle different kind of importing mechanisms. The module exposes the public class Importer, which will be the one resposible for actually do the job of importing tasks, by using their public methods: create_tasks count_tasks_to_import get_all_importer_names get_autoimporter_names create_importer takes as arguments task_repo, project_id, importer_id, and form_data. task_repo is a TaskRepository object that will handle the store of the created Tasks. project_id, the id of the project to which the tasks belong. importer_id being the name of the importer, like described above. Finally, form_data will be a dictionary with the importer-specific form data (e.g. the googledocs_url for a gdocs importer). count_tasks_to_import takes as arguments the importer_id and **form_data, and will return, before creating any task, the number of tasks that will be imported from the source. This is used for instance for deciding whether to import the tasks in a synchronous or an asynchronous way, depending on the amount of them. get_all_importer_names returns a list of all the available importers. This list may vary depending on the configuration of the server (e.g. if no API key for integration with the Flickr service is found, then the Flickr importer won\u2019t be available). get_autoimporter_names returns a list of the available importers for using as autoimport background jobs. Again, this list may vary depending on the server configuration.","title":"Importer interface"},{"location":"installation/installing_pybossa/","text":"Install your own PYBOSSA server \u00b6 This section covers how you can install, configure and deploy a PYBOSSA server for your company, organization or institution using a GNU/Linux server. Testing PYBOSSA with Vagrant Installing PYBOSSA by hand Deploying PYBOSSA with nginx and uwsgi Configuring PYBOSSA Administrating PYBOSSA Writing plugins for a PYBOSSA server","title":"Installing pybossa"},{"location":"installation/installing_pybossa/#install-your-own-pybossa-server","text":"This section covers how you can install, configure and deploy a PYBOSSA server for your company, organization or institution using a GNU/Linux server. Testing PYBOSSA with Vagrant Installing PYBOSSA by hand Deploying PYBOSSA with nginx and uwsgi Configuring PYBOSSA Administrating PYBOSSA Writing plugins for a PYBOSSA server","title":"Install your own PYBOSSA server"},{"location":"installation/intro/","text":"Background \u00b6","title":"Background"},{"location":"installation/intro/#background","text":"","title":"Background"},{"location":"installation/plugins/","text":"Writing plugins for a PYBOSSA server \u00b6 PYBOSSA has a plugin system that allows you to write your own custom features and add them to a running PYBOSSA server without the need of touching the server code. For instance, you could create a new endpoint for an admin dashboard (with new views, templates, etc.) or build a new scheduler like in this example . The PYBOSSA plugin system is powered by Flask-plugins To create a plugin, you will have to make a folder with the name of your plugin and add it to the plugins folder in your PYBOSSA server. If you have the PYBOSSA code in a directory called pybossa, then the plugins folder will be pybossa/pybossa/plugins. The least you need to include in that folder is the following: 1 2 3 your_plugin_folder |-- info.json |-- __init__.py flask.ext.plugins.Plugin. On the other hand, info.json needs to follow the schema: { \"identifier\" : \"identifier\" , \"name\" : \"PluginClass\" , \"author\" : \"you@yourdomain.com\" , \"license\" : \"AGPLv3\" , \"description\" : \"whatever\" , \"version\" : \"0.0.1\" } You could also create a more sofisticated plugin, including your own templates, models, forms\u2026 everything you need: 1 2 3 4 5 6 7 8 9 10 11 your_plugin_folder |-- info.json Contains the Plugin's metadata |-- license.txt The full license text of your plugin |-- __init__.py The plugin's main class is located here |-- views.py |-- models.py |-- forms.py |-- static | |-- style.css |-- templates |-- myplugin.html For more information and examples, please refer to the Flask-plugins documentation .","title":"Writing plugins for a PYBOSSA server"},{"location":"installation/plugins/#writing-plugins-for-a-pybossa-server","text":"PYBOSSA has a plugin system that allows you to write your own custom features and add them to a running PYBOSSA server without the need of touching the server code. For instance, you could create a new endpoint for an admin dashboard (with new views, templates, etc.) or build a new scheduler like in this example . The PYBOSSA plugin system is powered by Flask-plugins To create a plugin, you will have to make a folder with the name of your plugin and add it to the plugins folder in your PYBOSSA server. If you have the PYBOSSA code in a directory called pybossa, then the plugins folder will be pybossa/pybossa/plugins. The least you need to include in that folder is the following: 1 2 3 your_plugin_folder |-- info.json |-- __init__.py flask.ext.plugins.Plugin. On the other hand, info.json needs to follow the schema: { \"identifier\" : \"identifier\" , \"name\" : \"PluginClass\" , \"author\" : \"you@yourdomain.com\" , \"license\" : \"AGPLv3\" , \"description\" : \"whatever\" , \"version\" : \"0.0.1\" } You could also create a more sofisticated plugin, including your own templates, models, forms\u2026 everything you need: 1 2 3 4 5 6 7 8 9 10 11 your_plugin_folder |-- info.json Contains the Plugin's metadata |-- license.txt The full license text of your plugin |-- __init__.py The plugin's main class is located here |-- views.py |-- models.py |-- forms.py |-- static | |-- style.css |-- templates |-- myplugin.html For more information and examples, please refer to the Flask-plugins documentation .","title":"Writing plugins for a PYBOSSA server"},{"location":"installation/security/","text":"The installation gives you a step by step guide. However, it is your responsibility to secure the server following the standard Linux security guidelines that you should know before going live with your project. We would recommend you to follow some of the following links: Linux Security Best Practices * Rackspace Linux Server Best Practices Linux Security Note Some of these links might not work because the owners would change them, or even remove them. PYBOSSA server security \u00b6 Use always an unprivileged user to run PYBOSSA. Also, add secure passwords in all the variables, as this will be key to ensure that your signatures cannot be broken easily. Redis and Sentinel \u00b6 To secure these services, read the official documentation . PostgreSQL \u00b6 To secure the database, read the official documentation . Data security \u00b6 PYBOSSA keeps everything private for anonymous users unless you specify in the settings_local.py file fields that you want to disclose. PYBOSSA can store any information within the info field of the following domain objects: Announcement. Blogpost. Category. Helpingmaterial, Page, Project, and User. Announcement \u00b6 PYBOSSA includes the following fields in a GET API call: created updated id user_id title body media_url published info From info, everything is public for users that are anonymous or are not the owner of the announcement. Blogpost \u00b6 PYBOSSA includes the following fields in a GET API call: created updated project_id id user_id title body media_url published info From info, everything is public for users that are anonymous or are not the owner of the blogpost. Category \u00b6 PYBOSSA includes the following fields in a GET API call: description short_name created id name info From info, everything is public for users that are anonymous or are not the owner of the category. Helpingmaterial \u00b6 PYBOSSA includes the following fields in a GET API call: created id info media_url priority From info, everything is public for users that are anonymous or are not the owner of the helpingmaterial. Page \u00b6 PYBOSSA includes the following fields in a GET API call: created id info media_url slug From info, everything is public for users that are anonymous or are not the owner of the page. Project \u00b6 PYBOSSA includes the following fields in a GET API call: id description info n_tasks n_volunteers name overall_progress short_name created category_id long_description last_activity last_activity_raw n_task_runs n_results owner updated featured owner_id n_completed_tasks n_blogposts owners_ids From info, only the following items are public: * container * thumbnail * thumbnail_url * task_presenter * tutorial * sched Any other key will be private except for the owner or an admin. If you want to add more keys, just use the following flag in the settings_local.py file: PROJECT_INFO_PUBLIC_FIELDS = [ 'key1' , 'key2' , .. , 'keyN' ] User \u00b6 PYBOSSA includes the following fields in a GET API call: created name fullname info n_answers registered_ago rank score locale From info, only the following items are public: avatar container extra avatar_url Any other key will be private except for the owner or an admin. If you want to add more keys, just use the following flag in the settings_local.py file: USER_INFO_PUBLIC_FIELDS = [ 'key1' , 'key2' , .. , 'keyN' ]","title":"Security"},{"location":"installation/security/#pybossa-server-security","text":"Use always an unprivileged user to run PYBOSSA. Also, add secure passwords in all the variables, as this will be key to ensure that your signatures cannot be broken easily.","title":"PYBOSSA server security"},{"location":"installation/security/#redis-and-sentinel","text":"To secure these services, read the official documentation .","title":"Redis and Sentinel"},{"location":"installation/security/#postgresql","text":"To secure the database, read the official documentation .","title":"PostgreSQL"},{"location":"installation/security/#data-security","text":"PYBOSSA keeps everything private for anonymous users unless you specify in the settings_local.py file fields that you want to disclose. PYBOSSA can store any information within the info field of the following domain objects: Announcement. Blogpost. Category. Helpingmaterial, Page, Project, and User.","title":"Data security"},{"location":"installation/security/#announcement","text":"PYBOSSA includes the following fields in a GET API call: created updated id user_id title body media_url published info From info, everything is public for users that are anonymous or are not the owner of the announcement.","title":"Announcement"},{"location":"installation/security/#blogpost","text":"PYBOSSA includes the following fields in a GET API call: created updated project_id id user_id title body media_url published info From info, everything is public for users that are anonymous or are not the owner of the blogpost.","title":"Blogpost"},{"location":"installation/security/#category","text":"PYBOSSA includes the following fields in a GET API call: description short_name created id name info From info, everything is public for users that are anonymous or are not the owner of the category.","title":"Category"},{"location":"installation/security/#helpingmaterial","text":"PYBOSSA includes the following fields in a GET API call: created id info media_url priority From info, everything is public for users that are anonymous or are not the owner of the helpingmaterial.","title":"Helpingmaterial"},{"location":"installation/security/#page","text":"PYBOSSA includes the following fields in a GET API call: created id info media_url slug From info, everything is public for users that are anonymous or are not the owner of the page.","title":"Page"},{"location":"installation/security/#project","text":"PYBOSSA includes the following fields in a GET API call: id description info n_tasks n_volunteers name overall_progress short_name created category_id long_description last_activity last_activity_raw n_task_runs n_results owner updated featured owner_id n_completed_tasks n_blogposts owners_ids From info, only the following items are public: * container * thumbnail * thumbnail_url * task_presenter * tutorial * sched Any other key will be private except for the owner or an admin. If you want to add more keys, just use the following flag in the settings_local.py file: PROJECT_INFO_PUBLIC_FIELDS = [ 'key1' , 'key2' , .. , 'keyN' ]","title":"Project"},{"location":"installation/security/#user","text":"PYBOSSA includes the following fields in a GET API call: created name fullname info n_answers registered_ago rank score locale From info, only the following items are public: avatar container extra avatar_url Any other key will be private except for the owner or an admin. If you want to add more keys, just use the following flag in the settings_local.py file: USER_INFO_PUBLIC_FIELDS = [ 'key1' , 'key2' , .. , 'keyN' ]","title":"User"},{"location":"installation/vagrant/","text":"Testing PYBOSSA with Vagrant \u00b6 Vagrant is an open source solution that allows you to create and configure lightweight, reproducible, and portable development environments. Vagrant simplifies a lot setting up all the requirements for a web application like PYBOSSA, as you will set up a virtual machine that automagically downloads all the required libraries and dependencies for developing and testing the project. For these reasons, PYBOSSA uses Vagrant to allow you to start effortlessly hacking the system, and more importantly, without polluting your system with lots of libraries that you may or may not needed (everything is configured in the Virtual Machine, which is a very safe sand-box!). Additionally, several cloud companies have integration with Vagrant, so deploying a PYBOSSA server is simple using this method. Warning The virtual machine and server have a basic security set of rules (passwords, secrets, firewall, etc.). Therefore, if you are going to use this method to deploy a PYBOSSA production server it is your responsibility to secure the system properly . Setting up PYBOSSA with Vagrant \u00b6 To start using Vagrant and PYBOSSA all you have to do is installing the following open source software: VirtualBox (min version 4.2.10) Vagrant (min version 1.2.1) Note Vagrant and VirtualBox works in Windows, GNU/Linux, and Mac OS X, so you can try and run PYBOSSA without problems! Clone the PYBOSSA git repository (be sure to install git in your machine!): git clone --recursive https://github.com/Scifabric/pybossa.git Once you have downloaded the source code, all you have to do to start your PYBOSSA development environment is typing the following in a terminal: cd pybossa vagrant up The system will download a Virtual Machine, install all the required libraries for PYBOSSA and set up the system for you inside the virtual machine. Vagrant is great because all the changes that you will make in your local copy of PYBOSSA will be automatically populated to the Virtual Machine. Hence, if you add a new feature to the system, you will be able to test it right away (this feature is pretty handy for workshops, hackfests, etc.). Note If you don\u2019t have enough space in your hard disk, Vagrant will fail to set up the virtual machine. For solving this issue just, modify the VirtualBox path to point to a partition or disk that has enough space. You can then manually change it with this command: VBoxManage setproperty machinefolder to/new/path Running the PYBOSSA server \u00b6 Now that all the libraries and dependencies have been installed, you can lunch the PYBOSSA development server: vagrant ssh python run.py Note Virtualenv (located in /home/vagrant/pybossa-env) is always activated on login. Now all you have to do is open the following URL in your web browser: http://127.0.0.1:5000 And you are done! Happy Hacking ! Note PYBOSSA needs a RQ worker process. It is running by default permanently in the background in the VM and is controlled by supervisor. Optional is also the RQ scheduler process for speeding up tasks like ZIP creation. This process is off by default now. If you are developing on RQ worker, you want to restart or disable it with supervisorctl.","title":"Testing PYBOSSA with Vagrant"},{"location":"installation/vagrant/#testing-pybossa-with-vagrant","text":"Vagrant is an open source solution that allows you to create and configure lightweight, reproducible, and portable development environments. Vagrant simplifies a lot setting up all the requirements for a web application like PYBOSSA, as you will set up a virtual machine that automagically downloads all the required libraries and dependencies for developing and testing the project. For these reasons, PYBOSSA uses Vagrant to allow you to start effortlessly hacking the system, and more importantly, without polluting your system with lots of libraries that you may or may not needed (everything is configured in the Virtual Machine, which is a very safe sand-box!). Additionally, several cloud companies have integration with Vagrant, so deploying a PYBOSSA server is simple using this method. Warning The virtual machine and server have a basic security set of rules (passwords, secrets, firewall, etc.). Therefore, if you are going to use this method to deploy a PYBOSSA production server it is your responsibility to secure the system properly .","title":"Testing PYBOSSA with Vagrant"},{"location":"installation/vagrant/#setting-up-pybossa-with-vagrant","text":"To start using Vagrant and PYBOSSA all you have to do is installing the following open source software: VirtualBox (min version 4.2.10) Vagrant (min version 1.2.1) Note Vagrant and VirtualBox works in Windows, GNU/Linux, and Mac OS X, so you can try and run PYBOSSA without problems! Clone the PYBOSSA git repository (be sure to install git in your machine!): git clone --recursive https://github.com/Scifabric/pybossa.git Once you have downloaded the source code, all you have to do to start your PYBOSSA development environment is typing the following in a terminal: cd pybossa vagrant up The system will download a Virtual Machine, install all the required libraries for PYBOSSA and set up the system for you inside the virtual machine. Vagrant is great because all the changes that you will make in your local copy of PYBOSSA will be automatically populated to the Virtual Machine. Hence, if you add a new feature to the system, you will be able to test it right away (this feature is pretty handy for workshops, hackfests, etc.). Note If you don\u2019t have enough space in your hard disk, Vagrant will fail to set up the virtual machine. For solving this issue just, modify the VirtualBox path to point to a partition or disk that has enough space. You can then manually change it with this command: VBoxManage setproperty machinefolder to/new/path","title":"Setting up PYBOSSA with Vagrant"},{"location":"installation/vagrant/#running-the-pybossa-server","text":"Now that all the libraries and dependencies have been installed, you can lunch the PYBOSSA development server: vagrant ssh python run.py Note Virtualenv (located in /home/vagrant/pybossa-env) is always activated on login. Now all you have to do is open the following URL in your web browser: http://127.0.0.1:5000 And you are done! Happy Hacking ! Note PYBOSSA needs a RQ worker process. It is running by default permanently in the background in the VM and is controlled by supervisor. Optional is also the RQ scheduler process for speeding up tasks like ZIP creation. This process is off by default now. If you are developing on RQ worker, you want to restart or disable it with supervisorctl.","title":"Running the PYBOSSA server"},{"location":"projects/amphora/","text":"How do I open this page? Admin rights are required to access this page.","title":"Amphora"},{"location":"projects/atchana/","text":"How do I open this page? Admin rights are required to access this page.","title":"Atchana"},{"location":"projects/audio/","text":"How do I open this page? Admin rights are required to access this page.","title":"Audio transcription"},{"location":"projects/bai/","text":"The Bronze Age Index transcription project was the MicroPasts flagship project that was originally the foundation for our grant being funded. This project enabled the transcription of 30,000 index cards, which recorded the discovery of Bronze Age metalwork (mainly from the UK) and was stored at the British Museum\u2019s Orsman Road facility. These cards were scanned by Dr Jennifer Wexler over the course of a year and the project was quite simple. You have two quick methods available to you for adding this project to the system. Through the point and click interface system Through the creation of code and pushing to the system via PBS How do I open this page? You must be registered to access these functions. Interface deployment \u00b6 PBS deployment \u00b6 Importing tasks \u00b6 Extracting data \u00b6 What does this produce? \u00b6","title":"Bronze Age Index"},{"location":"projects/bai/#interface-deployment","text":"","title":"Interface deployment"},{"location":"projects/bai/#pbs-deployment","text":"","title":"PBS deployment"},{"location":"projects/bai/#importing-tasks","text":"","title":"Importing tasks"},{"location":"projects/bai/#extracting-data","text":"","title":"Extracting data"},{"location":"projects/bai/#what-does-this-produce","text":"","title":"What does this produce?"},{"location":"projects/creating-a-new-project/","text":"Before you begin, you need to remember several things about PYBOSSA. No assets are stored within the platform Your images or files that you want people to work on, must be accessible on an http link How do I open these pages? You must be registered to access these pages. To create a new project, you have three options: Create a new project from scratch using Github and PBS Create a new project from a template Create directly from the interface Below, we will run through each method: Create a new project from scratch using Github and PBS \u00b6 This is very well documented by the original PYBOSSA documentation Example projects that have been generated using this method can be found on our Github profile. Horsfield archive tagging Middle East Postcards, British Museum Each of these repos has the code structure ready to deploy. If you want to use this method, try to replicate this structure, or create a repo from the template found at: https://github.com/MicroPasts/MicroPasts-PBS-template Create a new project from a template \u00b6 Currently within the MicroPasts framework, we have the following template projects, which you could use for the basis of creating your own code. Each of these can be accessed by click and deploy methods from the PYBOSSA interfaces. Templates available \u00b6 A basic template for customisation Template code Archaeological record index transcription from the Montpelier Foundation, USA Template code Photomasking to enable 3d models to be made in Agisoft Metashape Template code Phototagging using the Annotorious framework Template code Audio transcription from mp3 recordings Template code Bronze Age axe outlines for morphological analysis Template code PDF manipulation Bronze Age card index transcription (with geocoding) Template code Transcription of Egyptian Exploration Society donor registers Template code A basic sound recognition template Template code A IIIF manifest based transcription task from Cambridge Digital Library Template code So how do I use these? To use these you will need to: 1. Either register or login to your account 2. Go to https://crowdsourced.micropasts.org/project/new 3. Follow the steps below! I would like another template to be added, is this possible? Yes, once you have a template either from method 1 or method 2 , let the project team know and we\u2019ll add it, or if you\u2019re okay with github, create a pull request based on the tutorial for adding a snippet. Create directly from the interface \u00b6","title":"Creating a new project"},{"location":"projects/creating-a-new-project/#create-a-new-project-from-scratch-using-github-and-pbs","text":"This is very well documented by the original PYBOSSA documentation Example projects that have been generated using this method can be found on our Github profile. Horsfield archive tagging Middle East Postcards, British Museum Each of these repos has the code structure ready to deploy. If you want to use this method, try to replicate this structure, or create a repo from the template found at: https://github.com/MicroPasts/MicroPasts-PBS-template","title":"Create a new project from scratch using Github and PBS"},{"location":"projects/creating-a-new-project/#create-a-new-project-from-a-template","text":"Currently within the MicroPasts framework, we have the following template projects, which you could use for the basis of creating your own code. Each of these can be accessed by click and deploy methods from the PYBOSSA interfaces.","title":"Create a new project from a template"},{"location":"projects/creating-a-new-project/#templates-available","text":"A basic template for customisation Template code Archaeological record index transcription from the Montpelier Foundation, USA Template code Photomasking to enable 3d models to be made in Agisoft Metashape Template code Phototagging using the Annotorious framework Template code Audio transcription from mp3 recordings Template code Bronze Age axe outlines for morphological analysis Template code PDF manipulation Bronze Age card index transcription (with geocoding) Template code Transcription of Egyptian Exploration Society donor registers Template code A basic sound recognition template Template code A IIIF manifest based transcription task from Cambridge Digital Library Template code So how do I use these? To use these you will need to: 1. Either register or login to your account 2. Go to https://crowdsourced.micropasts.org/project/new 3. Follow the steps below! I would like another template to be added, is this possible? Yes, once you have a template either from method 1 or method 2 , let the project team know and we\u2019ll add it, or if you\u2019re okay with github, create a pull request based on the tutorial for adding a snippet.","title":"Templates available"},{"location":"projects/creating-a-new-project/#create-directly-from-the-interface","text":"","title":"Create directly from the interface "},{"location":"projects/cudl/","text":"The University Library has a Github based transcription exercise using its IIIF manifests and images of the Oliver Rackham diaries . A simple demo of how this could be done in MicroPasts was built in about 10 minutes during a CDH Methods Fellows Show and Tell. Pre-requisites for set up \u00b6 Register on the platform Have access to a Rackham diary in valid IIIF format and the url for the manifest In the above pre-requisites, the word VALID is really important; at the time of writing the UL\u2019s IIIF manifests have invalid character, attributes and tags in their markup - specifically for abstract description Due to this, the IIIF validator will say no and the import of data will fail. The below is an example element with invalid markup for https://cudl.lib.cam.ac.uk/iiif/MS-CCCC-00014-00006-00002-00001-00230 Invalid manifest element \u00b6 { \"label\" : \"Abstract\" , \"value\" : \"<p style='text-align: justify;'> Locations featured include: Great Waldingfield <a href='' onclick='store.loadPage(2);return false;'>17865<\\/a>, Wimpole Avenues <a href='' onclick='store.loadPage(4);return false;'>17869-70<\\/a> and <a href='' onclick='store.loadPage(7);return false;'>17875-7904<\\/a>, Hockham lime-grove <a href='' onclick='store.loadPage(6);return false;'>17872<\\/a>, Merton Park <a href='' onclick='store.loadPage(6);return false;'>17873<\\/a>, Wandlebury (drought) <a href='' onclick='store.loadPage(30);return false;'>17921-27<\\/a>, Benacre Park <a href='' onclick='store.loadPage(26);return false;'>17912<\\/a>, Crane's Wood, Benhall <a href='' onclick='store.loadPage(27);return false;'>17915<\\/a>, Redisham Park <a href='' onclick='store.loadPage(28);return false;'>17916<\\/a>, Thorington Big Wood and Blythburgh Haw Wood <a href='' onclick='store.loadPage(29);return false;'>17919<\\/a> and Norwich <a href='' onclick='store.loadPage(35);return false;'>17930-32<\\/a>. <\\/p>\" } Valid manifest element \u00b6 If this is cleaned (and the description element to: { \"label\" : \"Abstract\" , \"value\" : \"Locations featured include: Great Waldingfield 17865, Wimpole Avenues 17869-70 and 17875-7904 Hockham lime-grove 17872 Merton Park 17873 Wandlebury (drought) 17921-27 Benacre Park 17912 Crane's Wood, Benhall 17915 Redisham Park 17916 Thorington Big Wood and Blythburgh Haw Wood 17919 and Norwich 17930-32.\" } So for this example - a cleaned manifest file is to be found at: https://fitz-cms-images.s3.eu-west-2.amazonaws.com/ms-cccc-00014-00006-00002-00001-00227.json You will need this link later on in this tutorial. Setting up a project \u00b6 Now you are registered and have access rights you are in the position to create an instance of a IIIF transcription and annotation project. The CUDL template source code for this project can be found in the theme repository in the snippets directory. How do I open this page? Admin rights are required to access this page. Go to https://crowdsourced.micropasts.org/project/new and you will see this form: Fill in the following attributes Name for the project - eg. Rackham Great Waldingfield A short name for the project - eg rackham17865 A long description of the project - what do you want to do? This is your first call to action - using markdown. Press create and you will be redirected to the update settings page, which will look like this: Upload an image for the header and logo for the project. Press choose file Navigate to image file Crop or resize the image to your desire (within reason) Press upload Select a project category, save and then don\u2019t touch anything else for now. Building the framework \u00b6 This is super easy! We have a template project, a descriptive and visual intro and a data URI for import of tasks. So let\u2019s get going. Task presenter \u00b6 Click on tasks in the secondary nav menu Choose task presenter Now you\u2019re in the interface to choose your project type. Scroll until you find: CUDL IIIF projects as a template Press go This now renders the code for the interface - you can adapt this if you want to here, it is just HTML 5, css and javascript. Press update Basic tasks import \u00b6 You now have a template project, but no data. Let\u2019s fix that! On the tasks page press the import tasks button Scroll down and look in the second column for IIIF Paste a validated manifest URI into the url box eg https://fitz-cms-images.s3.eu-west-2.amazonaws.com/ms-cccc-00014-00006-00002-00001-00227.json in the box (choose presentation API 2.1) Press import Your project now has tasks! Testing and publishing \u00b6 You can now test the project via the \u2018Test it!\u2019 button. Does a task appear? You should see an interface like this: If it does, try and annotate the image by dragging and drawing Try and transcribe the text Submit your transcription. If this works, then you can publish the project. Task admin \u00b6 You now want to configure the task settings. This is based on the usual questions: How many times do you want contributors to participate? 2, 3 or more? Go to tasks > settings > redundancy and set the number you want. How do you want to deliver tasks? Breadth (returns a task which has the least number of task runs (answers) excluding the current user), Random or Default (in sequence)? Go to tasks > settings > task scheduler and set the method of delivery. Do you want some tasks to be golden or high priority? Go to tasks > settings > priority and set the factors you want for the ids of the tasks Project admin \u00b6 Viewing task progress : You can see how tasks are progressing easily, and download each individual task\u2019s data directly from the tasks interface. To do this go to tasks > browse tasks and if you want to see data being entered click download task results. Ownership : You can share ownership of the project with other users, which allows you to administer the task settings and other options. To add a co-owner, go to settings > coowners and search for the user you want to add. Project report : To download a CSV report for the project go to settings and export report. Extracting data \u00b6 Like all MicroPasts projects, we tend to use scripting languages like Python or R to manipulate the data and redisplay or analyse. This uses the PYBOSSA API and export of user data to build your data analysis up. An example of how to do this with R is below: #' ---- #' title: \" A script for manipulation of the Montpelier crowdsourcing project #' author: \"Daniel Pett\" #' date: \"12/03/2021\" #' output: csv_document #' ---- #' #' # Set the project name - When you change this to the project slug you choose which one to get # data for. project <- 'cudl' # Create path string pathToDir <- paste0 ( \"~/Documents/research/micropasts/analysis/\" , project ) #Check if this path exists, if not create it. if ( ! file.exists ( pathToDir )){ dir.create ( pathToDir ) } # Set working directory (for example as below) This is for OSX. Change for your platform setwd ( pathToDir ) #MacOSX # Create CSV directory if does not exist if ( ! file.exists ( 'csv' )){ dir.create ( 'csv' ) } # Create archives directory if does not exist if ( ! file.exists ( 'archives' )){ dir.create ( 'archives' ) } # Create JSON folder if ( ! file.exists ( 'json' )){ dir.create ( 'json' ) } # Add necessary libraries library ( jsonlite ) library ( stringr ) # Load user data # http://crowdsourced.micropasts.org/admin/users/export?format=csv (when logged in as admin) # This saves as all_users.csv and put this in the csv folder users <- read.csv ( 'csv/all_users.csv' , header = TRUE ) users <- users [, c ( \"id\" , \"fullname\" , \"name\" )] # Set the base url of the application baseUrl <- 'http://crowdsourced.micropasts.org/project/' # Set the task runs api path tasks <- '/tasks/export?type=task&format=json' # Form the export url url <- paste ( baseUrl , project , tasks , sep = '' ) archives <- paste ( 'archives/' , project , 'Tasks.zip' , sep = '' ) # Import tasks from json, this method has changed due to coding changes by SciFabric to their code download.file ( url , archives ) unzip ( archives ) taskPath <- paste ( 'json/' , project , '.json' , sep = '' ) rename <- paste ( project , '_task.json' , sep = '' ) file.rename ( rename , taskPath ) # Read json files which ( lapply ( readLines ( taskPath ), function ( x ) tryCatch ({ jsonlite :: fromJSON ( x ); 1 }, error = function ( e ) 0 )) == 0 ) trT <- fromJSON ( paste ( readLines ( taskPath ), collapse = \"\" )) trT <- cbind ( trT $ id , trT $ info ) trTfull <- trT # extract just task id and image URL, title trT <- trT [, c ( 1 , 2 )] names ( trT ) <- c ( \"taskID\" , \"url_b\" ) # Import task runs from json taskruns <- '/tasks/export?type=task_run&format=json' urlRuns <- paste ( baseUrl , project , taskruns , sep = '' ) archiveRuns <- paste ( 'archives/' , project , 'TasksRun.zip' , sep = '' ) download.file ( urlRuns , archiveRuns ) unzip ( archiveRuns ) taskruns <- paste ( 'json/' , project , '_task_run.json' , sep = '' ) renameRuns <- paste ( project , '_task_run.json' , sep = '' ) file.rename ( renameRuns , taskruns ) # Read the JSON json <- fromJSON ( taskruns ) # Read the transcription data transcriptionEntry <- json $ info resultsCount <- nrow ( json ) data <- NULL # Ignore first 3 entries as they were junk for ( a in 3 : resultsCount ){ test <- as.data.frame ( json $ info $ table [ a ]) test $ DEcode <- json $ info $ deCode [ a ] test $ pageNumber <- json $ info $ pageNumber [ a ] test $ siteNumber <- json $ info $ siteNumber [ a ] test $ taskID <- json $ task_id [ a ] test $ userID <- json $ user_id [ a ] data <- rbind ( data , test ) } # Enforced to UPPER data <- as.data.frame ( sapply ( data , toupper )) # Set up user details names ( users ) <- c ( \"userID\" , \"fullname\" ) final <- merge ( data , users , by = \"userID\" , all.x = FALSE ) # Merge for file paths to be added by line final <- merge ( named , trT , by = \"taskID\" , all.x = FALSE ) # Here you label the column names that you want for your csv file header row colnames ( final ) <- c () # Create a name and path for your csv file csvname <- paste0 ( 'csv/' , project , '.csv' ) # Write the csv file to your path write.csv ( final , file = csvname , row.names = FALSE , na = \"\" )","title":"CUDL IIIF"},{"location":"projects/cudl/#pre-requisites-for-set-up","text":"Register on the platform Have access to a Rackham diary in valid IIIF format and the url for the manifest In the above pre-requisites, the word VALID is really important; at the time of writing the UL\u2019s IIIF manifests have invalid character, attributes and tags in their markup - specifically for abstract description Due to this, the IIIF validator will say no and the import of data will fail. The below is an example element with invalid markup for https://cudl.lib.cam.ac.uk/iiif/MS-CCCC-00014-00006-00002-00001-00230","title":"Pre-requisites for set up"},{"location":"projects/cudl/#invalid-manifest-element","text":"{ \"label\" : \"Abstract\" , \"value\" : \"<p style='text-align: justify;'> Locations featured include: Great Waldingfield <a href='' onclick='store.loadPage(2);return false;'>17865<\\/a>, Wimpole Avenues <a href='' onclick='store.loadPage(4);return false;'>17869-70<\\/a> and <a href='' onclick='store.loadPage(7);return false;'>17875-7904<\\/a>, Hockham lime-grove <a href='' onclick='store.loadPage(6);return false;'>17872<\\/a>, Merton Park <a href='' onclick='store.loadPage(6);return false;'>17873<\\/a>, Wandlebury (drought) <a href='' onclick='store.loadPage(30);return false;'>17921-27<\\/a>, Benacre Park <a href='' onclick='store.loadPage(26);return false;'>17912<\\/a>, Crane's Wood, Benhall <a href='' onclick='store.loadPage(27);return false;'>17915<\\/a>, Redisham Park <a href='' onclick='store.loadPage(28);return false;'>17916<\\/a>, Thorington Big Wood and Blythburgh Haw Wood <a href='' onclick='store.loadPage(29);return false;'>17919<\\/a> and Norwich <a href='' onclick='store.loadPage(35);return false;'>17930-32<\\/a>. <\\/p>\" }","title":"Invalid manifest element"},{"location":"projects/cudl/#valid-manifest-element","text":"If this is cleaned (and the description element to: { \"label\" : \"Abstract\" , \"value\" : \"Locations featured include: Great Waldingfield 17865, Wimpole Avenues 17869-70 and 17875-7904 Hockham lime-grove 17872 Merton Park 17873 Wandlebury (drought) 17921-27 Benacre Park 17912 Crane's Wood, Benhall 17915 Redisham Park 17916 Thorington Big Wood and Blythburgh Haw Wood 17919 and Norwich 17930-32.\" } So for this example - a cleaned manifest file is to be found at: https://fitz-cms-images.s3.eu-west-2.amazonaws.com/ms-cccc-00014-00006-00002-00001-00227.json You will need this link later on in this tutorial.","title":"Valid manifest element"},{"location":"projects/cudl/#setting-up-a-project","text":"Now you are registered and have access rights you are in the position to create an instance of a IIIF transcription and annotation project. The CUDL template source code for this project can be found in the theme repository in the snippets directory. How do I open this page? Admin rights are required to access this page. Go to https://crowdsourced.micropasts.org/project/new and you will see this form: Fill in the following attributes Name for the project - eg. Rackham Great Waldingfield A short name for the project - eg rackham17865 A long description of the project - what do you want to do? This is your first call to action - using markdown. Press create and you will be redirected to the update settings page, which will look like this: Upload an image for the header and logo for the project. Press choose file Navigate to image file Crop or resize the image to your desire (within reason) Press upload Select a project category, save and then don\u2019t touch anything else for now.","title":"Setting up a project"},{"location":"projects/cudl/#building-the-framework","text":"This is super easy! We have a template project, a descriptive and visual intro and a data URI for import of tasks. So let\u2019s get going.","title":"Building the framework"},{"location":"projects/cudl/#task-presenter","text":"Click on tasks in the secondary nav menu Choose task presenter Now you\u2019re in the interface to choose your project type. Scroll until you find: CUDL IIIF projects as a template Press go This now renders the code for the interface - you can adapt this if you want to here, it is just HTML 5, css and javascript. Press update","title":"Task presenter"},{"location":"projects/cudl/#basic-tasks-import","text":"You now have a template project, but no data. Let\u2019s fix that! On the tasks page press the import tasks button Scroll down and look in the second column for IIIF Paste a validated manifest URI into the url box eg https://fitz-cms-images.s3.eu-west-2.amazonaws.com/ms-cccc-00014-00006-00002-00001-00227.json in the box (choose presentation API 2.1) Press import Your project now has tasks!","title":"Basic tasks import"},{"location":"projects/cudl/#testing-and-publishing","text":"You can now test the project via the \u2018Test it!\u2019 button. Does a task appear? You should see an interface like this: If it does, try and annotate the image by dragging and drawing Try and transcribe the text Submit your transcription. If this works, then you can publish the project.","title":"Testing and publishing"},{"location":"projects/cudl/#task-admin","text":"You now want to configure the task settings. This is based on the usual questions: How many times do you want contributors to participate? 2, 3 or more? Go to tasks > settings > redundancy and set the number you want. How do you want to deliver tasks? Breadth (returns a task which has the least number of task runs (answers) excluding the current user), Random or Default (in sequence)? Go to tasks > settings > task scheduler and set the method of delivery. Do you want some tasks to be golden or high priority? Go to tasks > settings > priority and set the factors you want for the ids of the tasks","title":"Task admin"},{"location":"projects/cudl/#project-admin","text":"Viewing task progress : You can see how tasks are progressing easily, and download each individual task\u2019s data directly from the tasks interface. To do this go to tasks > browse tasks and if you want to see data being entered click download task results. Ownership : You can share ownership of the project with other users, which allows you to administer the task settings and other options. To add a co-owner, go to settings > coowners and search for the user you want to add. Project report : To download a CSV report for the project go to settings and export report.","title":"Project admin"},{"location":"projects/cudl/#extracting-data","text":"Like all MicroPasts projects, we tend to use scripting languages like Python or R to manipulate the data and redisplay or analyse. This uses the PYBOSSA API and export of user data to build your data analysis up. An example of how to do this with R is below: #' ---- #' title: \" A script for manipulation of the Montpelier crowdsourcing project #' author: \"Daniel Pett\" #' date: \"12/03/2021\" #' output: csv_document #' ---- #' #' # Set the project name - When you change this to the project slug you choose which one to get # data for. project <- 'cudl' # Create path string pathToDir <- paste0 ( \"~/Documents/research/micropasts/analysis/\" , project ) #Check if this path exists, if not create it. if ( ! file.exists ( pathToDir )){ dir.create ( pathToDir ) } # Set working directory (for example as below) This is for OSX. Change for your platform setwd ( pathToDir ) #MacOSX # Create CSV directory if does not exist if ( ! file.exists ( 'csv' )){ dir.create ( 'csv' ) } # Create archives directory if does not exist if ( ! file.exists ( 'archives' )){ dir.create ( 'archives' ) } # Create JSON folder if ( ! file.exists ( 'json' )){ dir.create ( 'json' ) } # Add necessary libraries library ( jsonlite ) library ( stringr ) # Load user data # http://crowdsourced.micropasts.org/admin/users/export?format=csv (when logged in as admin) # This saves as all_users.csv and put this in the csv folder users <- read.csv ( 'csv/all_users.csv' , header = TRUE ) users <- users [, c ( \"id\" , \"fullname\" , \"name\" )] # Set the base url of the application baseUrl <- 'http://crowdsourced.micropasts.org/project/' # Set the task runs api path tasks <- '/tasks/export?type=task&format=json' # Form the export url url <- paste ( baseUrl , project , tasks , sep = '' ) archives <- paste ( 'archives/' , project , 'Tasks.zip' , sep = '' ) # Import tasks from json, this method has changed due to coding changes by SciFabric to their code download.file ( url , archives ) unzip ( archives ) taskPath <- paste ( 'json/' , project , '.json' , sep = '' ) rename <- paste ( project , '_task.json' , sep = '' ) file.rename ( rename , taskPath ) # Read json files which ( lapply ( readLines ( taskPath ), function ( x ) tryCatch ({ jsonlite :: fromJSON ( x ); 1 }, error = function ( e ) 0 )) == 0 ) trT <- fromJSON ( paste ( readLines ( taskPath ), collapse = \"\" )) trT <- cbind ( trT $ id , trT $ info ) trTfull <- trT # extract just task id and image URL, title trT <- trT [, c ( 1 , 2 )] names ( trT ) <- c ( \"taskID\" , \"url_b\" ) # Import task runs from json taskruns <- '/tasks/export?type=task_run&format=json' urlRuns <- paste ( baseUrl , project , taskruns , sep = '' ) archiveRuns <- paste ( 'archives/' , project , 'TasksRun.zip' , sep = '' ) download.file ( urlRuns , archiveRuns ) unzip ( archiveRuns ) taskruns <- paste ( 'json/' , project , '_task_run.json' , sep = '' ) renameRuns <- paste ( project , '_task_run.json' , sep = '' ) file.rename ( renameRuns , taskruns ) # Read the JSON json <- fromJSON ( taskruns ) # Read the transcription data transcriptionEntry <- json $ info resultsCount <- nrow ( json ) data <- NULL # Ignore first 3 entries as they were junk for ( a in 3 : resultsCount ){ test <- as.data.frame ( json $ info $ table [ a ]) test $ DEcode <- json $ info $ deCode [ a ] test $ pageNumber <- json $ info $ pageNumber [ a ] test $ siteNumber <- json $ info $ siteNumber [ a ] test $ taskID <- json $ task_id [ a ] test $ userID <- json $ user_id [ a ] data <- rbind ( data , test ) } # Enforced to UPPER data <- as.data.frame ( sapply ( data , toupper )) # Set up user details names ( users ) <- c ( \"userID\" , \"fullname\" ) final <- merge ( data , users , by = \"userID\" , all.x = FALSE ) # Merge for file paths to be added by line final <- merge ( named , trT , by = \"taskID\" , all.x = FALSE ) # Here you label the column names that you want for your csv file header row colnames ( final ) <- c () # Create a name and path for your csv file csvname <- paste0 ( 'csv/' , project , '.csv' ) # Write the csv file to your path write.csv ( final , file = csvname , row.names = FALSE , na = \"\" )","title":"Extracting data"},{"location":"projects/ees/","text":"How do I open this page? Admin rights are required to access this page.","title":"Egypt Exploration Society"},{"location":"projects/introduction/","text":"At the moment, we run all MicroPasts project directly within the site framework. Using the system API, you could build a headless driven application - for example see Libcrowds from the British Library. Each project is run from HTML/Javascript templates, which interact with data or tasks supplied via the Pybossa framework. These are essentially as simple or as complex as your Javascript skills make them. Follow the KISS paradigm and you won\u2019t go wrong! Creation of projects \u00b6 Who can create? \u00b6 Within the Pybossa framework, anyone can create a project if they are registered with the platform; they can only be made final if the system administrators give approval (Daniel Pett, Chiara Bonacchi, Andy Bevan and Jennifer Wexler.) The owner of the project and system administrators can edit each projects details, or if you want to, you can co-own projects with another user. By allowing any registered user to create a project, we enable democratic citizen science and provide a platform upon which those without the means to create their own can thrive. How does one create a project? \u00b6 Creating project templates and tutorials alongside the final analysis of your data are the hardest parts of running a citizen science project. Each project has a set of template files to run the required activities. Our preferred methodology for first time creation of a project, is to create your template code and use version control on Github and deploy to the platform via the PBS command line interface. If a project is likely to become a template, the project team will create template snippets in the main theme and it becomes far easier to create and deploy! To learn more about this, read on!","title":"Introduction"},{"location":"projects/introduction/#creation-of-projects","text":"","title":"Creation of projects"},{"location":"projects/introduction/#who-can-create","text":"Within the Pybossa framework, anyone can create a project if they are registered with the platform; they can only be made final if the system administrators give approval (Daniel Pett, Chiara Bonacchi, Andy Bevan and Jennifer Wexler.) The owner of the project and system administrators can edit each projects details, or if you want to, you can co-own projects with another user. By allowing any registered user to create a project, we enable democratic citizen science and provide a platform upon which those without the means to create their own can thrive.","title":"Who can create?"},{"location":"projects/introduction/#how-does-one-create-a-project","text":"Creating project templates and tutorials alongside the final analysis of your data are the hardest parts of running a citizen science project. Each project has a set of template files to run the required activities. Our preferred methodology for first time creation of a project, is to create your template code and use version control on Github and deploy to the platform via the PBS command line interface. If a project is likely to become a template, the project team will create template snippets in the main theme and it becomes far easier to create and deploy! To learn more about this, read on!","title":"How does one create a project?"},{"location":"projects/masking/","text":"As part of our AHRC funded work, we wanted to create 3D models and speed up the creation of photomasks for use in their production. Harnessing the power of the crowd allowed us to scale up and teach new skills to participants. How do I open this page? You must be registered to access these functions. Create a masking project \u00b6 You have two quick methods available to you for adding this project to the system. Through the point and click interface system Through the creation of code and pushing to the system via PBS Interface deployment \u00b6 PBS deployment \u00b6 Importing tasks \u00b6 Extracting data \u00b6 What will this produce? \u00b6 After manipulation of these results via R ( using this code ) image masks are generated for use within Photogrammetric software. We used Agisoft\u2019s Photoscan (now Metashape) to produce 3d models (over 100 were produced) and an example is displayed below. Example 3D model \u00b6","title":"3D masking"},{"location":"projects/masking/#create-a-masking-project","text":"You have two quick methods available to you for adding this project to the system. Through the point and click interface system Through the creation of code and pushing to the system via PBS","title":"Create a masking project"},{"location":"projects/masking/#interface-deployment","text":"","title":"Interface deployment"},{"location":"projects/masking/#pbs-deployment","text":"","title":"PBS deployment"},{"location":"projects/masking/#importing-tasks","text":"","title":"Importing tasks"},{"location":"projects/masking/#extracting-data","text":"","title":"Extracting data"},{"location":"projects/masking/#what-will-this-produce","text":"After manipulation of these results via R ( using this code ) image masks are generated for use within Photogrammetric software. We used Agisoft\u2019s Photoscan (now Metashape) to produce 3d models (over 100 were produced) and an example is displayed below.","title":"What will this produce?"},{"location":"projects/masking/#example-3d-model","text":"","title":"Example 3D model"},{"location":"theme/intro/","text":"The theme used for the MicroPasts installation of Pybossa is built off the base Pybossa default theme and has been customised and ported to Bootstrap 4.5 CSS framework. The theme is a mix of python, javascript, css and HTML5 and is quite easy to adapt and extend. Theme development \u00b6 The theme\u2019s code is version controlled on GitHub under the MicroPasts organisation from where it is deployed directly to the server running the Pybossa instance. It has been developed by Daniel Pett and is stored at: https://github.com/MicroPasts/MicroPasts-pybossa-theme It has had two releases 6 years apart. Installing the theme \u00b6 To work on the theme, you will need to do the following: cd pybossa/pybossa/themes git clone https://github.com/MicroPasts/MicroPasts-pybossa-theme This will install the theme into your installation. You will now need to enable it within the system. To do this: cd pybossa nano settings_local.py Now add: THEME = 'MicroPasts-pybossa-theme' And save your file. Restart the services and your theme should be active. Updating the theme \u00b6 If any changes are made to the template, you will need to pull these in via git: cd pybossa/pybossa/themes/MicroPasts-pybossa-theme git pull","title":"MicroPasts PYBOSSA Theme"},{"location":"theme/intro/#theme-development","text":"The theme\u2019s code is version controlled on GitHub under the MicroPasts organisation from where it is deployed directly to the server running the Pybossa instance. It has been developed by Daniel Pett and is stored at: https://github.com/MicroPasts/MicroPasts-pybossa-theme It has had two releases 6 years apart.","title":"Theme development"},{"location":"theme/intro/#installing-the-theme","text":"To work on the theme, you will need to do the following: cd pybossa/pybossa/themes git clone https://github.com/MicroPasts/MicroPasts-pybossa-theme This will install the theme into your installation. You will now need to enable it within the system. To do this: cd pybossa nano settings_local.py Now add: THEME = 'MicroPasts-pybossa-theme' And save your file. Restart the services and your theme should be active.","title":"Installing the theme"},{"location":"theme/intro/#updating-the-theme","text":"If any changes are made to the template, you will need to pull these in via git: cd pybossa/pybossa/themes/MicroPasts-pybossa-theme git pull","title":"Updating the theme"}]}